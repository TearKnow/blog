require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var UserAgent = require('../mod/userAgent');
var userAgent = new UserAgent();
var StringHandle = require('../mod/stringHandle');
var stringHandle = new StringHandle();
var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var status = {
    loadingGoodsInFavor : false,
    loadedGoodsInFavor : false,
    favorIsEmpty : true,
    mouseIsInFavorIcon : false
};

var favorIcon = $("#js-favor-icon");
var list = favorIcon.find(".nav-favor-desc");
var showRoomList = favorIcon.find(".showroom-list");
var navFavorite = favorIcon.find(".nav-favorite");

var userFavorCount = function() {
    $.ajax({
        'type': 'POST',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': 'act=get_default_showroom_goods_count',
        'dataType': 'json',
        'success': function (r) {
            if (r.code === 0 && r.count > 0) {
                $("#js-user-favor-count").html(r.count);
                $("#js-user-favor-count").show();
            }
        }
    });
};

var displayFavorList = function () {
    $('.tip-arrow').css('display','none');
    $('.showroom-tip').css('display','none');
    var favorCount = parseInt($('#favorGoodsTotal').html());
    if(favorCount <= 0){
        favorIcon.addClass("over");
    }
};

var hideFavorList = function () {
    status.mouseIsInFavorIcon = false;
    favorIcon.removeClass("over");
    showRoomList.css('display','none');
};

function openShowroomDialog() {
    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay');
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
    };

    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

    $(".showroom-dialog").css("display", "block");
    $('#loginDialog').css('display','none');
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $(".showroom-dialog").css("top",$(window).scrollTop() + $(window).height() / 7);
    }else{
        $(".showroom-dialog").css("top",$(window).scrollTop());
    }
};

var init = function () {
    // var isShowDialog = cookie.getCookie('HowItWork') ? cookie.getCookie('HowItWork') : false;
    // if (isShowDialog) {
    //     openShowroomDialog();
    //     cookie.setCookie('HowItWork', false, -1);
    // }
    // userFavorCount();
    favorIcon.hover(displayFavorList, function () {
        hideFavorList();
    });

    $('.showroom-dialog-close').on("click",function () {
        $(".showroom-dialog").css("display", "none");
        $('#dialogOverlay').css("display", "none");
    });

    $('.showroom-work-explain').on('mouseenter',function () {
        $('.explain-showroom-content').css("display","block");
    });

    $('.showroom-work-explain').on('mouseleave',function () {
        $('.explain-showroom-content').css("display","none");
    });

    initShowRoomList();
    initCreateShowRoom();

};

var initShowRoomList = function () {
    var param = {
        "act": "get_user_showroom_list",
    }
    $.ajax({
        'type': 'get',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        'success': function (r) {
            if (r.code == 0) {
                var showroom_list = "";
                var otherShowroom = ""
                var defaultShowroom = ""
                var web_root = webData.WEB_ROOT || "/"
                var orignName = _lang.page_showroom_name || "{$sh_name}'s showroom"
                for (var i = 0;i<r.showroom_list.length;i++) {

                    //ellipsis the sh_name which is too long, it makes "aaaaaaaaaaaaaaaaaa's Showroom" to "aaaaaaaaaa...'s Showroom"
                    if(r.showroom_list[i]["sh_name"].length > 18)
                    {
                        r.showroom_list[i]["sh_name"] = r.showroom_list[i]["sh_name"].substr(0,15) + "..."
                    }

                    var name = orignName.replace("{$sh_name}", r.showroom_list[i]['sh_name'])
                    if (r.showroom_list[i]['is_default'] == 1) {
                        defaultShowroom = "<a class=\"default-showroom\" href=\"" + web_root + "showroom.php?id=" + r.showroom_list[i]['sh_id'] + "\">" + name + "</a>";
                    } else {
                        otherShowroom += "<a href=\"" + web_root + "showroom.php?id=" + r.showroom_list[i]['sh_id'] + "\">" + name + "</a>";
                    }
                }
                showroom_list += defaultShowroom + otherShowroom
                $('.user-showroom-list').html(showroom_list);
                if (r.self_showroom_count >= 3) {
                    $('.create-showroom').css('display','none');
                } else {
                    $('.create-showroom').css('display','block');
                }
            }
        }
    });
}

var initCreateShowRoom = function () {
    $('.create-showroom').on("click",function () {
        if (window.login_status === true) {
            openShowroomDialog();
        }
    });
}

var initActiveShowRoom = function () {
    var param = {
        "act": "get_active_showroom",
    }
    $.ajax({
        'type': 'get',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        'success': function (r) {
            if (r.code == 0) {
                $('.favorite-link').find('.nologin-text').css("display", "none");
                $('.favorite-link').find('.showroom-text').css("display","block");
                $('.favorite-link').find('.showroom-text').text(r.data);
                $('.showroom-default-text').css("display","block");
                // $('.favorite-link').attr("href","/showroom.php");

                var width = $('.favorite-link').find('.showroom-text').width();
                var dwidth = $('.showroom-default-text').width();
                if (width+dwidth > 59) {
                    var dvalue = width+dwidth-59;
                    $('.nav-favorite').css('width',120+dvalue);
                    $('#js-favor-icon').css('right',120+dvalue);
                    $('.header-right').css('right',165+dvalue);
                }
                $('.nav-favorite').find('em').addClass('account-more');
            }
        }
    });
};

var disableLoaded = function () {
    status.loadedGoodsInFavor = false;
};

var pop = function () {
    displayFavorList();
};
module.exports = {
    "init": init,
    "disableLoaded": disableLoaded,
    "pop": pop,
    "initShowRoomList": initShowRoomList,
    "initActiveShowRoom": initActiveShowRoom,
    "initCreateShowRoom": initCreateShowRoom
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":9,"../mod/stringHandle":18,"../mod/userAgent":19}],2:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var Favorites = require('../mod/favorites');
var favorites = new Favorites();
var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var addFavCount = function(favCount) {
    $('#favorGoodsTotal').html(favCount);
}

// hanlder_add2fav2 for detail page
var hanlder_add2fav2 = function (me, favCount) {
    addFavCount(favCount);
    $('#add2fav2').removeClass('processing').removeClass('add2fav2').addClass('existingFav2');
    cookie.setCookie('favGoodsId', 0, -1);
};

//delete favor for detail page
var delete_favor2 = function (me, favCount) {
    addFavCount(favCount);
    $('#add2fav2').removeClass('processing').removeClass('existingFav2').addClass('add2fav2');
    cookie.setCookie('favGoodsId', 0, -1);
};

// handle_favor for liat page and search page
var hanlder_favor = function(me, favCount){
    addFavCount(favCount);
    me.removeClass("favor_unselected").addClass("favor_select");
    cookie.setCookie('favGoodsId', 0, -1);
};

//delete favor for list page and search page
var delete_favor = function(me, favCount) {
    addFavCount(favCount);
    me.removeClass("favor_select").addClass("favor_unselected");
    cookie.setCookie('favGoodsId', 0, -1);
}

var refreshFavorites = function () {
    // detail page
    if (!$.isEmptyObject(pageData) && pageData.js_key == 'goods') {
        favorites.refreshFavorites($('.add2fav2'));
    }

    // list page
    if (!$.isEmptyObject(pageData) && pageData.js_key == 'category') {
        favorites.refreshFavorites($('.catpl-prod div .rating-favor .favor_product_page'));
    }

    // search page
    if (!$.isEmptyObject(pageData) && pageData.js_key == 'search') {
        favorites.refreshFavorites($('.catpl-prod .rating-favor .favor_product_page'));
    }

    // addOnItem page
    if (!$.isEmptyObject(pageData) && pageData.js_key == 'recommend_picks') {
        favorites.refreshFavorites($('.catpl-prod .rating-favor .favor_product_page'));
    }

    // landing page
    if (!$.isEmptyObject(pageData) && pageData.js_key == 'landing_page') {
        favorites.refreshFavorites($('.catpl-prod .rating-favor .favor_product_page'));
    }
}

var bindFavEvent = function () {
    var jumpUrl = document.URL.replace('#.*$', '');
    $(document).on('click', '.favor_product_page',function () {
        var me = $(this);
        if (me.hasClass('favor_unselected')) {
            var PopLogin = require('../mod/popLogin');
            var popLogin = new PopLogin();
            var me = $(this);
            var goods_id = me.attr('data-goodsId');
            if (window.login_status === false) {
                cookie.setCookie('favGoodsId', goods_id, 1);
            }
            popLogin.requestFloatingSign(function () {
                favorites.addFav(goods_id, hanlder_favor, me);
            }, jumpUrl);
        } else {
            var tips = _lang.page_delete_showroom_good;
            var rs = confirm(tips);
            if (rs == false) {
                return;
            }
            var PopLogin = require('../mod/popLogin');
            var popLogin = new PopLogin();
            var me = $(this);
            var goods_id = me.attr('data-goodsId');
            if (window.login_status === false) {
                cookie.setCookie('favGoodsId', goods_id, 1);
            }
            popLogin.requestFloatingSign(function () {
                favorites.delFav(goods_id, delete_favor, me);
            }, jumpUrl);
        }
    });
};

exports.init = function () {
    refreshFavorites();

    //detail click
    $(function () {
        var jumpUrl = document.URL.replace('#.*$', '');
        $('#add2fav2').on("click", function () {
            if (!$(this).hasClass('existingFav2')) {
                var me = $(this);
                if (window.login_status === false) {
                    cookie.setCookie('favGoodsId', pageData.goods_id, 1);
                }
                var PopLogin = require('../mod/popLogin');
                var popLogin = new PopLogin();
                popLogin.requestFloatingSign(function () {
                    favorites.addFav(pageData.goods_id, hanlder_add2fav2, me);
                }, jumpUrl);
            } else {
                var tips = _lang.page_delete_showroom_good;
                var rs = confirm(tips);
                if (rs == false) {
                    return;
                }
                var me = $(this);
                if (window.login_status === false) {
                    cookie.setCookie('favGoodsId', pageData.goods_id, 1);
                }
                var PopLogin = require('../mod/popLogin');
                var popLogin = new PopLogin();
                popLogin.requestFloatingSign(function () {
                    favorites.delFav(pageData.goods_id, delete_favor2, me);
                }, jumpUrl);
            }
        });

        var favBtn = $(".favor_product_page.favor_unselected");
        favBtn.hover(function(){
            $(this).addClass("hover");
        },function(){
            $(this).removeClass("hover");
        });

        $(document).ready(function () {
            //列表页&搜索页添加收藏
            bindFavEvent();
        })
    });
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":9,"../mod/favorites":12,"../mod/popLogin":17}],3:[function(require,module,exports){
(function (global){
var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

/*!
 * jQuery UI Core 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.4",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],4:[function(require,module,exports){
(function (global){
var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('./core');

/*!
 * jQuery UI Datepicker 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.10.4" } });

var PROP_NAME = "datepicker",
	instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[""] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: ["January","February","March","April","May","June",
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional[""]);
	this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function(target, settings) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		if (!target.id) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {});
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);

		if (inst.trigger) {
			inst.trigger.remove();
		}

		showOn = this._get(inst, "showOn");
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		}
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
			buttonText = this._get(inst, "buttonText");
			buttonImage = this._get(inst, "buttonImage");
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?
				$("<img/>").addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$("<button type='button'></button>").addClass(this._triggerClass).
					html(!buttonImage ? buttonText : $("<img/>").attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? "before" : "after"](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker(input[0]);
				} else {
					$.datepicker._showDatepicker(input[0]);
				}
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // Ensure double digits
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.filter("button").
				each(function() { this.disabled = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function(target, name, value) {
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof name === "string") {
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name === "all" ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}

		settings = name || {};
		if (typeof name === "string") {
			settings = {};
			settings[name] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);

							// trigger custom callback
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			handled = false;
		}

		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);

		if (inst.input.val() !== inst.lastVal) {
			try {
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));

				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ($.datepicker._inDialog) { // hide cursor
			input.value = "";
		}
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});

		if (!inst.inline) {
			showAnim = $.datepicker._get(inst, "showAnim");
			duration = $.datepicker._get(inst, "duration");
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
			} else {
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17;

		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("ui-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("ui-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.focus();
		}

		// deffered render of the years select (to avoid flashes on Firefox)
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
			return;
		}

		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}

			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var date,
			target = $(id),
			inst = this._getInst(target[0]);

		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		inst["selected" + (period === "M" ? "Month" : "Year")] =
		inst["draw" + (period === "M" ? "Month" : "Year")] =
			parseInt(select.options[select.selectedIndex].value,10);

		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var inst,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}

		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		this._selectDate(target, "");
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			inst.input.val(dateStr);
		}
		this._updateAlternate(inst);

		onSelect = this._get(inst, "onSelect");
		if (onSelect) {
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		} else if (inst.input) {
			inst.input.trigger("change"); // fire the change event
		}

		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) !== "object") {
				inst.input.focus(); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}

		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Extract a number from the string value
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					digits = new RegExp("^\\d{1," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			// Extract a name from the string value and convert to an index
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if (value.charAt(iValue) !== format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")){
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}

		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}

		date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Format a number, with leading zero if necessary
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			// Format a name, short or long as requested
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}

		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			settings = this._getFormatConfig(inst);

		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			dates = (noDefault ? "" : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						offset, $.datepicker._getFormatConfig(inst));
				}
				catch (e) {
					// Ignore
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function(date) {
		if (!date) {
			return null;
		}
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? "" : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					$.datepicker._adjustDate(id, -stepMonths, "M");
				},
				next: function () {
					$.datepicker._adjustDate(id, +stepMonths, "M");
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
		});
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
			isRTL = this._get(inst, "isRTL"),
			showButtonPanel = this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDate = this._getDefaultDate(inst);
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				cornerClass = " ui-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='ui-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// month selection
		if (secondary || !changeMonth) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
		} else {
			inMinYear = (minDate && minDate.getFullYear() === drawYear);
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
					monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if (!showMonthAfterYear) {
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
		}

		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {
				// determine range of years to display
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for (; year <= endYear; year++) {
					inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		}
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).removeClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).removeClass("ui-datepicker-next-hover");
			}
		})
		.delegate(selector, "mouseover", function(){
			if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
				$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
				$(this).addClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).addClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).addClass("ui-datepicker-next-hover");
				}
			}
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		typeof options === "string" ?
			$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.10.4";

})(jQuery);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./core":3}],5:[function(require,module,exports){
(function (global){
//define(function(require, exports, modlue) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	$.extend($.fn, {
		jmodal: function(setting) {
			var ps = $.fn.extend({
				data: {},
				marginTop: 100,
				buttonText: { ok: 'Ok', cancel: 'Cancel' },
				okEvent: function(e) { },
				width: 400,
				fixed: true,
				title: 'JModal Dialog',
				content: 'This is a jquery plugin!',
				skinId: 'jmodal-main'
			}, setting);
			var allSel = $('select').hide(), doc = $(document);

			ps.docWidth = doc.width();
			ps.docHeight = doc.height();
			var cache, cacheKey = 'jericho_modal';

			if ($('#jmodal-overlay').length == 0) {
				$('<div id="jmodal-overlay" class="jmodal-overlay"/>\
					<div class="jmodal-main" id="jmodal-main" >\
						<div class="jmodal-top">\
							<div class="jmodal-top-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-border-top jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-top-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
						<div class="jmodal-middle">\
							<div class="jmodal-border-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-middle-content">\
								<div class="jmodal-title" />\
								<div class="jmodal-content" id="jmodal-container-content" />\
								</div>\
							<div class="jmodal-border-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
						<div class="jmodal-bottom">\
							<div class="jmodal-bottom-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-border-bottom jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-bottom-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
					</div>').appendTo('body');
				//$(document.body).find('form:first-child') || $(document.body)
			}

			if (window[cacheKey] == undefined) {
				cache = {
					overlay: $('#jmodal-overlay'),
					modal: $('#jmodal-main'),
					body: $('#jmodal-container-content')
				};
				cache.title = cache.body.prev();
				cache.buttons = cache.body.next().children();
				window[cacheKey] = cache;
			}
			cache = window[cacheKey];
			var args = {
				hide: function() {
					cache.modal.fadeOut();
					cache.overlay.hide();
				},
				isCancelling: false
			};

			if (!cache.overlay.is(':visible')) {
				cache.overlay.css({ opacity: .4 }).show();
				cache.modal.attr('class', ps.skinId)
							.css({
								position: (ps.fixed ? 'fixed' : 'absolute'),
								width: ps.width,
								left: (ps.docWidth - ps.width) / 2,
								top: (ps.marginTop + document.documentElement.scrollTop)
							}).fadeIn();
			}
			cache.title.html(ps.title);
			//OK BUTTON
			cache.buttons.eq(0)
				.val(ps.buttonText.ok)
					.unbind('click')
						.click(function(e) {
							allSel.show();
							ps.okEvent(ps.data, args);
							if (!args.isCancelling) {
								args.hide();
							}
						})
			//CANCEL BUTTON
				.next()
					.val(ps.buttonText.cancel)
						.one('click', function() { args.hide(); allSel.show(); });

			if (typeof ps.content == 'string') {
				$('#jmodal-container-content').html(ps.content);
			}
			if (typeof ps.content == 'function') {
				ps.content(cache.body);
			}
		}
	})
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbGliL2ptb2RhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kbHVlKSB7XHJcblx0dmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblx0JC5leHRlbmQoJC5mbiwge1xyXG5cdFx0am1vZGFsOiBmdW5jdGlvbihzZXR0aW5nKSB7XHJcblx0XHRcdHZhciBwcyA9ICQuZm4uZXh0ZW5kKHtcclxuXHRcdFx0XHRkYXRhOiB7fSxcclxuXHRcdFx0XHRtYXJnaW5Ub3A6IDEwMCxcclxuXHRcdFx0XHRidXR0b25UZXh0OiB7IG9rOiAnT2snLCBjYW5jZWw6ICdDYW5jZWwnIH0sXHJcblx0XHRcdFx0b2tFdmVudDogZnVuY3Rpb24oZSkgeyB9LFxyXG5cdFx0XHRcdHdpZHRoOiA0MDAsXHJcblx0XHRcdFx0Zml4ZWQ6IHRydWUsXHJcblx0XHRcdFx0dGl0bGU6ICdKTW9kYWwgRGlhbG9nJyxcclxuXHRcdFx0XHRjb250ZW50OiAnVGhpcyBpcyBhIGpxdWVyeSBwbHVnaW4hJyxcclxuXHRcdFx0XHRza2luSWQ6ICdqbW9kYWwtbWFpbidcclxuXHRcdFx0fSwgc2V0dGluZyk7XHJcblx0XHRcdHZhciBhbGxTZWwgPSAkKCdzZWxlY3QnKS5oaWRlKCksIGRvYyA9ICQoZG9jdW1lbnQpO1xyXG5cclxuXHRcdFx0cHMuZG9jV2lkdGggPSBkb2Mud2lkdGgoKTtcclxuXHRcdFx0cHMuZG9jSGVpZ2h0ID0gZG9jLmhlaWdodCgpO1xyXG5cdFx0XHR2YXIgY2FjaGUsIGNhY2hlS2V5ID0gJ2plcmljaG9fbW9kYWwnO1xyXG5cclxuXHRcdFx0aWYgKCQoJyNqbW9kYWwtb3ZlcmxheScpLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcdFx0JCgnPGRpdiBpZD1cImptb2RhbC1vdmVybGF5XCIgY2xhc3M9XCJqbW9kYWwtb3ZlcmxheVwiLz5cXFxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1tYWluXCIgaWQ9XCJqbW9kYWwtbWFpblwiID5cXFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLXRvcFwiPlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC10b3AtbGVmdCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItdG9wIGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLXRvcC1yaWdodCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJqbW9kYWwtbWlkZGxlXCI+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvcmRlci1sZWZ0IGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLW1pZGRsZS1jb250ZW50XCI+XFxcclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJqbW9kYWwtdGl0bGVcIiAvPlxcXHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWNvbnRlbnRcIiBpZD1cImptb2RhbC1jb250YWluZXItY29udGVudFwiIC8+XFxcclxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItcmlnaHQgam1vZGFsLXBuZy1maWV4ZWRcIj4mbmJzcDs8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvdHRvbVwiPlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3R0b20tbGVmdCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItYm90dG9tIGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvdHRvbS1yaWdodCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHQ8L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpO1xyXG5cdFx0XHRcdC8vJChkb2N1bWVudC5ib2R5KS5maW5kKCdmb3JtOmZpcnN0LWNoaWxkJykgfHwgJChkb2N1bWVudC5ib2R5KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAod2luZG93W2NhY2hlS2V5XSA9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRjYWNoZSA9IHtcclxuXHRcdFx0XHRcdG92ZXJsYXk6ICQoJyNqbW9kYWwtb3ZlcmxheScpLFxyXG5cdFx0XHRcdFx0bW9kYWw6ICQoJyNqbW9kYWwtbWFpbicpLFxyXG5cdFx0XHRcdFx0Ym9keTogJCgnI2ptb2RhbC1jb250YWluZXItY29udGVudCcpXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRjYWNoZS50aXRsZSA9IGNhY2hlLmJvZHkucHJldigpO1xyXG5cdFx0XHRcdGNhY2hlLmJ1dHRvbnMgPSBjYWNoZS5ib2R5Lm5leHQoKS5jaGlsZHJlbigpO1xyXG5cdFx0XHRcdHdpbmRvd1tjYWNoZUtleV0gPSBjYWNoZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYWNoZSA9IHdpbmRvd1tjYWNoZUtleV07XHJcblx0XHRcdHZhciBhcmdzID0ge1xyXG5cdFx0XHRcdGhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Y2FjaGUubW9kYWwuZmFkZU91dCgpO1xyXG5cdFx0XHRcdFx0Y2FjaGUub3ZlcmxheS5oaWRlKCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRpc0NhbmNlbGxpbmc6IGZhbHNlXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoIWNhY2hlLm92ZXJsYXkuaXMoJzp2aXNpYmxlJykpIHtcclxuXHRcdFx0XHRjYWNoZS5vdmVybGF5LmNzcyh7IG9wYWNpdHk6IC40IH0pLnNob3coKTtcclxuXHRcdFx0XHRjYWNoZS5tb2RhbC5hdHRyKCdjbGFzcycsIHBzLnNraW5JZClcclxuXHRcdFx0XHRcdFx0XHQuY3NzKHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAocHMuZml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyksXHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDogcHMud2lkdGgsXHJcblx0XHRcdFx0XHRcdFx0XHRsZWZ0OiAocHMuZG9jV2lkdGggLSBwcy53aWR0aCkgLyAyLFxyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOiAocHMubWFyZ2luVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcClcclxuXHRcdFx0XHRcdFx0XHR9KS5mYWRlSW4oKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYWNoZS50aXRsZS5odG1sKHBzLnRpdGxlKTtcclxuXHRcdFx0Ly9PSyBCVVRUT05cclxuXHRcdFx0Y2FjaGUuYnV0dG9ucy5lcSgwKVxyXG5cdFx0XHRcdC52YWwocHMuYnV0dG9uVGV4dC5vaylcclxuXHRcdFx0XHRcdC51bmJpbmQoJ2NsaWNrJylcclxuXHRcdFx0XHRcdFx0LmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRhbGxTZWwuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHRcdHBzLm9rRXZlbnQocHMuZGF0YSwgYXJncyk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFhcmdzLmlzQ2FuY2VsbGluZykge1xyXG5cdFx0XHRcdFx0XHRcdFx0YXJncy5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHQvL0NBTkNFTCBCVVRUT05cclxuXHRcdFx0XHQubmV4dCgpXHJcblx0XHRcdFx0XHQudmFsKHBzLmJ1dHRvblRleHQuY2FuY2VsKVxyXG5cdFx0XHRcdFx0XHQub25lKCdjbGljaycsIGZ1bmN0aW9uKCkgeyBhcmdzLmhpZGUoKTsgYWxsU2VsLnNob3coKTsgfSk7XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIHBzLmNvbnRlbnQgPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHQkKCcjam1vZGFsLWNvbnRhaW5lci1jb250ZW50JykuaHRtbChwcy5jb250ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodHlwZW9mIHBzLmNvbnRlbnQgPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHBzLmNvbnRlbnQoY2FjaGUuYm9keSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KVxyXG4vL30pOyJdfQ==
},{}],6:[function(require,module,exports){
/*! jQuery UI - v1.11.1 - 2014-08-13
* http://jqueryui.com
* Includes: datepicker-af.js, datepicker-ar-DZ.js, datepicker-ar.js, datepicker-az.js, datepicker-be.js, datepicker-bg.js, datepicker-bs.js, datepicker-ca.js, datepicker-cs.js, datepicker-cy-GB.js, datepicker-da.js, datepicker-de.js, datepicker-el.js, datepicker-en-AU.js, datepicker-en-GB.js, datepicker-en-NZ.js, datepicker-eo.js, datepicker-es.js, datepicker-et.js, datepicker-eu.js, datepicker-fa.js, datepicker-fi.js, datepicker-fo.js, datepicker-fr-CA.js, datepicker-fr-CH.js, datepicker-fr.js, datepicker-gl.js, datepicker-he.js, datepicker-hi.js, datepicker-hr.js, datepicker-hu.js, datepicker-hy.js, datepicker-id.js, datepicker-is.js, datepicker-it-CH.js, datepicker-it.js, datepicker-ja.js, datepicker-ka.js, datepicker-kk.js, datepicker-km.js, datepicker-ko.js, datepicker-ky.js, datepicker-lb.js, datepicker-lt.js, datepicker-lv.js, datepicker-mk.js, datepicker-ml.js, datepicker-ms.js, datepicker-nb.js, datepicker-nl-BE.js, datepicker-nl.js, datepicker-nn.js, datepicker-no.js, datepicker-pl.js, datepicker-pt-BR.js, datepicker-pt.js, datepicker-rm.js, datepicker-ro.js, datepicker-ru.js, datepicker-sk.js, datepicker-sl.js, datepicker-sq.js, datepicker-sr-SR.js, datepicker-sr.js, datepicker-sv.js, datepicker-ta.js, datepicker-th.js, datepicker-tj.js, datepicker-tr.js, datepicker-uk.js, datepicker-vi.js, datepicker-zh-CN.js, datepicker-zh-HK.js, datepicker-zh-TW.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function (e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery)
})(function (e) {
    var t = e.datepicker;
    t.regional.af = {
        closeText: "Selekteer",
        prevText: "Vorige",
        nextText: "Volgende",
        currentText: "Vandag",
        monthNames: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        dayNames: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
        dayNamesShort: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
        dayNamesMin: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.af), t.regional.af, t.regional["ar-DZ"] = {
        closeText: "إغلاق",
        prevText: "&#x3C;السابق",
        nextText: "التالي&#x3E;",
        currentText: "اليوم",
        monthNames: ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesShort: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesMin: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        weekHeader: "أسبوع",
        dateFormat: "dd/mm/yy",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["ar-DZ"]), t.regional["ar-DZ"], t.regional.ar = {
        closeText: "إغلاق",
        prevText: "&#x3C;السابق",
        nextText: "التالي&#x3E;",
        currentText: "اليوم",
        monthNames: ["كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesShort: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
        weekHeader: "أسبوع",
        dateFormat: "dd/mm/yy",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.ar), t.regional.ar, t.regional.az = {
        closeText: "Bağla",
        prevText: "&#x3C;Geri",
        nextText: "İrəli&#x3E;",
        currentText: "Bugün",
        monthNames: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"],
        monthNamesShort: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avq", "Sen", "Okt", "Noy", "Dek"],
        dayNames: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
        dayNamesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
        dayNamesMin: ["B", "B", "Ç", "С", "Ç", "C", "Ş"],
        weekHeader: "Hf",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.az), t.regional.az, t.regional.be = {
        closeText: "Зачыніць",
        prevText: "&larr;Папяр.",
        nextText: "Наст.&rarr;",
        currentText: "Сёньня",
        monthNames: ["Студзень", "Люты", "Сакавік", "Красавік", "Травень", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Сьнежань"],
        monthNamesShort: ["Сту", "Лют", "Сак", "Кра", "Тра", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сьн"],
        dayNames: ["нядзеля", "панядзелак", "аўторак", "серада", "чацьвер", "пятніца", "субота"],
        dayNamesShort: ["ндз", "пнд", "аўт", "срд", "чцв", "птн", "сбт"],
        dayNamesMin: ["Нд", "Пн", "Аў", "Ср", "Чц", "Пт", "Сб"],
        weekHeader: "Тд",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.be), t.regional.be, t.regional.bg = {
        closeText: "затвори",
        prevText: "&#x3C;назад",
        nextText: "напред&#x3E;",
        nextBigText: "&#x3E;&#x3E;",
        currentText: "днес",
        monthNames: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"],
        monthNamesShort: ["Яну", "Фев", "Мар", "Апр", "Май", "Юни", "Юли", "Авг", "Сеп", "Окт", "Нов", "Дек"],
        dayNames: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"],
        dayNamesShort: ["Нед", "Пон", "Вто", "Сря", "Чет", "Пет", "Съб"],
        dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Съ"],
        weekHeader: "Wk",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.bg), t.regional.bg, t.regional.bs = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Januar", "Februar", "Mart", "April", "Maj", "Juni", "Juli", "August", "Septembar", "Oktobar", "Novembar", "Decembar"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Wk",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.bs), t.regional.bs, t.regional.ca = {
        closeText: "Tanca",
        prevText: "Anterior",
        nextText: "Següent",
        currentText: "Avui",
        monthNames: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"],
        monthNamesShort: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des"],
        dayNames: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
        dayNamesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"],
        dayNamesMin: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"],
        weekHeader: "Set",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.ca), t.regional.ca, t.regional.cs = {
        closeText: "Zavřít",
        prevText: "&#x3C;Dříve",
        nextText: "Později&#x3E;",
        currentText: "Nyní",
        monthNames: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec"],
        monthNamesShort: ["led", "úno", "bře", "dub", "kvě", "čer", "čvc", "srp", "zář", "říj", "lis", "pro"],
        dayNames: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
        dayNamesShort: ["ne", "po", "út", "st", "čt", "pá", "so"],
        dayNamesMin: ["ne", "po", "út", "st", "čt", "pá", "so"],
        weekHeader: "Týd",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.cs), t.regional.cs, t.regional["cy-GB"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"],
        monthNamesShort: ["Ion", "Chw", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tac", "Rha"],
        dayNames: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
        dayNamesShort: ["Sul", "Llu", "Maw", "Mer", "Iau", "Gwe", "Sad"],
        dayNamesMin: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
        weekHeader: "Wy",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["cy-GB"]), t.regional["cy-GB"], t.regional.da = {
        closeText: "Luk",
        prevText: "&#x3C;Forrige",
        nextText: "Næste&#x3E;",
        currentText: "Idag",
        monthNames: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
        dayNamesShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"],
        dayNamesMin: ["Sø", "Ma", "Ti", "On", "To", "Fr", "Lø"],
        weekHeader: "Uge",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.da), t.regional.da, t.regional.de = {
        closeText: "Schließen",
        prevText: "&#x3C;Zurück",
        nextText: "Vor&#x3E;",
        currentText: "Heute",
        monthNames: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        monthNamesShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        dayNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
        dayNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
        dayNamesMin: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
        weekHeader: "KW",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.de), t.regional.de, t.regional.el = {
        closeText: "Κλείσιμο",
        prevText: "Προηγούμενος",
        nextText: "Επόμενος",
        currentText: "Τρέχων Μήνας",
        monthNames: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
        monthNamesShort: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαι", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ"],
        dayNames: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
        dayNamesShort: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
        dayNamesMin: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σα"],
        weekHeader: "Εβδ",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.el), t.regional.el, t.regional["en-AU"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en-AU"]), t.regional["en-AU"], t.regional["en"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en"]), t.regional["en"], t.regional["en-NZ"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en-NZ"]), t.regional["en-NZ"], t.regional.eo = {
        closeText: "Fermi",
        prevText: "&#x3C;Anta",
        nextText: "Sekv&#x3E;",
        currentText: "Nuna",
        monthNames: ["Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Dimanĉo", "Lundo", "Mardo", "Merkredo", "Ĵaŭdo", "Vendredo", "Sabato"],
        dayNamesShort: ["Dim", "Lun", "Mar", "Mer", "Ĵaŭ", "Ven", "Sab"],
        dayNamesMin: ["Di", "Lu", "Ma", "Me", "Ĵa", "Ve", "Sa"],
        weekHeader: "Sb",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.eo), t.regional.eo, t.regional.es = {
        closeText: "Cerrar",
        prevText: "&#x3C;Ant",
        nextText: "Sig&#x3E;",
        currentText: "Hoy",
        monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
        monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
        dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
        dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
        dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.es), t.regional.es, t.regional.et = {
        closeText: "Sulge",
        prevText: "Eelnev",
        nextText: "Järgnev",
        currentText: "Täna",
        monthNames: ["Jaanuar", "Veebruar", "Märts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember"],
        monthNamesShort: ["Jaan", "Veebr", "Märts", "Apr", "Mai", "Juuni", "Juuli", "Aug", "Sept", "Okt", "Nov", "Dets"],
        dayNames: ["Pühapäev", "Esmaspäev", "Teisipäev", "Kolmapäev", "Neljapäev", "Reede", "Laupäev"],
        dayNamesShort: ["Pühap", "Esmasp", "Teisip", "Kolmap", "Neljap", "Reede", "Laup"],
        dayNamesMin: ["P", "E", "T", "K", "N", "R", "L"],
        weekHeader: "näd",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.et), t.regional.et, t.regional.eu = {
        closeText: "Egina",
        prevText: "&#x3C;Aur",
        nextText: "Hur&#x3E;",
        currentText: "Gaur",
        monthNames: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua"],
        monthNamesShort: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe."],
        dayNames: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
        dayNamesShort: ["ig.", "al.", "ar.", "az.", "og.", "ol.", "lr."],
        dayNamesMin: ["ig", "al", "ar", "az", "og", "ol", "lr"],
        weekHeader: "As",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.eu), t.regional.eu, t.regional.fa = {
        closeText: "بستن",
        prevText: "&#x3C;قبلی",
        nextText: "بعدی&#x3E;",
        currentText: "امروز",
        monthNames: ["فروردين", "ارديبهشت", "خرداد", "تير", "مرداد", "شهريور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["يکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
        dayNamesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
        dayNamesMin: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
        weekHeader: "هف",
        dateFormat: "yy/mm/dd",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fa), t.regional.fa, t.regional.fi = {
        closeText: "Sulje",
        prevText: "&#xAB;Edellinen",
        nextText: "Seuraava&#xBB;",
        currentText: "Tänään",
        monthNames: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
        monthNamesShort: ["Tammi", "Helmi", "Maalis", "Huhti", "Touko", "Kesä", "Heinä", "Elo", "Syys", "Loka", "Marras", "Joulu"],
        dayNamesShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
        dayNames: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"],
        dayNamesMin: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
        weekHeader: "Vk",
        dateFormat: "d.m.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fi), t.regional.fi, t.regional.fo = {
        closeText: "Lat aftur",
        prevText: "&#x3C;Fyrra",
        nextText: "Næsta&#x3E;",
        currentText: "Í dag",
        monthNames: ["Januar", "Februar", "Mars", "Apríl", "Mei", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        dayNames: ["Sunnudagur", "Mánadagur", "Týsdagur", "Mikudagur", "Hósdagur", "Fríggjadagur", "Leyardagur"],
        dayNamesShort: ["Sun", "Mán", "Týs", "Mik", "Hós", "Frí", "Ley"],
        dayNamesMin: ["Su", "Má", "Tý", "Mi", "Hó", "Fr", "Le"],
        weekHeader: "Vk",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fo), t.regional.fo, t.regional["fr-CA"] = {
        closeText: "Fermer",
        prevText: "Précédent",
        nextText: "Suivant",
        currentText: "Aujourd'hui",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sem.",
        dateFormat: "yy-mm-dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["fr-CA"]), t.regional["fr-CA"], t.regional["fr-CH"] = {
        closeText: "Fermer",
        prevText: "&#x3C;Préc",
        nextText: "Suiv&#x3E;",
        currentText: "Courant",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["fr-CH"]), t.regional["fr-CH"], t.regional.fr = {
        closeText: "Fermer",
        prevText: "Précédent",
        nextText: "Suivant",
        currentText: "Aujourd'hui",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sem.",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fr), t.regional.fr, t.regional.gl = {
        closeText: "Pechar",
        prevText: "&#x3C;Ant",
        nextText: "Seg&#x3E;",
        currentText: "Hoxe",
        monthNames: ["Xaneiro", "Febreiro", "Marzo", "Abril", "Maio", "Xuño", "Xullo", "Agosto", "Setembro", "Outubro", "Novembro", "Decembro"],
        monthNamesShort: ["Xan", "Feb", "Mar", "Abr", "Mai", "Xuñ", "Xul", "Ago", "Set", "Out", "Nov", "Dec"],
        dayNames: ["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mér", "Xov", "Ven", "Sáb"],
        dayNamesMin: ["Do", "Lu", "Ma", "Mé", "Xo", "Ve", "Sá"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.gl), t.regional.gl, t.regional.he = {
        closeText: "סגור",
        prevText: "&#x3C;הקודם",
        nextText: "הבא&#x3E;",
        currentText: "היום",
        monthNames: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
        monthNamesShort: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יוני", "יולי", "אוג", "ספט", "אוק", "נוב", "דצמ"],
        dayNames: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"],
        dayNamesShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"],
        dayNamesMin: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.he), t.regional.he, t.regional.hi = {
        closeText: "बंद",
        prevText: "पिछला",
        nextText: "अगला",
        currentText: "आज",
        monthNames: ["जनवरी ", "फरवरी", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अगस्त ", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसम्बर"],
        monthNamesShort: ["जन", "फर", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अग", "सित", "अक्ट", "नव", "दि"],
        dayNames: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
        dayNamesShort: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"],
        dayNamesMin: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"],
        weekHeader: "हफ्ता",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hi), t.regional.hi, t.regional.hr = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"],
        monthNamesShort: ["Sij", "Velj", "Ožu", "Tra", "Svi", "Lip", "Srp", "Kol", "Ruj", "Lis", "Stu", "Pro"],
        dayNames: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Tje",
        dateFormat: "dd.mm.yy.",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hr), t.regional.hr, t.regional.hu = {
        closeText: "bezár",
        prevText: "vissza",
        nextText: "előre",
        currentText: "ma",
        monthNames: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
        dayNames: ["Vasárnap", "Hétfő", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
        dayNamesShort: ["Vas", "Hét", "Ked", "Sze", "Csü", "Pén", "Szo"],
        dayNamesMin: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
        weekHeader: "Hét",
        dateFormat: "yy.mm.dd.",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hu), t.regional.hu, t.regional.hy = {
        closeText: "Փակել",
        prevText: "&#x3C;Նախ.",
        nextText: "Հաջ.&#x3E;",
        currentText: "Այսօր",
        monthNames: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր"],
        monthNamesShort: ["Հունվ", "Փետր", "Մարտ", "Ապր", "Մայիս", "Հունիս", "Հուլ", "Օգս", "Սեպ", "Հոկ", "Նոյ", "Դեկ"],
        dayNames: ["կիրակի", "եկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"],
        dayNamesShort: ["կիր", "երկ", "երք", "չրք", "հնգ", "ուրբ", "շբթ"],
        dayNamesMin: ["կիր", "երկ", "երք", "չրք", "հնգ", "ուրբ", "շբթ"],
        weekHeader: "ՇԲՏ",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hy), t.regional.hy, t.regional.id = {
        closeText: "Tutup",
        prevText: "&#x3C;mundur",
        nextText: "maju&#x3E;",
        currentText: "hari ini",
        monthNames: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agus", "Sep", "Okt", "Nop", "Des"],
        dayNames: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
        dayNamesShort: ["Min", "Sen", "Sel", "Rab", "kam", "Jum", "Sab"],
        dayNamesMin: ["Mg", "Sn", "Sl", "Rb", "Km", "jm", "Sb"],
        weekHeader: "Mg",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.id), t.regional.id, t.regional.is = {
        closeText: "Loka",
        prevText: "&#x3C; Fyrri",
        nextText: "Næsti &#x3E;",
        currentText: "Í dag",
        monthNames: ["Janúar", "Febrúar", "Mars", "Apríl", "Maí", "Júní", "Júlí", "Ágúst", "September", "Október", "Nóvember", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maí", "Jún", "Júl", "Ágú", "Sep", "Okt", "Nóv", "Des"],
        dayNames: ["Sunnudagur", "Mánudagur", "Þriðjudagur", "Miðvikudagur", "Fimmtudagur", "Föstudagur", "Laugardagur"],
        dayNamesShort: ["Sun", "Mán", "Þri", "Mið", "Fim", "Fös", "Lau"],
        dayNamesMin: ["Su", "Má", "Þr", "Mi", "Fi", "Fö", "La"],
        weekHeader: "Vika",
        dateFormat: "dd.mm.yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.is),t.regional.is,t.regional["it-CH"] = {
        closeText: "Chiudi",
        prevText: "&#x3C;Prec",
        nextText: "Succ&#x3E;",
        currentText: "Oggi",
        monthNames: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        monthNamesShort: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        dayNames: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
        dayNamesMin: ["Do", "Lu", "Ma", "Me", "Gi", "Ve", "Sa"],
        weekHeader: "Sm",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["it-CH"]),t.regional["it-CH"],t.regional.it = {
        closeText: "Chiudi",
        prevText: "&#x3C;Prec",
        nextText: "Succ&#x3E;",
        currentText: "Oggi",
        monthNames: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        monthNamesShort: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        dayNames: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
        dayNamesMin: ["Do", "Lu", "Ma", "Me", "Gi", "Ve", "Sa"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.it),t.regional.it,t.regional.ja = {
        closeText: "閉じる",
        prevText: "&#x3C;前",
        nextText: "次&#x3E;",
        currentText: "今日",
        monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        dayNames: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
        dayNamesShort: ["日", "月", "火", "水", "木", "金", "土"],
        dayNamesMin: ["日", "月", "火", "水", "木", "金", "土"],
        weekHeader: "週",
        dateFormat: "yy/mm/dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: "年"
    },t.setDefaults(t.regional.ja),t.regional.ja,t.regional.ka = {
        closeText: "დახურვა",
        prevText: "&#x3c; წინა",
        nextText: "შემდეგი &#x3e;",
        currentText: "დღეს",
        monthNames: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"],
        monthNamesShort: ["იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ"],
        dayNames: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
        dayNamesShort: ["კვ", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
        dayNamesMin: ["კვ", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
        weekHeader: "კვირა",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ka),t.regional.ka,t.regional.kk = {
        closeText: "Жабу",
        prevText: "&#x3C;Алдыңғы",
        nextText: "Келесі&#x3E;",
        currentText: "Бүгін",
        monthNames: ["Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан"],
        monthNamesShort: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел"],
        dayNames: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
        dayNamesShort: ["жкс", "дсн", "ссн", "срс", "бсн", "жма", "снб"],
        dayNamesMin: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
        weekHeader: "Не",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.kk),t.regional.kk,t.regional.km = {
        closeText: "ធ្វើ​រួច",
        prevText: "មុន",
        nextText: "បន្ទាប់",
        currentText: "ថ្ងៃ​នេះ",
        monthNames: ["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"],
        monthNamesShort: ["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"],
        dayNames: ["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"],
        dayNamesShort: ["អា", "ច", "អ", "ពុ", "ព្រហ", "សុ", "សៅ"],
        dayNamesMin: ["អា", "ច", "អ", "ពុ", "ព្រហ", "សុ", "សៅ"],
        weekHeader: "សប្ដាហ៍",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.km),t.regional.km,t.regional.ko = {
        closeText: "닫기",
        prevText: "이전달",
        nextText: "다음달",
        currentText: "오늘",
        monthNames: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
        monthNamesShort: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
        dayNames: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
        dayNamesShort: ["일", "월", "화", "수", "목", "금", "토"],
        dayNamesMin: ["일", "월", "화", "수", "목", "금", "토"],
        weekHeader: "Wk",
        dateFormat: "yy-mm-dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: "년"
    },t.setDefaults(t.regional.ko),t.regional.ko,t.regional.ky = {
        closeText: "Жабуу",
        prevText: "&#x3c;Мур",
        nextText: "Кий&#x3e;",
        currentText: "Бүгүн",
        monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"],
        dayNamesShort: ["жек", "дүй", "шей", "шар", "бей", "жум", "ише"],
        dayNamesMin: ["Жк", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
        weekHeader: "Жум",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ky),t.regional.ky,t.regional.lb = {
        closeText: "Fäerdeg",
        prevText: "Zréck",
        nextText: "Weider",
        currentText: "Haut",
        monthNames: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        monthNamesShort: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        dayNames: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
        dayNamesShort: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
        dayNamesMin: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"],
        weekHeader: "W",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.lb),t.regional.lb,t.regional.lt = {
        closeText: "Uždaryti",
        prevText: "&#x3C;Atgal",
        nextText: "Pirmyn&#x3E;",
        currentText: "Šiandien",
        monthNames: ["Sausis", "Vasaris", "Kovas", "Balandis", "Gegužė", "Birželis", "Liepa", "Rugpjūtis", "Rugsėjis", "Spalis", "Lapkritis", "Gruodis"],
        monthNamesShort: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rugp", "Rugs", "Spa", "Lap", "Gru"],
        dayNames: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
        dayNamesShort: ["sek", "pir", "ant", "tre", "ket", "pen", "šeš"],
        dayNamesMin: ["Se", "Pr", "An", "Tr", "Ke", "Pe", "Še"],
        weekHeader: "SAV",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: ""
    },t.setDefaults(t.regional.lt),t.regional.lt,t.regional.lv = {
        closeText: "Aizvērt",
        prevText: "Iepr.",
        nextText: "Nāk.",
        currentText: "Šodien",
        monthNames: ["Janvāris", "Februāris", "Marts", "Aprīlis", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jūn", "Jūl", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
        dayNamesShort: ["svt", "prm", "otr", "tre", "ctr", "pkt", "sst"],
        dayNamesMin: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "Ss"],
        weekHeader: "Ned.",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.lv),t.regional.lv,t.regional.mk = {
        closeText: "Затвори",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Денес",
        monthNames: ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"],
        monthNamesShort: ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"],
        dayNames: ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"],
        dayNamesShort: ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"],
        dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Са"],
        weekHeader: "Сед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.mk),t.regional.mk,t.regional.ml = {
        closeText: "ശരി",
        prevText: "മുന്നത്തെ",
        nextText: "അടുത്തത് ",
        currentText: "ഇന്ന്",
        monthNames: ["ജനുവരി", "ഫെബ്രുവരി", "മാര്‍ച്ച്", "ഏപ്രില്‍", "മേയ്", "ജൂണ്‍", "ജൂലൈ", "ആഗസ്റ്റ്", "സെപ്റ്റംബര്‍", "ഒക്ടോബര്‍", "നവംബര്‍", "ഡിസംബര്‍"],
        monthNamesShort: ["ജനു", "ഫെബ്", "മാര്‍", "ഏപ്രി", "മേയ്", "ജൂണ്‍", "ജൂലാ", "ആഗ", "സെപ്", "ഒക്ടോ", "നവം", "ഡിസ"],
        dayNames: ["ഞായര്‍", "തിങ്കള്‍", "ചൊവ്വ", "ബുധന്‍", "വ്യാഴം", "വെള്ളി", "ശനി"],
        dayNamesShort: ["ഞായ", "തിങ്ക", "ചൊവ്വ", "ബുധ", "വ്യാഴം", "വെള്ളി", "ശനി"],
        dayNamesMin: ["ഞാ", "തി", "ചൊ", "ബു", "വ്യാ", "വെ", "ശ"],
        weekHeader: "ആ",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ml),t.regional.ml,t.regional.ms = {
        closeText: "Tutup",
        prevText: "&#x3C;Sebelum",
        nextText: "Selepas&#x3E;",
        currentText: "hari ini",
        monthNames: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"],
        monthNamesShort: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"],
        dayNames: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
        dayNamesShort: ["Aha", "Isn", "Sel", "Rab", "kha", "Jum", "Sab"],
        dayNamesMin: ["Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"],
        weekHeader: "Mg",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ms),t.regional.ms,t.regional.nb = {
        closeText: "Lukk",
        prevText: "&#xAB;Forrige",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
        dayNames: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
        dayNamesMin: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
        weekHeader: "Uke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nb),t.regional.nb,t.regional["nl-BE"] = {
        closeText: "Sluiten",
        prevText: "←",
        nextText: "→",
        currentText: "Vandaag",
        monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
        monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
        dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
        dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
        dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["nl-BE"]),t.regional["nl-BE"],t.regional.nl = {
        closeText: "Sluiten",
        prevText: "←",
        nextText: "→",
        currentText: "Vandaag",
        monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
        monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
        dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
        dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
        dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"],
        weekHeader: "Wk",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nl),t.regional.nl,t.regional.nn = {
        closeText: "Lukk",
        prevText: "&#xAB;Førre",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["sun", "mån", "tys", "ons", "tor", "fre", "lau"],
        dayNames: ["sundag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
        dayNamesMin: ["su", "må", "ty", "on", "to", "fr", "la"],
        weekHeader: "Veke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nn),t.regional.nn,t.regional.no = {
        closeText: "Lukk",
        prevText: "&#xAB;Forrige",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
        dayNames: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
        dayNamesMin: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
        weekHeader: "Uke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.no),t.regional.no,t.regional.pl = {
        closeText: "Zamknij",
        prevText: "&#x3C;Poprzedni",
        nextText: "Następny&#x3E;",
        currentText: "Dziś",
        monthNames: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
        monthNamesShort: ["Sty", "Lu", "Mar", "Kw", "Maj", "Cze", "Lip", "Sie", "Wrz", "Pa", "Lis", "Gru"],
        dayNames: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
        dayNamesShort: ["Nie", "Pn", "Wt", "Śr", "Czw", "Pt", "So"],
        dayNamesMin: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
        weekHeader: "Tydz",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.pl),t.regional.pl,t.regional["pt-BR"] = {
        closeText: "Fechar",
        prevText: "&#x3C;Anterior",
        nextText: "Próximo&#x3E;",
        currentText: "Hoje",
        monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
        dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["pt-BR"]),t.regional["pt-BR"],t.regional.pt = {
        closeText: "Fechar",
        prevText: "Anterior",
        nextText: "Seguinte",
        currentText: "Hoje",
        monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
        dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        weekHeader: "Sem",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.pt),t.regional.pt,t.regional.rm = {
        closeText: "Serrar",
        prevText: "&#x3C;Suandant",
        nextText: "Precedent&#x3E;",
        currentText: "Actual",
        monthNames: ["Schaner", "Favrer", "Mars", "Avrigl", "Matg", "Zercladur", "Fanadur", "Avust", "Settember", "October", "November", "December"],
        monthNamesShort: ["Scha", "Fev", "Mar", "Avr", "Matg", "Zer", "Fan", "Avu", "Sett", "Oct", "Nov", "Dec"],
        dayNames: ["Dumengia", "Glindesdi", "Mardi", "Mesemna", "Gievgia", "Venderdi", "Sonda"],
        dayNamesShort: ["Dum", "Gli", "Mar", "Mes", "Gie", "Ven", "Som"],
        dayNamesMin: ["Du", "Gl", "Ma", "Me", "Gi", "Ve", "So"],
        weekHeader: "emna",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.rm),t.regional.rm,t.regional.ro = {
        closeText: "Închide",
        prevText: "&#xAB; Luna precedentă",
        nextText: "Luna următoare &#xBB;",
        currentText: "Azi",
        monthNames: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
        monthNamesShort: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"],
        dayNamesShort: ["Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm"],
        dayNamesMin: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"],
        weekHeader: "Săpt",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ro),t.regional.ro,t.regional.ru = {
        closeText: "Закрыть",
        prevText: "&#x3C;Пред",
        nextText: "След&#x3E;",
        currentText: "Сегодня",
        monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
        dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"],
        dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        weekHeader: "Нед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ru),t.regional.ru,t.regional.sk = {
        closeText: "Zavrieť",
        prevText: "&#x3C;Predchádzajúci",
        nextText: "Nasledujúci&#x3E;",
        currentText: "Dnes",
        monthNames: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Máj", "Jún", "Júl", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Str", "Štv", "Pia", "Sob"],
        dayNamesMin: ["Ne", "Po", "Ut", "St", "Št", "Pia", "So"],
        weekHeader: "Ty",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sk),t.regional.sk,t.regional.sl = {
        closeText: "Zapri",
        prevText: "&#x3C;Prejšnji",
        nextText: "Naslednji&#x3E;",
        currentText: "Trenutni",
        monthNames: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"],
        dayNamesShort: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"],
        dayNamesMin: ["Ne", "Po", "To", "Sr", "Če", "Pe", "So"],
        weekHeader: "Teden",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sl),t.regional.sl,t.regional.sq = {
        closeText: "mbylle",
        prevText: "&#x3C;mbrapa",
        nextText: "Përpara&#x3E;",
        currentText: "sot",
        monthNames: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "Nëntor", "Dhjetor"],
        monthNamesShort: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gus", "Sht", "Tet", "Nën", "Dhj"],
        dayNames: ["E Diel", "E Hënë", "E Martë", "E Mërkurë", "E Enjte", "E Premte", "E Shtune"],
        dayNamesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"],
        dayNamesMin: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"],
        weekHeader: "Ja",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sq),t.regional.sq,t.regional["sr-SR"] = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Sed",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["sr-SR"]),t.regional["sr-SR"],t.regional.sr = {
        closeText: "Затвори",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Данас",
        monthNames: ["Јануар", "Фебруар", "Март", "Април", "Мај", "Јун", "Јул", "Август", "Септембар", "Октобар", "Новембар", "Децембар"],
        monthNamesShort: ["Јан", "Феб", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Нов", "Дец"],
        dayNames: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"],
        dayNamesShort: ["Нед", "Пон", "Уто", "Сре", "Чет", "Пет", "Суб"],
        dayNamesMin: ["Не", "По", "Ут", "Ср", "Че", "Пе", "Су"],
        weekHeader: "Сед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sr),t.regional.sr,t.regional.sv = {
        closeText: "Stäng",
        prevText: "&#xAB;Förra",
        nextText: "Nästa&#xBB;",
        currentText: "Idag",
        monthNames: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNamesShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
        dayNames: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
        dayNamesMin: ["Sö", "Må", "Ti", "On", "To", "Fr", "Lö"],
        weekHeader: "Ve",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sv),t.regional.sv,t.regional.se = {
        closeText: "Stäng",
        prevText: "&#xAB;Förra",
        nextText: "Nästa&#xBB;",
        currentText: "Idag",
        monthNames: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNamesShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
        dayNames: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
        dayNamesMin: ["Sö", "Må", "Ti", "On", "To", "Fr", "Lö"],
        weekHeader: "Ve",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.se),t.regional.se,t.regional.ta = {
        closeText: "மூடு",
        prevText: "முன்னையது",
        nextText: "அடுத்தது",
        currentText: "இன்று",
        monthNames: ["தை", "மாசி", "பங்குனி", "சித்திரை", "வைகாசி", "ஆனி", "ஆடி", "ஆவணி", "புரட்டாசி", "ஐப்பசி", "கார்த்திகை", "மார்கழி"],
        monthNamesShort: ["தை", "மாசி", "பங்", "சித்", "வைகா", "ஆனி", "ஆடி", "ஆவ", "புர", "ஐப்", "கார்", "மார்"],
        dayNames: ["ஞாயிற்றுக்கிழமை", "திங்கட்கிழமை", "செவ்வாய்க்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
        dayNamesShort: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
        dayNamesMin: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"],
        weekHeader: "Не",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.ta),t.regional.ta,t.regional.th = {
        closeText: "ปิด",
        prevText: "&#xAB;&#xA0;ย้อน",
        nextText: "ถัดไป&#xA0;&#xBB;",
        currentText: "วันนี้",
        monthNames: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"],
        monthNamesShort: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."],
        dayNames: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
        dayNamesShort: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
        dayNamesMin: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.th),t.regional.th,t.regional.tj = {
        closeText: "Идома",
        prevText: "&#x3c;Қафо",
        nextText: "Пеш&#x3e;",
        currentText: "Имрӯз",
        monthNames: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["якшанбе", "душанбе", "сешанбе", "чоршанбе", "панҷшанбе", "ҷумъа", "шанбе"],
        dayNamesShort: ["якш", "душ", "сеш", "чор", "пан", "ҷум", "шан"],
        dayNamesMin: ["Як", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
        weekHeader: "Хф",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.tj),t.regional.tj,t.regional.tr = {
        closeText: "kapat",
        prevText: "&#x3C;geri",
        nextText: "ileri&#x3e",
        currentText: "bugün",
        monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
        monthNamesShort: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"],
        dayNames: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
        dayNamesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"],
        dayNamesMin: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"],
        weekHeader: "Hf",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.tr),t.regional.tr,t.regional.uk = {
        closeText: "Закрити",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Сьогодні",
        monthNames: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
        monthNamesShort: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
        dayNames: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п’ятниця", "субота"],
        dayNamesShort: ["нед", "пнд", "вів", "срд", "чтв", "птн", "сбт"],
        dayNamesMin: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        weekHeader: "Тиж",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.uk),t.regional.uk,t.regional.vi = {
        closeText: "Đóng",
        prevText: "&#x3C;Trước",
        nextText: "Tiếp&#x3E;",
        currentText: "Hôm nay",
        monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
        monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
        dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
        dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        weekHeader: "Tu",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.vi),t.regional.vi
});

},{}],7:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
	var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	/*!
	 * jQuery Form Plugin
	 * version: 3.45.0-2013.10.17
	 * Requires jQuery v1.5 or later
	 * Copyright (c) 2013 M. Alsup
	 * Examples and documentation at: http://malsup.com/jquery/form/
	 * Project repository: https://github.com/malsup/form
	 * Dual licensed under the MIT and GPL licenses.
	 * https://github.com/malsup/form#copyright-and-license
	 */
	/*global ActiveXObject */
	;(function($) {
	"use strict";

	/*
		Usage Note:
		-----------
		Do not use both ajaxSubmit and ajaxForm on the same form.  These
		functions are mutually exclusive.  Use ajaxSubmit if you want
		to bind your own submit handler to the form.  For example,

		$(document).ready(function() {
			$('#myForm').on('submit', function(e) {
				e.preventDefault(); // <-- important
				$(this).ajaxSubmit({
					target: '#output'
				});
			});
		});

		Use ajaxForm when you want the plugin to manage all the event binding
		for you.  For example,

		$(document).ready(function() {
			$('#myForm').ajaxForm({
				target: '#output'
			});
		});

		You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
		form does not have to exist when you invoke ajaxForm:

		$('#myForm').ajaxForm({
			delegation: true,
			target: '#output'
		});

		When using ajaxForm, the ajaxSubmit function will be invoked for you
		at the appropriate time.
	*/

	/**
	 * Feature detection
	 */
	var feature = {};
	feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
	feature.formdata = window.FormData !== undefined;

	var hasProp = !!$.fn.prop;

	// attr2 uses prop when it can but checks the return type for
	// an expected string.  this accounts for the case where a form 
	// contains inputs with names like "action" or "method"; in those
	// cases "prop" returns the element
	$.fn.attr2 = function() {
		if ( ! hasProp )
			return this.attr.apply(this, arguments);
		var val = this.prop.apply(this, arguments);
		if ( ( val && val.jquery ) || typeof val === 'string' )
			return val;
		return this.attr.apply(this, arguments);
	};

	/**
	 * ajaxSubmit() provides a mechanism for immediately submitting
	 * an HTML form using AJAX.
	 */
	$.fn.ajaxSubmit = function(options) {
		/*jshint scripturl:true */

		// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
		if (!this.length) {
			log('ajaxSubmit: skipping submit process - no element selected');
			return this;
		}

		var method, action, url, $form = this;

		if (typeof options == 'function') {
			options = { success: options };
		}
		else if ( options === undefined ) {
			options = {};
		}

		method = options.type || this.attr2('method');
		action = options.url  || this.attr2('action');

		url = (typeof action === 'string') ? $.trim(action) : '';
		url = url || window.location.href || '';
		if (url) {
			// clean url (don't include hash vaue)
			url = (url.match(/^([^#]+)/)||[])[1];
		}

		options = $.extend(true, {
			url:  url,
			success: $.ajaxSettings.success,
			type: method || $.ajaxSettings.type,
			iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
		}, options);

		// hook for manipulating the form data before it is extracted;
		// convenient for use with rich editors like tinyMCE or FCKEditor
		var veto = {};
		this.trigger('form-pre-serialize', [this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
			return this;
		}

		// provide opportunity to alter form data before it is serialized
		if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSerialize callback');
			return this;
		}

		var traditional = options.traditional;
		if ( traditional === undefined ) {
			traditional = $.ajaxSettings.traditional;
		}

		var elements = [];
		var qx, a = this.formToArray(options.semantic, elements);
		if (options.data) {
			options.extraData = options.data;
			qx = $.param(options.data, traditional);
		}

		// give pre-submit callback an opportunity to abort the submit
		if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSubmit callback');
			return this;
		}

		// fire vetoable 'validate' event
		this.trigger('form-submit-validate', [a, this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
			return this;
		}

		var q = $.param(a, traditional);
		if (qx) {
			q = ( q ? (q + '&' + qx) : qx );
		}
		if (options.type.toUpperCase() == 'GET') {
			options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
			options.data = null;  // data is null for 'get'
		}
		else {
			options.data = q; // data is the query string for 'post'
		}

		var callbacks = [];
		if (options.resetForm) {
			callbacks.push(function() { $form.resetForm(); });
		}
		if (options.clearForm) {
			callbacks.push(function() { $form.clearForm(options.includeHidden); });
		}

		// perform a load on the target only if dataType is not provided
		if (!options.dataType && options.target) {
			var oldSuccess = options.success || function(){};
			callbacks.push(function(data) {
				var fn = options.replaceTarget ? 'replaceWith' : 'html';
				$(options.target)[fn](data).each(oldSuccess, arguments);
			});
		}
		else if (options.success) {
			callbacks.push(options.success);
		}

		options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
			var context = options.context || this ;    // jQuery 1.4+ supports scope context
			for (var i=0, max=callbacks.length; i < max; i++) {
				callbacks[i].apply(context, [data, status, xhr || $form, $form]);
			}
		};

		if (options.error) {
			var oldError = options.error;
			options.error = function(xhr, status, error) {
				var context = options.context || this;
				oldError.apply(context, [xhr, status, error, $form]);
			};
		}

		 if (options.complete) {
			var oldComplete = options.complete;
			options.complete = function(xhr, status) {
				var context = options.context || this;
				oldComplete.apply(context, [xhr, status, $form]);
			};
		}

		// are there files to upload?

		// [value] (issue #113), also see comment:
		// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
		var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

		var hasFileInputs = fileInputs.length > 0;
		var mp = 'multipart/form-data';
		var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

		var fileAPI = feature.fileapi && feature.formdata;
		log("fileAPI :" + fileAPI);
		var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

		var jqxhr;

		// options.iframe allows user to force iframe mode
		// 06-NOV-09: now defaulting to iframe mode if file input is detected
		if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
			// hack to fix Safari hang (thanks to Tim Molendijk for this)
			// see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
			if (options.closeKeepAlive) {
				$.get(options.closeKeepAlive, function() {
					jqxhr = fileUploadIframe(a);
				});
			}
			else {
				jqxhr = fileUploadIframe(a);
			}
		}
		else if ((hasFileInputs || multipart) && fileAPI) {
			jqxhr = fileUploadXhr(a);
		}
		else {
			jqxhr = $.ajax(options);
		}

		$form.removeData('jqxhr').data('jqxhr', jqxhr);

		// clear element array
		for (var k=0; k < elements.length; k++)
			elements[k] = null;

		// fire 'notify' event
		this.trigger('form-submit-notify', [this, options]);
		return this;

		// utility fn for deep serialization
		function deepSerialize(extraData){
			var serialized = $.param(extraData, options.traditional).split('&');
			var len = serialized.length;
			var result = [];
			var i, part;
			for (i=0; i < len; i++) {
				// #252; undo param space replacement
				serialized[i] = serialized[i].replace(/\+/g,' ');
				part = serialized[i].split('=');
				// #278; use array instead of object storage, favoring array serializations
				result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
			}
			return result;
		}

		 // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
		function fileUploadXhr(a) {
			var formdata = new FormData();

			for (var i=0; i < a.length; i++) {
				formdata.append(a[i].name, a[i].value);
			}

			if (options.extraData) {
				var serializedData = deepSerialize(options.extraData);
				for (i=0; i < serializedData.length; i++)
					if (serializedData[i])
						formdata.append(serializedData[i][0], serializedData[i][1]);
			}

			options.data = null;

			var s = $.extend(true, {}, $.ajaxSettings, options, {
				contentType: false,
				processData: false,
				cache: false,
				type: method || 'POST'
			});

			if (options.uploadProgress) {
				// workaround because jqXHR does not expose upload property
				s.xhr = function() {
					var xhr = $.ajaxSettings.xhr();
					if (xhr.upload) {
						xhr.upload.addEventListener('progress', function(event) {
							var percent = 0;
							var position = event.loaded || event.position; /*event.position is deprecated*/
							var total = event.total;
							if (event.lengthComputable) {
								percent = Math.ceil(position / total * 100);
							}
							options.uploadProgress(event, position, total, percent);
						}, false);
					}
					return xhr;
				};
			}

			s.data = null;
			var beforeSend = s.beforeSend;
			s.beforeSend = function(xhr, o) {
				//Send FormData() provided by user
				if (options.formData)
					o.data = options.formData;
				else
					o.data = formdata;
				if(beforeSend)
					beforeSend.call(this, xhr, o);
			};
			return $.ajax(s);
		}

		// private function for handling file uploads (hat tip to YAHOO!)
		function fileUploadIframe(a) {
			var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
			var deferred = $.Deferred();

			// #341
			deferred.abort = function(status) {
				xhr.abort(status);
			};

			if (a) {
				// ensure that every serialized input is still enabled
				for (i=0; i < elements.length; i++) {
					el = $(elements[i]);
					if ( hasProp )
						el.prop('disabled', false);
					else
						el.removeAttr('disabled');
				}
			}

			s = $.extend(true, {}, $.ajaxSettings, options);
			s.context = s.context || s;
			id = 'jqFormIO' + (new Date().getTime());
			if (s.iframeTarget) {
				$io = $(s.iframeTarget);
				n = $io.attr2('name');
				if (!n)
					 $io.attr2('name', id);
				else
					id = n;
			}
			else {
				$io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
				$io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
			}
			io = $io[0];


			xhr = { // mock object
				aborted: 0,
				responseText: null,
				responseXML: null,
				status: 0,
				statusText: 'n/a',
				getAllResponseHeaders: function() {},
				getResponseHeader: function() {},
				setRequestHeader: function() {},
				abort: function(status) {
					var e = (status === 'timeout' ? 'timeout' : 'aborted');
					log('aborting upload... ' + e);
					this.aborted = 1;

					try { // #214, #257
						if (io.contentWindow.document.execCommand) {
							io.contentWindow.document.execCommand('Stop');
						}
					}
					catch(ignore) {}

					$io.attr('src', s.iframeSrc); // abort op in progress
					xhr.error = e;
					if (s.error)
						s.error.call(s.context, xhr, e, status);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, e]);
					if (s.complete)
						s.complete.call(s.context, xhr, e);
				}
			};

			g = s.global;
			// trigger ajax global events so that activity/block indicators work like normal
			if (g && 0 === $.active++) {
				$.event.trigger("ajaxStart");
			}
			if (g) {
				$.event.trigger("ajaxSend", [xhr, s]);
			}

			if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
				if (s.global) {
					$.active--;
				}
				deferred.reject();
				return deferred;
			}
			if (xhr.aborted) {
				deferred.reject();
				return deferred;
			}

			// add submitting element to data if we know it
			sub = form.clk;
			if (sub) {
				n = sub.name;
				if (n && !sub.disabled) {
					s.extraData = s.extraData || {};
					s.extraData[n] = sub.value;
					if (sub.type == "image") {
						s.extraData[n+'.x'] = form.clk_x;
						s.extraData[n+'.y'] = form.clk_y;
					}
				}
			}

			var CLIENT_TIMEOUT_ABORT = 1;
			var SERVER_ABORT = 2;
					
			function getDoc(frame) {
				/* it looks like contentWindow or contentDocument do not
				 * carry the protocol property in ie8, when running under ssl
				 * frame.document is the only valid response document, since
				 * the protocol is know but not on the other two objects. strange?
				 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
				 */
				
				var doc = null;
				
				// IE8 cascading access check
				try {
					if (frame.contentWindow) {
						doc = frame.contentWindow.document;
					}
				} catch(err) {
					// IE8 access denied under ssl & missing protocol
					log('cannot get iframe.contentWindow document: ' + err);
				}

				if (doc) { // successful getting content
					return doc;
				}

				try { // simply checking may throw in ie8 under ssl or mismatched protocol
					doc = frame.contentDocument ? frame.contentDocument : frame.document;
				} catch(err) {
					// last attempt
					log('cannot get iframe.contentDocument: ' + err);
					doc = frame.document;
				}
				return doc;
			}

			// Rails CSRF hack (thanks to Yvan Barthelemy)
			var csrf_token = $('meta[name=csrf-token]').attr('content');
			var csrf_param = $('meta[name=csrf-param]').attr('content');
			if (csrf_param && csrf_token) {
				s.extraData = s.extraData || {};
				s.extraData[csrf_param] = csrf_token;
			}

			// take a breath so that pending repaints get some cpu time before the upload starts
			function doSubmit() {
				// make sure form attrs are set
				var t = $form.attr2('target'), a = $form.attr2('action');

				// update form attrs in IE friendly way
				form.setAttribute('target',id);
				if (!method || /post/i.test(method) ) {
					form.setAttribute('method', 'POST');
				}
				if (a != s.url) {
					form.setAttribute('action', s.url);
				}

				// ie borks in some cases when setting encoding
				if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
					$form.attr({
						encoding: 'multipart/form-data',
						enctype:  'multipart/form-data'
					});
				}

				// support timout
				if (s.timeout) {
					timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
				}

				// look for server aborts
				function checkState() {
					try {
						var state = getDoc(io).readyState;
						log('state = ' + state);
						if (state && state.toLowerCase() == 'uninitialized')
							setTimeout(checkState,50);
					}
					catch(e) {
						log('Server abort: ' , e, ' (', e.name, ')');
						cb(SERVER_ABORT);
						if (timeoutHandle)
							clearTimeout(timeoutHandle);
						timeoutHandle = undefined;
					}
				}

				// add "extra" data to form if provided in options
				var extraInputs = [];
				try {
					if (s.extraData) {
						for (var n in s.extraData) {
							if (s.extraData.hasOwnProperty(n)) {
							   // if using the $.param format that allows for multiple values with the same name
							   if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
								   extraInputs.push(
								   $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
									   .appendTo(form)[0]);
							   } else {
								   extraInputs.push(
								   $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
									   .appendTo(form)[0]);
							   }
							}
						}
					}

					if (!s.iframeTarget) {
						// add iframe to doc and submit the form
						$io.appendTo('body');
					}
					if (io.attachEvent)
						io.attachEvent('onload', cb);
					else
						io.addEventListener('load', cb, false);
					setTimeout(checkState,15);

					try {
						form.submit();
					} catch(err) {
						// just in case form has element with name/id of 'submit'
						var submitFn = document.createElement('form').submit;
						submitFn.apply(form);
					}
				}
				finally {
					// reset attrs and remove "extra" input elements
					form.setAttribute('action',a);
					if(t) {
						form.setAttribute('target', t);
					} else {
						$form.removeAttr('target');
					}
					$(extraInputs).remove();
				}
			}

			if (s.forceSync) {
				doSubmit();
			}
			else {
				setTimeout(doSubmit, 10); // this lets dom updates render
			}

			var data, doc, domCheckCount = 50, callbackProcessed;

			function cb(e) {
				if (xhr.aborted || callbackProcessed) {
					return;
				}
				
				doc = getDoc(io);
				if(!doc) {
					log('cannot access response document');
					e = SERVER_ABORT;
				}
				if (e === CLIENT_TIMEOUT_ABORT && xhr) {
					xhr.abort('timeout');
					deferred.reject(xhr, 'timeout');
					return;
				}
				else if (e == SERVER_ABORT && xhr) {
					xhr.abort('server abort');
					deferred.reject(xhr, 'error', 'server abort');
					return;
				}

				if (!doc || doc.location.href == s.iframeSrc) {
					// response not received yet
					if (!timedOut)
						return;
				}
				if (io.detachEvent)
					io.detachEvent('onload', cb);
				else
					io.removeEventListener('load', cb, false);

				var status = 'success', errMsg;
				try {
					if (timedOut) {
						throw 'timeout';
					}

					var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
					log('isXml='+isXml);
					if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
						if (--domCheckCount) {
							// in some browsers (Opera) the iframe DOM is not always traversable when
							// the onload callback fires, so we loop a bit to accommodate
							log('requeing onLoad callback, DOM not available');
							setTimeout(cb, 250);
							return;
						}
						// let this fall through because server response could be an empty document
						//log('Could not access iframe DOM after mutiple tries.');
						//throw 'DOMException: not available';
					}

					//log('response detected');
					var docRoot = doc.body ? doc.body : doc.documentElement;
					xhr.responseText = docRoot ? docRoot.innerHTML : null;
					xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
					if (isXml)
						s.dataType = 'xml';
					xhr.getResponseHeader = function(header){
						var headers = {'content-type': s.dataType};
						return headers[header.toLowerCase()];
					};
					// support for XHR 'status' & 'statusText' emulation :
					if (docRoot) {
						xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
						xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
					}

					var dt = (s.dataType || '').toLowerCase();
					var scr = /(json|script|text)/.test(dt);
					if (scr || s.textarea) {
						// see if user embedded response in textarea
						var ta = doc.getElementsByTagName('textarea')[0];
						if (ta) {
							xhr.responseText = ta.value;
							// support for XHR 'status' & 'statusText' emulation :
							xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
							xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
						}
						else if (scr) {
							// account for browsers injecting pre around json response
							var pre = doc.getElementsByTagName('pre')[0];
							var b = doc.getElementsByTagName('body')[0];
							if (pre) {
								xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
							}
							else if (b) {
								xhr.responseText = b.textContent ? b.textContent : b.innerText;
							}
						}
					}
					else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
						xhr.responseXML = toXml(xhr.responseText);
					}

					try {
						data = httpData(xhr, dt, s);
					}
					catch (err) {
						status = 'parsererror';
						xhr.error = errMsg = (err || status);
					}
				}
				catch (err) {
					log('error caught: ',err);
					status = 'error';
					xhr.error = errMsg = (err || status);
				}

				if (xhr.aborted) {
					log('upload aborted');
					status = null;
				}

				if (xhr.status) { // we've set xhr.status
					status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
				}

				// ordering of these callbacks/triggers is odd, but that's how $.ajax does it
				if (status === 'success') {
					if (s.success)
						s.success.call(s.context, data, 'success', xhr);
					deferred.resolve(xhr.responseText, 'success', xhr);
					if (g)
						$.event.trigger("ajaxSuccess", [xhr, s]);
				}
				else if (status) {
					if (errMsg === undefined)
						errMsg = xhr.statusText;
					if (s.error)
						s.error.call(s.context, xhr, status, errMsg);
					deferred.reject(xhr, 'error', errMsg);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, errMsg]);
				}

				if (g)
					$.event.trigger("ajaxComplete", [xhr, s]);

				if (g && ! --$.active) {
					$.event.trigger("ajaxStop");
				}

				if (s.complete)
					s.complete.call(s.context, xhr, status);

				callbackProcessed = true;
				if (s.timeout)
					clearTimeout(timeoutHandle);

				// clean up
				setTimeout(function() {
					if (!s.iframeTarget)
						$io.remove();
					else  //adding else to clean up existing iframe response.
						$io.attr('src', s.iframeSrc);
					xhr.responseXML = null;
				}, 100);
			}

			var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
				if (window.ActiveXObject) {
					doc = new ActiveXObject('Microsoft.XMLDOM');
					doc.async = 'false';
					doc.loadXML(s);
				}
				else {
					doc = (new DOMParser()).parseFromString(s, 'text/xml');
				}
				return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
			};
			var parseJSON = $.parseJSON || function(s) {
				/*jslint evil:true */
				return window['eval']('(' + s + ')');
			};

			var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

				var ct = xhr.getResponseHeader('content-type') || '',
					xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
					data = xml ? xhr.responseXML : xhr.responseText;

				if (xml && data.documentElement.nodeName === 'parsererror') {
					if ($.error)
						$.error('parsererror');
				}
				if (s && s.dataFilter) {
					data = s.dataFilter(data, type);
				}
				if (typeof data === 'string') {
					if (type === 'json' || !type && ct.indexOf('json') >= 0) {
						data = parseJSON(data);
					} else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
						$.globalEval(data);
					}
				}
				return data;
			};

			return deferred;
		}
	};

	/**
	 * ajaxForm() provides a mechanism for fully automating form submission.
	 *
	 * The advantages of using this method instead of ajaxSubmit() are:
	 *
	 * 1: This method will include coordinates for <input type="image" /> elements (if the element
	 *    is used to submit the form).
	 * 2. This method will include the submit element's name/value data (for the element that was
	 *    used to submit the form).
	 * 3. This method binds the submit() method to the form for you.
	 *
	 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
	 * passes the options argument along after properly binding events for submit elements and
	 * the form itself.
	 */
	$.fn.ajaxForm = function(options) {
		options = options || {};
		options.delegation = options.delegation && $.isFunction($.fn.on);

		// in jQuery 1.3+ we can fix mistakes with the ready state
		if (!options.delegation && this.length === 0) {
			var o = { s: this.selector, c: this.context };
			if (!$.isReady && o.s) {
				log('DOM not ready, queuing ajaxForm');
				$(function() {
					$(o.s,o.c).ajaxForm(options);
				});
				return this;
			}
			// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
			log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
			return this;
		}

		if ( options.delegation ) {
			$(document)
				.off('submit.form-plugin', this.selector, doAjaxSubmit)
				.off('click.form-plugin', this.selector, captureSubmittingElement)
				.on('submit.form-plugin', this.selector, options, doAjaxSubmit)
				.on('click.form-plugin', this.selector, options, captureSubmittingElement);
			return this;
		}

		return this.ajaxFormUnbind()
			.bind('submit.form-plugin', options, doAjaxSubmit)
			.bind('click.form-plugin', options, captureSubmittingElement);
	};

	// private event handlers
	function doAjaxSubmit(e) {
		/*jshint validthis:true */
		var options = e.data;
		if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
			e.preventDefault();
			$(e.target).ajaxSubmit(options); // #365
		}
	}

	function captureSubmittingElement(e) {
		/*jshint validthis:true */
		var target = e.target;
		var $el = $(target);
		if (!($el.is("[type=submit],[type=image]"))) {
			// is this a child element of the submit el?  (ex: a span within a button)
			var t = $el.closest('[type=submit]');
			if (t.length === 0) {
				return;
			}
			target = t[0];
		}
		var form = this;
		form.clk = target;
		if (target.type == 'image') {
			if (e.offsetX !== undefined) {
				form.clk_x = e.offsetX;
				form.clk_y = e.offsetY;
			} else if (typeof $.fn.offset == 'function') {
				var offset = $el.offset();
				form.clk_x = e.pageX - offset.left;
				form.clk_y = e.pageY - offset.top;
			} else {
				form.clk_x = e.pageX - target.offsetLeft;
				form.clk_y = e.pageY - target.offsetTop;
			}
		}
		// clear form vars
		setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
	}


	// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
	$.fn.ajaxFormUnbind = function() {
		return this.unbind('submit.form-plugin click.form-plugin');
	};

	/**
	 * formToArray() gathers form element data into an array of objects that can
	 * be passed to any of the following ajax functions: $.get, $.post, or load.
	 * Each object in the array has both a 'name' and 'value' property.  An example of
	 * an array for a simple login form might be:
	 *
	 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
	 *
	 * It is this array that is passed to pre-submit callback functions provided to the
	 * ajaxSubmit() and ajaxForm() methods.
	 */
	$.fn.formToArray = function(semantic, elements) {
		var a = [];
		if (this.length === 0) {
			return a;
		}

		var form = this[0];
		var els = semantic ? form.getElementsByTagName('*') : form.elements;
		if (!els) {
			return a;
		}

		var i,j,n,v,el,max,jmax;
		for(i=0, max=els.length; i < max; i++) {
			el = els[i];
			n = el.name;
			if (!n || el.disabled) {
				continue;
			}

			if (semantic && form.clk && el.type == "image") {
				// handle image inputs on the fly when semantic == true
				if(form.clk == el) {
					a.push({name: n, value: $(el).val(), type: el.type });
					a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
				}
				continue;
			}

			v = $.fieldValue(el, true);
			if (v && v.constructor == Array) {
				if (elements)
					elements.push(el);
				for(j=0, jmax=v.length; j < jmax; j++) {
					a.push({name: n, value: v[j]});
				}
			}
			else if (feature.fileapi && el.type == 'file') {
				if (elements)
					elements.push(el);
				var files = el.files;
				if (files.length) {
					for (j=0; j < files.length; j++) {
						a.push({name: n, value: files[j], type: el.type});
					}
				}
				else {
					// #180
					a.push({ name: n, value: '', type: el.type });
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				if (elements)
					elements.push(el);
				a.push({name: n, value: v, type: el.type, required: el.required});
			}
		}

		if (!semantic && form.clk) {
			// input type=='image' are not found in elements array! handle it here
			var $input = $(form.clk), input = $input[0];
			n = input.name;
			if (n && !input.disabled && input.type == 'image') {
				a.push({name: n, value: $input.val()});
				a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
			}
		}
		return a;
	};

	/**
	 * Serializes form data into a 'submittable' string. This method will return a string
	 * in the format: name1=value1&amp;name2=value2
	 */
	$.fn.formSerialize = function(semantic) {
		//hand off to jQuery.param for proper encoding
		return $.param(this.formToArray(semantic));
	};

	/**
	 * Serializes all field elements in the jQuery object into a query string.
	 * This method will return a string in the format: name1=value1&amp;name2=value2
	 */
	$.fn.fieldSerialize = function(successful) {
		var a = [];
		this.each(function() {
			var n = this.name;
			if (!n) {
				return;
			}
			var v = $.fieldValue(this, successful);
			if (v && v.constructor == Array) {
				for (var i=0,max=v.length; i < max; i++) {
					a.push({name: n, value: v[i]});
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				a.push({name: this.name, value: v});
			}
		});
		//hand off to jQuery.param for proper encoding
		return $.param(a);
	};

	/**
	 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
	 *
	 *  <form><fieldset>
	 *      <input name="A" type="text" />
	 *      <input name="A" type="text" />
	 *      <input name="B" type="checkbox" value="B1" />
	 *      <input name="B" type="checkbox" value="B2"/>
	 *      <input name="C" type="radio" value="C1" />
	 *      <input name="C" type="radio" value="C2" />
	 *  </fieldset></form>
	 *
	 *  var v = $('input[type=text]').fieldValue();
	 *  // if no values are entered into the text inputs
	 *  v == ['','']
	 *  // if values entered into the text inputs are 'foo' and 'bar'
	 *  v == ['foo','bar']
	 *
	 *  var v = $('input[type=checkbox]').fieldValue();
	 *  // if neither checkbox is checked
	 *  v === undefined
	 *  // if both checkboxes are checked
	 *  v == ['B1', 'B2']
	 *
	 *  var v = $('input[type=radio]').fieldValue();
	 *  // if neither radio is checked
	 *  v === undefined
	 *  // if first radio is checked
	 *  v == ['C1']
	 *
	 * The successful argument controls whether or not the field element must be 'successful'
	 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
	 * The default value of the successful argument is true.  If this value is false the value(s)
	 * for each element is returned.
	 *
	 * Note: This method *always* returns an array.  If no valid value can be determined the
	 *    array will be empty, otherwise it will contain one or more values.
	 */
	$.fn.fieldValue = function(successful) {
		for (var val=[], i=0, max=this.length; i < max; i++) {
			var el = this[i];
			var v = $.fieldValue(el, successful);
			if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
				continue;
			}
			if (v.constructor == Array)
				$.merge(val, v);
			else
				val.push(v);
		}
		return val;
	};

	/**
	 * Returns the value of the field element.
	 */
	$.fieldValue = function(el, successful) {
		var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
		if (successful === undefined) {
			successful = true;
		}

		if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
			(t == 'checkbox' || t == 'radio') && !el.checked ||
			(t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
			tag == 'select' && el.selectedIndex == -1)) {
				return null;
		}

		if (tag == 'select') {
			var index = el.selectedIndex;
			if (index < 0) {
				return null;
			}
			var a = [], ops = el.options;
			var one = (t == 'select-one');
			var max = (one ? index+1 : ops.length);
			for(var i=(one ? index : 0); i < max; i++) {
				var op = ops[i];
				if (op.selected) {
					var v = op.value;
					if (!v) { // extra pain for IE...
						v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
					}
					if (one) {
						return v;
					}
					a.push(v);
				}
			}
			return a;
		}
		return $(el).val();
	};

	/**
	 * Clears the form data.  Takes the following actions on the form's input fields:
	 *  - input text fields will have their 'value' property set to the empty string
	 *  - select elements will have their 'selectedIndex' property set to -1
	 *  - checkbox and radio inputs will have their 'checked' property set to false
	 *  - inputs of type submit, button, reset, and hidden will *not* be effected
	 *  - button elements will *not* be effected
	 */
	$.fn.clearForm = function(includeHidden) {
		return this.each(function() {
			$('input,select,textarea', this).clearFields(includeHidden);
		});
	};

	/**
	 * Clears the selected form elements.
	 */
	$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
		var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
		return this.each(function() {
			var t = this.type, tag = this.tagName.toLowerCase();
			if (re.test(t) || tag == 'textarea') {
				this.value = '';
			}
			else if (t == 'checkbox' || t == 'radio') {
				this.checked = false;
			}
			else if (tag == 'select') {
				this.selectedIndex = -1;
			}
			else if (t == "file") {
				if (/MSIE/.test(navigator.userAgent)) {
					$(this).replaceWith($(this).clone(true));
				} else {
					$(this).val('');
				}
			}
			else if (includeHidden) {
				// includeHidden can be the value true, or it can be a selector string
				// indicating a special test; for example:
				//  $('#myForm').clearForm('.special:hidden')
				// the above would clean hidden inputs that have the class of 'special'
				if ( (includeHidden === true && /hidden/.test(t)) ||
					 (typeof includeHidden == 'string' && $(this).is(includeHidden)) )
					this.value = '';
			}
		});
	};

	/**
	 * Resets the form data.  Causes all form elements to be reset to their original value.
	 */
	$.fn.resetForm = function() {
		return this.each(function() {
			// guard against an input with the name of 'reset'
			// note that IE reports the reset function as an 'object'
			if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
				this.reset();
			}
		});
	};

	/**
	 * Enables or disables any matching elements.
	 */
	$.fn.enable = function(b) {
		if (b === undefined) {
			b = true;
		}
		return this.each(function() {
			this.disabled = !b;
		});
	};

	/**
	 * Checks/unchecks any matching checkboxes or radio buttons and
	 * selects/deselects and matching option elements.
	 */
	$.fn.selected = function(select) {
		if (select === undefined) {
			select = true;
		}
		return this.each(function() {
			var t = this.type;
			if (t == 'checkbox' || t == 'radio') {
				this.checked = select;
			}
			else if (this.tagName.toLowerCase() == 'option') {
				var $sel = $(this).parent('select');
				if (select && $sel[0] && $sel[0].type == 'select-one') {
					// deselect all other options
					$sel.find('option').selected(false);
				}
				this.selected = select;
			}
		});
	};

	// expose debug var
	$.fn.ajaxSubmit.debug = false;

	// helper fn for console logging
	function log() {
		if (!$.fn.ajaxSubmit.debug)
			return;
		var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
		if (window.console && window.console.log) {
			window.console.log(msg);
		}
		else if (window.opera && window.opera.postError) {
			window.opera.postError(msg);
		}
	}

	})( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],8:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

	$.fn.autocompleteEmail = function (options) {
		var me = this,
		$input = $(this);
		var selector = $input['selector'];
		var defaults = {
			resultsClass : "mailInstant",
			resultsid : "resultsEmail",
			overClass : "over",
			minChars : 1,
			zIndex : 1000000003,
			width : 2,
			delay : 50,
			esc : false,
			data : []};
		var options = $.extend(defaults, options);
		var timeout = null;
		var active = -1;
		var hasFocus = false;
		var prev = "";
		var emailList = pageData.emailList || '';
		var lastKeyPressCode = null;
		var _url = webData.WEB_ROOT + 'ajax.php?act=get_email_domains&language=' + webData.lang;
		this.init = function () {
			var results = document.createElement("div");
			var $results = $(results);
			$results.css("z-index", options.zIndex);
			$results.attr("id", options.resultsid);
			$results.hide().addClass(options.resultsClass).css("position", "absolute");
			if (!$('#' + options.resultsid)[0])
				$("body").prepend(results)
		};
		$(document).ready(function () {
			if (emailList == '') {
				$.ajax({
					type : 'post',
					url : _url,
					success : function (data) {
						data = eval('[' + data + ']')[0];
						if (data != '') {
							emailList = data;
							pageData.emailList = data;
						}
					}
				})
			}
		});
		function hidePP(e) {
			var unicode = e.keyCode ? e.keyCode : e.charCode;
			if (unicode == 27) {
				$('#' + options.resultsid).hide();
				options.esc = true;
				$(document).unbind('keydown', hidePP)
			}
		};
		$(document).keydown(hidePP);
		this.showResult = function () {
			if (!$input.val())
				return;
			me.requestData()
		};
		this.showHtml = function (data, _len, _val, __val, ul) {
			for (var i = 0; i < data.length; i++) {
				var li = document.createElement("li");
				li.innerHTML = '<span>' + __val + '</span>@' + data[i];
				ul.appendChild(li);
				if (_len != -1 && data[i].indexOf(_val) != 0) {
					$(li).remove()
				} else {
					$(li).show()
				}
			}
			$('li', ul).each(function (n) {
				if (n > 11) {
					$(this).remove()
				} else if (n > 0 && $(this).text() == $input.val()) {
					$(this).remove()
				} else {
					$(this).hover(function () {
						$(this).addClass(options.overClass);
						active = n
					}, function () {
						$(this).removeClass(options.overClass)
					}).click(function (e) {
						me.selectItem(this);
						e.preventDefault();
						e.stopPropagation()
					})
				}
				$(this).attr({
					title : $(this).text(),
					alt : $(this).text()
				})
			});
			if(selector == "#your_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : 1.5*$input.width() + options.width + 22
				}).html(ul).show()
			}else if(selector == "#newuser_register_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : $input.width() + options.width + 22,
					position:'fixed'
				}).html(ul).show()
			}else if(selector == "#newuser_popup_register_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : $input.width() + options.width + 22,
					position:'fixed'
				}).html(ul).show()
			}else{
				$("#" + options.resultsid).css({
					top: ($input.offset().top + $input.outerHeight() - 1) + "px",
					left: $input.offset().left + "px",
					width: $input.width() + options.width
				}).html(ul).show()
			}
		};
		this.requestData = function () {
			var ul = document.createElement("ul");
			var _title = document.createElement("h4");
			_title.setAttribute("style","white-space:nowrap;overflow:hidden;width:100%;");
			$(_title).html(_lang.page_login_select_email_type);
			ul.appendChild(_title);
			var _val = $input.val(),
			__val = $input.val();
			var _len = _val.indexOf('@');
			if (_len != -1) {
				_val = _val.substring(_len + 1, _val.length);
				__val = $input.val().substring(0, _len)
			}
			if (emailList == '') {
				$.ajax({
					type : 'post',
					url : _url,
					data : '',
					complete : function () {},
					success : function (data) {
						data = eval('[' + data + ']')[0];
						if (data != '') {
							me.showHtml(data, _len, _val, __val, ul);
							emailList = data
						}
					},
					error : function () {}

				})
			} else {
				me.showHtml(emailList, _len, _val, __val, ul)
			}
		};
		this.selectItem = function (li) {
			var v = $.trim($(li).text());
			$input.val(v);
			me.hideResultsNow()
		};
		this.hideResultsNow = function () {
			if (timeout)
				clearTimeout(timeout);
			timeout = setTimeout(function () {
					if ($("#" + options.resultsid).is(":visible")) {
						$("#" + options.resultsid).hide()
					}
				}, 200)
		};
		this.onChange = function () {
			if ((lastKeyPressCode >= 33 && lastKeyPressCode <= 45) || lastKeyPressCode == 144 || lastKeyPressCode == 145 || lastKeyPressCode == 9 || (lastKeyPressCode >= 112 && lastKeyPressCode <= 135))
				return;
			var v = $input.val();
			if (v.length >= options.minChars && !options.esc) {
				me.showResult()
			} else {
				$("#" + options.resultsid).hide()
			};
			options.esc = false
		};
		this.moveSelect = function (step) {
			var lis = $("li", $("#" + options.resultsid));
			active += step;
			if (active < 0) {
				active = lis.size() - 1
			} else if (active >= lis.size()) {
				active = 0
			};
			$(lis).removeClass(options.overClass);
			$(lis).eq(active).addClass(options.overClass);
			$input.val($(lis).eq(active).text())
		};
		$input.keyup(function (e) {
			if (lastKeyPressCode == 13)
				return;
			hasFocus = true;
			lastKeyPressCode = e.keyCode;
			if (lastKeyPressCode < 37 || lastKeyPressCode > 40) {
				active = -1;
				if (timeout)
					clearTimeout(timeout);
				timeout = setTimeout(function () {
						me.onChange()
					}, options.delay)
			}
		}).keydown(function (e) {
			hasFocus = true;
			lastKeyPressCode = e.keyCode;
			switch (e.keyCode) {
			case 13:
				if ($input.val() == "") {};
				me.hideResultsNow();
				if ($('#resultsEmail')[0].style.display == "block") {
					e.keyCode = 0;
					return false
				}
				break;
			case 38:
				e.preventDefault();
				if ($("#" + options.resultsid).is(":visible"))
					me.moveSelect(-1);
				break;
			case 40:
				e.preventDefault();
				if ($("#" + options.resultsid).is(":visible"))
					me.moveSelect(1);
				break;
			default:
				break
			}
		}).blur(function () {
			hasFocus = false;
			me.hideResultsNow()
		});
		this.init()
	};

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],9:[function(require,module,exports){
//define(function (require, exports, module) {

	function Cookie() {}
	module.exports = Cookie;
	var cookie_domain = webData.cookie_domain
	
	Cookie.prototype.setCookie = function (NameOfCookie, value, expiredays, domain) {
		if (expiredays == null || expiredays == undefined || expiredays == '' || isNaN(expiredays)) {
			expiredays = 365;
		}
		var ExpireDate = new Date();
		ExpireDate.setTime(ExpireDate.getTime() + (expiredays * 24 * 3600 * 1000));
		domain = domain ? domain : cookie_domain
        var _domain = domain ? ";domain=" + domain : ""
		document.cookie = NameOfCookie + "=" + escape(value) + _domain + ((expiredays == null) ? "": ";path=/; expires=" + ExpireDate.toGMTString());
	}

	Cookie.prototype.getCookie = function (NameOfCookie) {
		if (document.cookie.length > 0) {
			begin = document.cookie.indexOf(NameOfCookie + "=");
			if (begin != -1) {
				begin += NameOfCookie.length + 1;
				end = document.cookie.indexOf(";", begin);
				if (end == -1) end = document.cookie.length;
				return unescape(document.cookie.substring(begin, end));
			}
		}
		return null;
	}
	
//});

},{}],10:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('../lib/jqueryForm');
require('../mod/autocompleteEmail');
require('../mod/formCheck');

var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var elem_mask = $('.register-dialog-mask');
var elem_coupon_dialog = $('#dialog_p');

//打开coupon code 展示弹窗
function open_coupon_dialog(couponCode,back) {
    var dh = $(document).height();
    handler_coupon_dialog(couponCode,back);
    elem_mask.height(dh).show();
    elem_coupon_dialog.show();
    $("body").css('overflow','hidden');
}

function handler_coupon_dialog(couponCode,back) {
    $("#coupon-code").html('<span style="color: #342F36">' + _lang.page_pop_dialog_register_coupon_tip + ': ' + '</span>' + couponCode);
    elem_coupon_dialog.on('click', '.close', function() {
        close_dialog(elem_mask, elem_coupon_dialog);
        location.href = back;
    });
    elem_coupon_dialog.on('click', '.button', function() {
        close_dialog(elem_mask, elem_coupon_dialog);
        location.href = back;
    });
    elem_mask.off('click');
}

function close_dialog(elem_mask, elem_dialog) {
    elem_mask.hide();
    elem_dialog.hide();
    $("body").css('overflow','auto');
    window.dataLayer.push({
        'category' : 'registerDialog',
        'action' : 'regDialogCloses',
        'event' : 'popRegisterDialog'
    });
}

exports.init = function(CouponCode,back) {
    if(elem_mask.length && elem_coupon_dialog.length) {
        if ((!elem_mask.is(":visible"))) {
            open_coupon_dialog(CouponCode,back);
            if($(".one_register_banner").length>0){
                $('#judge_register_banner').removeClass('two_register_banner');
            }else{
                $('#judge_register_banner').addClass('one_register_banner');
                $('#judge_register_banner').removeClass('two_register_banner');
            }
        }
    }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2NvdXBvbl9yZWdpc3Rlcl9kaWFsb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbnJlcXVpcmUoJy4uL2xpYi9qcXVlcnlGb3JtJyk7XHJcbnJlcXVpcmUoJy4uL21vZC9hdXRvY29tcGxldGVFbWFpbCcpO1xyXG5yZXF1aXJlKCcuLi9tb2QvZm9ybUNoZWNrJyk7XHJcblxyXG52YXIgQ29va2llID0gcmVxdWlyZSgnLi4vbW9kL2Nvb2tpZScpO1xyXG52YXIgY29va2llID0gbmV3IENvb2tpZSgpO1xyXG5cclxudmFyIGVsZW1fbWFzayA9ICQoJy5yZWdpc3Rlci1kaWFsb2ctbWFzaycpO1xyXG52YXIgZWxlbV9jb3Vwb25fZGlhbG9nID0gJCgnI2RpYWxvZ19wJyk7XHJcblxyXG4vL+aJk+W8gGNvdXBvbiBjb2RlIOWxleekuuW8ueeql1xyXG5mdW5jdGlvbiBvcGVuX2NvdXBvbl9kaWFsb2coY291cG9uQ29kZSxiYWNrKSB7XHJcbiAgICB2YXIgZGggPSAkKGRvY3VtZW50KS5oZWlnaHQoKTtcclxuICAgIGhhbmRsZXJfY291cG9uX2RpYWxvZyhjb3Vwb25Db2RlLGJhY2spO1xyXG4gICAgZWxlbV9tYXNrLmhlaWdodChkaCkuc2hvdygpO1xyXG4gICAgZWxlbV9jb3Vwb25fZGlhbG9nLnNob3coKTtcclxuICAgICQoXCJib2R5XCIpLmNzcygnb3ZlcmZsb3cnLCdoaWRkZW4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlcl9jb3Vwb25fZGlhbG9nKGNvdXBvbkNvZGUsYmFjaykge1xyXG4gICAgJChcIiNjb3Vwb24tY29kZVwiKS5odG1sKCc8c3BhbiBzdHlsZT1cImNvbG9yOiAjMzQyRjM2XCI+JyArIF9sYW5nLnBhZ2VfcG9wX2RpYWxvZ19yZWdpc3Rlcl9jb3Vwb25fdGlwICsgJzogJyArICc8L3NwYW4+JyArIGNvdXBvbkNvZGUpO1xyXG4gICAgZWxlbV9jb3Vwb25fZGlhbG9nLm9uKCdjbGljaycsICcuY2xvc2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2NvdXBvbl9kaWFsb2cpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSBiYWNrO1xyXG4gICAgfSk7XHJcbiAgICBlbGVtX2NvdXBvbl9kaWFsb2cub24oJ2NsaWNrJywgJy5idXR0b24nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2NvdXBvbl9kaWFsb2cpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSBiYWNrO1xyXG4gICAgfSk7XHJcbiAgICBlbGVtX21hc2sub2ZmKCdjbGljaycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2RpYWxvZykge1xyXG4gICAgZWxlbV9tYXNrLmhpZGUoKTtcclxuICAgIGVsZW1fZGlhbG9nLmhpZGUoKTtcclxuICAgICQoXCJib2R5XCIpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goe1xyXG4gICAgICAgICdjYXRlZ29yeScgOiAncmVnaXN0ZXJEaWFsb2cnLFxyXG4gICAgICAgICdhY3Rpb24nIDogJ3JlZ0RpYWxvZ0Nsb3NlcycsXHJcbiAgICAgICAgJ2V2ZW50JyA6ICdwb3BSZWdpc3RlckRpYWxvZydcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbihDb3Vwb25Db2RlLGJhY2spIHtcclxuICAgIGlmKGVsZW1fbWFzay5sZW5ndGggJiYgZWxlbV9jb3Vwb25fZGlhbG9nLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICgoIWVsZW1fbWFzay5pcyhcIjp2aXNpYmxlXCIpKSkge1xyXG4gICAgICAgICAgICBvcGVuX2NvdXBvbl9kaWFsb2coQ291cG9uQ29kZSxiYWNrKTtcclxuICAgICAgICAgICAgaWYoJChcIi5vbmVfcmVnaXN0ZXJfYmFubmVyXCIpLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgICQoJyNqdWRnZV9yZWdpc3Rlcl9iYW5uZXInKS5yZW1vdmVDbGFzcygndHdvX3JlZ2lzdGVyX2Jhbm5lcicpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICQoJyNqdWRnZV9yZWdpc3Rlcl9iYW5uZXInKS5hZGRDbGFzcygnb25lX3JlZ2lzdGVyX2Jhbm5lcicpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2p1ZGdlX3JlZ2lzdGVyX2Jhbm5lcicpLnJlbW92ZUNsYXNzKCd0d29fcmVnaXN0ZXJfYmFubmVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07Il19
},{"../lib/jqueryForm":7,"../mod/autocompleteEmail":8,"../mod/cookie":9,"../mod/formCheck":13}],11:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();

	function Dialog() {}
	module.exports = new Dialog();

	Dialog.prototype.open = function(setting) {
		var me = this;
		var params = $.extend({
				modId : 'dialog',
				overlayOpacity : 0.5,
				overlayBgColor : '#000',
				width : Math.min(900, $(window).width() - 100),
				html : '',
			    canClose : true,
				closeWhenClickingBg : false,
                isUpdateHtml : false
			}, setting);

		//show overlayer
		if ($('#dialogOverlay').size() > 0) {
			var layer = $('#dialogOverlay');
		} else {
			var layer = $('<div id="dialogOverlay"><div style="background:' + params.overlayBgColor + ';"></div></div>').prependTo('body');
		};

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", params.overlayOpacity);

		//show dialog box
		if($('#' + params.modId).size() == 0) {
			var html = ['<div class="dialog" id="' + params.modId + '">', '<div class="dialog-wrapper">', '<div class="dialog-content" oncontextmenu="return false">', '<img src="' + webData.IMG_PATH + 'tran.gif" class="dialog-img">', '</div>', '<a href="javascript:void(0)" class="dialog-close"></a>', '</div>', '</div>'];
			if (!params.canClose) {
				html[5] = "";
			}
			layer.after(html.join(''));
		}
		var winbox = $('#' + params.modId);
		var mainShow = winbox.find('.dialog-content');
		var btnClose = winbox.find('.dialog-close');

		if((params.html != "" && mainShow.find('.dialog-img').size() > 0) || (params.html != "" && params.isUpdateHtml)) {
			mainShow.html(params.html);
		}

		winbox.show().css({
			"top" : Math.max(50, $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2),
			"left" : Math.max(0, $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2)
		});

		//click Esc key to hide all dialogs
		$(document).bind('keydown', enableEsc);

		//click overlayer
		layer.unbind();
		if (params.closeWhenClickingBg) {
			layer.bind('click', function () {
				me.close(winbox, true);
			});
		}

		//click close btn
		btnClose.unbind().bind('click', function () {
            if (!$.isEmptyObject(window.review) && window.review.status) {
                window.review = {
                    status: false,
                    url: webData.WEB_ROOT
                }
            }
            if (typeof cookie.getCookie('signInGoogle') != 'undefined' && cookie.getCookie('signInGoogle')) {
                cookie.setCookie('signInGoogle', false, 30);
            }
            cookie.setCookie('scrollTop', 0, -1);
            cookie.setCookie('scrollLeft', 0, -1);
			cookie.setCookie('favGoodsId', 0, -1);
			me.close(winbox, true);
			//return false
		});
		return winbox;
	};
	Dialog.prototype.openRegisterLogin = function(setting) {
		var me = this;
		var params = $.extend({
				modId : 'dialog',
				overlayOpacity : 0.5,
				overlayBgColor : '#000',
				width : Math.min(900, $(window).width() - 100),
				html : '',
			    canClose : true,
				closeWhenClickingBg : false,
                isUpdateHtml : false
			}, setting);

		//show overlayer
		if ($('#dialogOverlay').size() > 0) {
			var layer = $('#dialogOverlay');
		} else {
			var layer = $('<div id="dialogOverlay"><div style="background:' + params.overlayBgColor + ';"></div></div>').prependTo('body');
		};

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", params.overlayOpacity);

		//show dialog box
		if($('#' + params.modId).size() == 0) {
			var html = ['<div class="dialog showroom-login-dialog" id="' + params.modId + '">', '<div class="dialog-wrapper">', '<div class="dialog-content" oncontextmenu="return false">', '<img src="' + webData.IMG_PATH + 'tran.gif" class="dialog-img">', '</div>', '<a href="javascript:void(0)" class="dialog-close"></a>', '</div>', '</div>'];
			if (!params.canClose) {
				html[5] = "";
			}
			layer.after(html.join(''));
		}
		var winbox = $('#' + params.modId);
		var mainShow = winbox.find('.dialog-content');
		var btnClose = winbox.find('.dialog-close');

		if((params.html != "" && mainShow.find('.dialog-img').size() > 0) || (params.html != "" && params.isUpdateHtml)) {
			mainShow.html(params.html);
		}

		// winbox.show().css({
		// 	"top" : Math.max(50, $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2),
		// 	"left" : Math.max(0, $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2)
		// });
		winbox.css('display', 'flex')
		winbox.find('.dialog-close-icon').on('click', function () {
			layer.hide();
			winbox.hide();
		})
		//click Esc key to hide all dialogs
		$(document).bind('keydown', enableEsc);

		//click overlayer
		layer.unbind();
		if (params.closeWhenClickingBg) {
			layer.bind('click', function () {
				me.close(winbox, true);
			});
		}

		//click close btn
		btnClose.unbind().bind('click', function () {
            if (!$.isEmptyObject(window.review) && window.review.status) {
                window.review = {
                    status: false,
                    url: webData.WEB_ROOT
                }
            }
            if (typeof cookie.getCookie('signInGoogle') != 'undefined' && cookie.getCookie('signInGoogle')) {
                cookie.setCookie('signInGoogle', false, 30);
            }
            cookie.setCookie('scrollTop', 0, -1);
            cookie.setCookie('scrollLeft', 0, -1);
			cookie.setCookie('favGoodsId', 0, -1);
			me.close(winbox, true);
			//return false
		});
		return winbox;
	};

	Dialog.prototype.close = function(winbox, isHideOverlay) {
		$(winbox).hide();
		if(isHideOverlay) {
			var layer = $('#dialogOverlay');
			layer.children('div').stop().fadeTo("fast", 0.1, function () {
				layer.hide();
				layer.unbind();
			});
		}
		$(document).unbind('keydown', enableEsc);
	};

	function enableEsc(e) {
		var unicode = e.keyCode ? e.keyCode : e.charCode;
		if (unicode == 27) {
			$('.dialog:visible').hide();
			var layer = $('#dialogOverlay');
			layer.children('div').stop().fadeTo("fast", 0.1, function () {
				layer.hide()
			})
			$(document).unbind('keydown', enableEsc)
		}
	}

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":9}],12:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var Cookie = require('./cookie')
    var cookie = new Cookie()

	function Favorites() {}
	module.exports = Favorites;

    Favorites.prototype.addFav = function (goods_id, suc_func, srcEle, callback) {
        var param = {
            'act': 'add_favorites',
            'goods_id': goods_id
        }
        $.ajax({
            'type': 'POST',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': false,
            'dataType': 'json',
            'success': function (r) {
                if ((r.code == 0) && r.userFavorCount) {
                    if (typeof suc_func != 'undefined') {
                        suc_func(srcEle, r.userFavorCount);
                    }
                }
                if (typeof(callback) !== 'undefined') {
                    callback();
                }
            },
            'error': function () {
                if (typeof(callback) !== 'undefined') {
                    callback();
                }
            }
        });
    };

	Favorites.prototype.getFavCount = function (goods_id, suc_func, me) {
		var param = {
			'act'		:	'get_favorites_count',
			'goods_id'	:	goods_id
		}
		$.ajax({
			'type': 'GET',
			'url': webData.WEB_ROOT + 'ajax.php',
			'data': param,
			'cache': false,
			'dataType': 'json',
			'success': function(r) {
				if(r.code == 0) {
                    suc_func(r.data,me);
				}
			}
		});
	};

    Favorites.prototype.delFav = function (goods_id, suc_func, srcEle) {
        var param = {
            'act'		:	'del_favorites',
            'goods_id'	:	goods_id,
            'back':  location.pathname
        }
        $.ajax({
            'type': 'POST',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': false,
            'dataType': 'json',
            'success': function(r) {
                if(r.code == -1) {
                    alert(r.data);
                    self.location.href = r.url;
                    return;
                }
                if (r.code == 0) {
                    suc_func(srcEle, r.userFavorCount);
                }
            }
        });
    };

    Favorites.prototype.refreshFavorites = function (elementList) {
        var goodsIds = [];
        elementList.each(function () {
            goodsIds.push($(this).attr('data-goodsid'));
        });

        var params = {
            'act': 'refreshFavorites',
            'goodsIds': goodsIds
        };
        $.ajax({
            'type': 'POST',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': params,
            'cache': false,
            'dataType': 'json',
            'success': function (r) {
                if (r.code === 0) {
                    elementList.each(function () {
                        var have_showroom = webData.have_showroom;
                        if (have_showroom) {
                            var _goodsId = $(this).attr('data-goodsid');
                            if (r.isFavor[_goodsId] && $(this).hasClass('favor_unselected')) {
                                $(this).removeClass('favor_unselected').addClass('favor_select');
                            }
                        } else {
                            var _goodsId = $(this).attr('data-goodsid');
                            if (r.isFavor[_goodsId] && $(this).hasClass('favor_unselected')) {
                                $(this).removeClass('favor_unselected').addClass('favor_select');
                                $(this).unbind();
                            }
                            //detail
                            if (r.isFavor[_goodsId] && $(this).hasClass('add2fav2')) {
                                $(this).removeClass('add2fav2').addClass('existingFav2');
                            }
                            //cart
                            //console.log(r.isFavor[_goodsId], $(this).hasClass('moveToWishList'))
                            if (r.isFavor[_goodsId] && $(this).hasClass('moveToWishList')) {
                                $(this).remove();
                            }
                        }
                    });
                }
            }
        });
    };

    Favorites.prototype.addToShowRoom = function (goods_id, suc_func, srcEle, callback) {
        var favorQuickDisplay = require("../common/favor_quick_display");
        favorQuickDisplay.initShowRoomList();
        favorQuickDisplay.initCreateShowRoom();
        $('#loginDialog').css('display','none');
        $('#dialogOverlay').css('display','none');
        var param = {
            "act": "add_to_showroom",
            "goodsId": goods_id,
        }

        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    suc_func(srcEle,'click');

                    if (!!r.guide_link) {
                        openShowroomTutorialDialog(r.guide_link)
                        cookie.setCookie("showroom_tutorial_link", r.guide_link, 1)
                    }
                } else if (r.code == 3) {
                    openShowroomDialog(goods_id);
                }
            }
        });
    };
    Favorites.prototype.deleteFromShowRoom = function (goods_id, suc_func, srcEle, callback) {
        var param = {
            "act": "move_from_showroom",
            "goodsId": goods_id,
        }

        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    suc_func(srcEle,'click');
                }
            }
        });
    }

    function openShowroomDialog(goods_id) {
        if ($('#dialogOverlay').size() > 0) {
            var layer = $('#dialogOverlay');
        } else {
            var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
        };

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

        $(".showroom-dialog").css("display", "block");
        $(".showroom-dialog").find(".enter-showroom").attr("data-kvalue",goods_id);
        $('#loginDialog').css('display','none');
        var clientHeight = window.innerHeight ;
        if(clientHeight > 650){
            $(".showroom-dialog").css("top",$(window).scrollTop() + $(window).height() / 7);
        }else{
            $(".showroom-dialog").css("top",$(window).scrollTop());
        }
    };

    function openShowroomTutorialDialog(guide_link) {
        var dialog = $('#showroom-common-tutorial-entry')

        if (dialog.length == 0) {
            return
        }

        if ($('#dialogOverlay').size() > 0) {
            var layer = $('#dialogOverlay')
        } else {
            var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body')
        }
        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5)
        $('body').css('overflow', 'hidden')

        $(dialog).css('display', 'flex')
        $(dialog).find('.learn-now').on('click', function() {
            closeShowroomTutorialDialog()
            location.href = guide_link
        })

        $(dialog).find('.learn-later').on('click', closeShowroomTutorialDialog)
        $(dialog).find('.dialog-close-icon').on('click', closeShowroomTutorialDialog)
    }

    function closeShowroomTutorialDialog() {
        $('#dialogOverlay').hide()
        $('body').css('overflow', 'visible')

        $('#showroom-common-tutorial-entry').hide()
        cookie.setCookie("showroom_tutorial_link", "", 1)
    }

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../common/favor_quick_display":1,"./cookie":9}],13:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	$.fn.formCheck = function (items, params) {
		if (!params)
			params = {};
		params.rules = $.extend({
				'null' : function (obj, checks) {
					return $.trim($(obj).val()).length > 0
				},
				'maxlength' : function (obj, checks) {
					return $.trim($(obj).val()).length <= checks.maxlength
				},
				'minlength' : function (obj, checks) {
					return $.trim($(obj).val()).length >= checks.minlength
				},
				'digitMinlength' : function (obj, checks) {
					return $.trim($(obj).val().replace(/[^0-9]/g, '')).length >= checks.minlength
				},
				'email' : function (obj, checks) {
					return /(\,|^)([\w+._]+@\w+\.(\w+\.){0,3}\w{2,4})/.test($(obj).val().replace(/-|\//g, ''))
				},
				'checked' : function (obj, checks) {
					return obj.checked
				},
				'phone' : function (obj, checks) {
					return /^[\d-\s]{1,20}$/.test($(obj).val()) && $.trim($(obj).val()).replace(/[\s]+/g, ' ').length <= checks.maxlength
				},
				'number' : function (obj, checks) {
					return /^[0-9]+$/.test($.trim($(obj).val()))
				},
				'min' : function (obj, checks) {
					return parseInt($(obj).val()) >= checks.min
				},
				"regexp" : function (obj, checks) {
					return checks.pattern.test($.trim($(obj).val()))
				},
				'select' : function (obj, checks) {
					return $(obj).val() != checks.value
				},
				'user' : function (obj, checks) {
					return /^(?!\d)[a-zA-Z0-9\u4e00-\u9fa5_]{5,18}$/.test($.trim($(obj).val()))
				}
			}, params.rules);
		var result = true,
		focused = false;
		function checkItem(item, checks) {
			for (j in checks) {
				if (params.rules[checks[j].type])
					if (params.rules[checks[j].type](item, checks[j]))
						continue;
                /*
				if (!focused && !checks[j].noFocus) {
					if ($(item).offset().top < $(window).scrollTop()) {
						$('html, body').animate({
							scrollTop : $(item).offset().top
						}, 'fast')
					}
					focused = true
				};
                 */
				if (checks[j].showError) {
					checks[j].showError();
					result = false;
					break
				} else if (params.showError) {
					params.showError($(item), checks[j].errMsg, checks[j].errEvent);
					result = false;
					break
				} else if (params.errinfoFinder) {
					params.errinfoFinder($(item)).text(checks[j].errMsg);
					$(item).focus(function () {
						params.errinfoFinder($(item)).text('');
					});
					if ($(item).attr('type') != null && $(item).attr('type').toLowerCase() == 'checkbox') {
						$(item).click(function () {
							$(item).focus()
						})
					};
					result = false;
					break
				} else if (checks[j].errMsg) {
					alert(checks[j].errMsg);
					return false
				}
			};
			return true
		};
		for (i = 0; i < this[0].length; i++) {
			if ($(this[0][i]).attr('name') && $(this[0][i]).attr('name').length == 0 || $(this[0][i]).prop('disabled'))
				continue;
			var checks = items[$(this[0][i]).attr('name')];
			if (!checks)
				continue;
			if (!checkItem(this[0][i], checks))
				return false
		};
		return result
	};
	
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1DaGVjay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cdHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cdFxyXG5cdCQuZm4uZm9ybUNoZWNrID0gZnVuY3Rpb24gKGl0ZW1zLCBwYXJhbXMpIHtcclxuXHRcdGlmICghcGFyYW1zKVxyXG5cdFx0XHRwYXJhbXMgPSB7fTtcclxuXHRcdHBhcmFtcy5ydWxlcyA9ICQuZXh0ZW5kKHtcclxuXHRcdFx0XHQnbnVsbCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkLnRyaW0oJChvYmopLnZhbCgpKS5sZW5ndGggPiAwXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWF4bGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA8PSBjaGVja3MubWF4bGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWlubGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA+PSBjaGVja3MubWlubGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnZGlnaXRNaW5sZW5ndGgnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJC50cmltKCQob2JqKS52YWwoKS5yZXBsYWNlKC9bXjAtOV0vZywgJycpKS5sZW5ndGggPj0gY2hlY2tzLm1pbmxlbmd0aFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J2VtYWlsJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIC8oXFwsfF4pKFtcXHcrLl9dK0BcXHcrXFwuKFxcdytcXC4pezAsM31cXHd7Miw0fSkvLnRlc3QoJChvYmopLnZhbCgpLnJlcGxhY2UoLy18XFwvL2csICcnKSlcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdjaGVja2VkJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iai5jaGVja2VkXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQncGhvbmUnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bXFxkLVxcc117MSwyMH0kLy50ZXN0KCQob2JqKS52YWwoKSkgJiYgJC50cmltKCQob2JqKS52YWwoKSkucmVwbGFjZSgvW1xcc10rL2csICcgJykubGVuZ3RoIDw9IGNoZWNrcy5tYXhsZW5ndGhcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdudW1iZXInIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bMC05XSskLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J21pbicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCgkKG9iaikudmFsKCkpID49IGNoZWNrcy5taW5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFwicmVnZXhwXCIgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBjaGVja3MucGF0dGVybi50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J3NlbGVjdCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkKG9iaikudmFsKCkgIT0gY2hlY2tzLnZhbHVlXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQndXNlcicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAvXig/IVxcZClbYS16QS1aMC05XFx1NGUwMC1cXHU5ZmE1X117NSwxOH0kLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgcGFyYW1zLnJ1bGVzKTtcclxuXHRcdHZhciByZXN1bHQgPSB0cnVlLFxyXG5cdFx0Zm9jdXNlZCA9IGZhbHNlO1xyXG5cdFx0ZnVuY3Rpb24gY2hlY2tJdGVtKGl0ZW0sIGNoZWNrcykge1xyXG5cdFx0XHRmb3IgKGogaW4gY2hlY2tzKSB7XHJcblx0XHRcdFx0aWYgKHBhcmFtcy5ydWxlc1tjaGVja3Nbal0udHlwZV0pXHJcblx0XHRcdFx0XHRpZiAocGFyYW1zLnJ1bGVzW2NoZWNrc1tqXS50eXBlXShpdGVtLCBjaGVja3Nbal0pKVxyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIC8qXHJcblx0XHRcdFx0aWYgKCFmb2N1c2VkICYmICFjaGVja3Nbal0ubm9Gb2N1cykge1xyXG5cdFx0XHRcdFx0aWYgKCQoaXRlbSkub2Zmc2V0KCkudG9wIDwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XHJcblx0XHRcdFx0XHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxUb3AgOiAkKGl0ZW0pLm9mZnNldCgpLnRvcFxyXG5cdFx0XHRcdFx0XHR9LCAnZmFzdCcpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmb2N1c2VkID0gdHJ1ZVxyXG5cdFx0XHRcdH07XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuXHRcdFx0XHRpZiAoY2hlY2tzW2pdLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0Y2hlY2tzW2pdLnNob3dFcnJvcigpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0cGFyYW1zLnNob3dFcnJvcigkKGl0ZW0pLCBjaGVja3Nbal0uZXJyTXNnLCBjaGVja3Nbal0uZXJyRXZlbnQpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLmVycmluZm9GaW5kZXIpIHtcclxuXHRcdFx0XHRcdHBhcmFtcy5lcnJpbmZvRmluZGVyKCQoaXRlbSkpLnRleHQoY2hlY2tzW2pdLmVyck1zZyk7XHJcblx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cGFyYW1zLmVycmluZm9GaW5kZXIoJChpdGVtKSkudGV4dCgnJyk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGlmICgkKGl0ZW0pLmF0dHIoJ3R5cGUnKSAhPSBudWxsICYmICQoaXRlbSkuYXR0cigndHlwZScpLnRvTG93ZXJDYXNlKCkgPT0gJ2NoZWNrYm94Jykge1xyXG5cdFx0XHRcdFx0XHQkKGl0ZW0pLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKClcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fSBlbHNlIGlmIChjaGVja3Nbal0uZXJyTXNnKSB7XHJcblx0XHRcdFx0XHRhbGVydChjaGVja3Nbal0uZXJyTXNnKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH07XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpc1swXS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykgJiYgJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykubGVuZ3RoID09IDAgfHwgJCh0aGlzWzBdW2ldKS5wcm9wKCdkaXNhYmxlZCcpKVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR2YXIgY2hlY2tzID0gaXRlbXNbJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJyldO1xyXG5cdFx0XHRpZiAoIWNoZWNrcylcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0aWYgKCFjaGVja0l0ZW0odGhpc1swXVtpXSwgY2hlY2tzKSlcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblx0fTtcclxuXHRcclxuLy99KTsiXX0=
},{}],14:[function(require,module,exports){
//define(function (require, exports, module) {
	
    var loadJS = function (id, src) {
        if (document.getElementById(id)) return;
        var container = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.id = id;
        script.src = src;
        script.async = true;
        container.appendChild(script);
    };

    var loadSocialJS = function (id) {
        var config = {
            "facebook" : "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=" + webData.fb_app,
            "twitter" : "https://platform.twitter.com/widgets.js",
            "pinit" : "//assets.pinterest.com/js/pinit.js",
            "gplusone" : "https://apis.google.com/js/plusone.js",
            "livechat" : ('https:' == document.location.protocol ? 'https://' : 'http://') + 'cdn.livechatinc.com/tracking.js',
            "gmail" : "https://apis.google.com/js/platform.js?onload=gmailLoadCallback"
        };
        for(var key in config) {
            if(key == id) {
                loadJS(id + '-sdk', config[key]);
                break;
            }
        }
    };

    module.exports = {
        "loadJS": loadJS,
        "loadSocialJS": loadSocialJS
    };

//});
},{}],15:[function(require,module,exports){
var openInPopup =  function (open) {
    return function (url, name, w, h) {
        var w = parseInt(w) || 475;
        var h = parseInt(h) || 183;
        // Fixes dual-screen position                         Most browsers      Firefox
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;

        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var override_features = 'width=' + w + ',height=' + h + ',left=' + left + ',top=' + top + ',scrollbars=1,location=1,toolbar=0';

        // set name if missing here
        //name = name || "default_window_name";
        return open.call(window, url, name, override_features);
    };
}(window.open);

module.exports = openInPopup;

},{}],16:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var dialog = require('../mod/dialog');

function PopGetCoupon() {
}

module.exports = PopGetCoupon;

PopGetCoupon.prototype.couponDialog = function () {
    var couponCode = $('input[name="couponCode"]').val();
    var couponStartTime = $('input[name="couponStartTime"]').val();
    var couponEndTime = $('input[name="couponEndTime"]').val();
    var isHadCoupon = $('input[name="isHadCoupon"]').val();
    var configDataManjianStr = $('input[name="configDataManjian"]').val();
    var configDataManjianArr = JSON.parse(configDataManjianStr);

    var configDataManjianHtml = '';
    for(var i = 0; i < configDataManjianArr.length; i ++) {
        var valueForDisplay = configDataManjianArr[i]['value_for_display'] != undefined ? configDataManjianArr[i]['value_for_display'] : 0;
        var startNumForDisplay = configDataManjianArr[i]['start_num_for_display'] != undefined ? configDataManjianArr[i]['start_num_for_display'] : 0;
        configDataManjianHtml += '<p>' + valueForDisplay + ' ' + _lang.page_common_price_off + ' ' + startNumForDisplay + '+' + '</p>';
    }

    var clipBtnHtml = '';
    if(isHadCoupon){
        clipBtnHtml = '<p id="clip_btn" class="btn clipped-btn">' + _lang.page_common_clipped + '</p>'
    } else {
        clipBtnHtml = '<p id="clip_btn" class="btn clip-btn">' + _lang.page_common_clip + '</p>'
    }

    var couponDialogHtml = '<div id="coupon_dialog_container">'
        + '<p class="clip-coupon">' + _lang.page_common_get_coupon + '</p>'
        + '<p class="use-coupon-condition">' + _lang.page_common_use_coupon_condition + '</p>'
        + '<div class="coupon-info">'
            + '<div class="coupon-info-left">'
            +  configDataManjianHtml
            + '</div>'
            + '<div class="coupon-info-right">'
            +  clipBtnHtml
            + '</div>'
            + '<div class="coupon-time">'
            + '<span class="coupon-valid-time">' + couponStartTime + '-' + couponEndTime + '</span>'
            + '<span class="coupon-code">' + _lang.page_common_code + ' : ' + couponCode + '</span>'
            + '</div>'
        + '</div>'
        + '<p class="coupon-note">' + _lang.page_common_coupon_note + '</p>'
        + '</div>';

    var couponDialog = dialog.open({modId: 'coupon_dialog', width: 600, html: couponDialogHtml, closeWhenClickingBg: true});
    couponDialog.css('top', $(window).scrollTop() + 260);

};


PopGetCoupon.prototype.bindEvent = function () {

    $('#coupon_dialog').delegate('.clip-btn', 'click', function (e) {
        var self = this
        var couponId = $('input[name="couponId"]').val();
        var couponCode = $('input[name="couponCode"]').val();

        var data = {
            act: "click_clip_coupon",
            couponId: couponId,
            couponCode: couponCode,
        };

        $.ajax({
            method: "POST",
            url: "/ajax.php",
            dataType: 'json',
            data: data,
            success: function(r) {
                if (r.code == 0) {
                    $('#clip_btn').removeClass("clip-btn").addClass("clipped-btn").text(_lang.page_common_clipped);
                }
            }
        });

    });
};






}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL3BvcEdldENvdXBvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxudmFyIGRpYWxvZyA9IHJlcXVpcmUoJy4uL21vZC9kaWFsb2cnKTtcclxuXHJcbmZ1bmN0aW9uIFBvcEdldENvdXBvbigpIHtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BHZXRDb3Vwb247XHJcblxyXG5Qb3BHZXRDb3Vwb24ucHJvdG90eXBlLmNvdXBvbkRpYWxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjb3Vwb25Db2RlID0gJCgnaW5wdXRbbmFtZT1cImNvdXBvbkNvZGVcIl0nKS52YWwoKTtcclxuICAgIHZhciBjb3Vwb25TdGFydFRpbWUgPSAkKCdpbnB1dFtuYW1lPVwiY291cG9uU3RhcnRUaW1lXCJdJykudmFsKCk7XHJcbiAgICB2YXIgY291cG9uRW5kVGltZSA9ICQoJ2lucHV0W25hbWU9XCJjb3Vwb25FbmRUaW1lXCJdJykudmFsKCk7XHJcbiAgICB2YXIgaXNIYWRDb3Vwb24gPSAkKCdpbnB1dFtuYW1lPVwiaXNIYWRDb3Vwb25cIl0nKS52YWwoKTtcclxuICAgIHZhciBjb25maWdEYXRhTWFuamlhblN0ciA9ICQoJ2lucHV0W25hbWU9XCJjb25maWdEYXRhTWFuamlhblwiXScpLnZhbCgpO1xyXG4gICAgdmFyIGNvbmZpZ0RhdGFNYW5qaWFuQXJyID0gSlNPTi5wYXJzZShjb25maWdEYXRhTWFuamlhblN0cik7XHJcblxyXG4gICAgdmFyIGNvbmZpZ0RhdGFNYW5qaWFuSHRtbCA9ICcnO1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGNvbmZpZ0RhdGFNYW5qaWFuQXJyLmxlbmd0aDsgaSArKykge1xyXG4gICAgICAgIHZhciB2YWx1ZUZvckRpc3BsYXkgPSBjb25maWdEYXRhTWFuamlhbkFycltpXVsndmFsdWVfZm9yX2Rpc3BsYXknXSAhPSB1bmRlZmluZWQgPyBjb25maWdEYXRhTWFuamlhbkFycltpXVsndmFsdWVfZm9yX2Rpc3BsYXknXSA6IDA7XHJcbiAgICAgICAgdmFyIHN0YXJ0TnVtRm9yRGlzcGxheSA9IGNvbmZpZ0RhdGFNYW5qaWFuQXJyW2ldWydzdGFydF9udW1fZm9yX2Rpc3BsYXknXSAhPSB1bmRlZmluZWQgPyBjb25maWdEYXRhTWFuamlhbkFycltpXVsnc3RhcnRfbnVtX2Zvcl9kaXNwbGF5J10gOiAwO1xyXG4gICAgICAgIGNvbmZpZ0RhdGFNYW5qaWFuSHRtbCArPSAnPHA+JyArIHZhbHVlRm9yRGlzcGxheSArICcgJyArIF9sYW5nLnBhZ2VfY29tbW9uX3ByaWNlX29mZiArICcgJyArIHN0YXJ0TnVtRm9yRGlzcGxheSArICcrJyArICc8L3A+JztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY2xpcEJ0bkh0bWwgPSAnJztcclxuICAgIGlmKGlzSGFkQ291cG9uKXtcclxuICAgICAgICBjbGlwQnRuSHRtbCA9ICc8cCBpZD1cImNsaXBfYnRuXCIgY2xhc3M9XCJidG4gY2xpcHBlZC1idG5cIj4nICsgX2xhbmcucGFnZV9jb21tb25fY2xpcHBlZCArICc8L3A+J1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjbGlwQnRuSHRtbCA9ICc8cCBpZD1cImNsaXBfYnRuXCIgY2xhc3M9XCJidG4gY2xpcC1idG5cIj4nICsgX2xhbmcucGFnZV9jb21tb25fY2xpcCArICc8L3A+J1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb3Vwb25EaWFsb2dIdG1sID0gJzxkaXYgaWQ9XCJjb3Vwb25fZGlhbG9nX2NvbnRhaW5lclwiPidcclxuICAgICAgICArICc8cCBjbGFzcz1cImNsaXAtY291cG9uXCI+JyArIF9sYW5nLnBhZ2VfY29tbW9uX2dldF9jb3Vwb24gKyAnPC9wPidcclxuICAgICAgICArICc8cCBjbGFzcz1cInVzZS1jb3Vwb24tY29uZGl0aW9uXCI+JyArIF9sYW5nLnBhZ2VfY29tbW9uX3VzZV9jb3Vwb25fY29uZGl0aW9uICsgJzwvcD4nXHJcbiAgICAgICAgKyAnPGRpdiBjbGFzcz1cImNvdXBvbi1pbmZvXCI+J1xyXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiY291cG9uLWluZm8tbGVmdFwiPidcclxuICAgICAgICAgICAgKyAgY29uZmlnRGF0YU1hbmppYW5IdG1sXHJcbiAgICAgICAgICAgICsgJzwvZGl2PidcclxuICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImNvdXBvbi1pbmZvLXJpZ2h0XCI+J1xyXG4gICAgICAgICAgICArICBjbGlwQnRuSHRtbFxyXG4gICAgICAgICAgICArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJjb3Vwb24tdGltZVwiPidcclxuICAgICAgICAgICAgKyAnPHNwYW4gY2xhc3M9XCJjb3Vwb24tdmFsaWQtdGltZVwiPicgKyBjb3Vwb25TdGFydFRpbWUgKyAnLScgKyBjb3Vwb25FbmRUaW1lICsgJzwvc3Bhbj4nXHJcbiAgICAgICAgICAgICsgJzxzcGFuIGNsYXNzPVwiY291cG9uLWNvZGVcIj4nICsgX2xhbmcucGFnZV9jb21tb25fY29kZSArICcgOiAnICsgY291cG9uQ29kZSArICc8L3NwYW4+J1xyXG4gICAgICAgICAgICArICc8L2Rpdj4nXHJcbiAgICAgICAgKyAnPC9kaXY+J1xyXG4gICAgICAgICsgJzxwIGNsYXNzPVwiY291cG9uLW5vdGVcIj4nICsgX2xhbmcucGFnZV9jb21tb25fY291cG9uX25vdGUgKyAnPC9wPidcclxuICAgICAgICArICc8L2Rpdj4nO1xyXG5cclxuICAgIHZhciBjb3Vwb25EaWFsb2cgPSBkaWFsb2cub3Blbih7bW9kSWQ6ICdjb3Vwb25fZGlhbG9nJywgd2lkdGg6IDYwMCwgaHRtbDogY291cG9uRGlhbG9nSHRtbCwgY2xvc2VXaGVuQ2xpY2tpbmdCZzogdHJ1ZX0pO1xyXG4gICAgY291cG9uRGlhbG9nLmNzcygndG9wJywgJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgMjYwKTtcclxuXHJcbn07XHJcblxyXG5cclxuUG9wR2V0Q291cG9uLnByb3RvdHlwZS5iaW5kRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJCgnI2NvdXBvbl9kaWFsb2cnKS5kZWxlZ2F0ZSgnLmNsaXAtYnRuJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICAgICB2YXIgY291cG9uSWQgPSAkKCdpbnB1dFtuYW1lPVwiY291cG9uSWRcIl0nKS52YWwoKTtcclxuICAgICAgICB2YXIgY291cG9uQ29kZSA9ICQoJ2lucHV0W25hbWU9XCJjb3Vwb25Db2RlXCJdJykudmFsKCk7XHJcblxyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBhY3Q6IFwiY2xpY2tfY2xpcF9jb3Vwb25cIixcclxuICAgICAgICAgICAgY291cG9uSWQ6IGNvdXBvbklkLFxyXG4gICAgICAgICAgICBjb3Vwb25Db2RlOiBjb3Vwb25Db2RlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHVybDogXCIvYWpheC5waHBcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIuY29kZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2NsaXBfYnRuJykucmVtb3ZlQ2xhc3MoXCJjbGlwLWJ0blwiKS5hZGRDbGFzcyhcImNsaXBwZWQtYnRuXCIpLnRleHQoX2xhbmcucGFnZV9jb21tb25fY2xpcHBlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4iXX0=
},{"../mod/dialog":11}],17:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var dialog = require('../mod/dialog');
    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();

    function PopLogin() {
    }

    module.exports = PopLogin;

    PopLogin.prototype.requestFloatingSign = function (signSuccessCb, source, is_callback) {
        // var tab = arguments[2] && arguments[2] === "register" ? "register" : "login";
        //已登录
        if ($('#myAccount').find('dropdown').length > 0 || window.login_status == true) {
            signSuccessCb.call();
            return true;
        }

        function openLoginDialog() {
            var logUrl = webData.WEB_ROOT + "ajax.php?act=login&back=" + encodeURIComponent(source);
            var use_coupon_register = webData.use_coupon_register;
            var pageLoginByClickingRegister = _lang.page_register_webroot_agree_terms_privacy.replace(/{\$WEB_ROOT}/g, webData.WEB_ROOT);
            var fromEmail = "notice@" + webData.SITE_DOMAIN;
            var pageRemindRegisterEmail=_lang.page_remind_register_email.replace(/{\$from_email}/g, fromEmail);
            if(use_coupon_register) {
                var regUrl = webData.WEB_ROOT + "ajax.php?act=coupon_register&back=" + encodeURIComponent(source);
            }else{
                var regUrl = webData.WEB_ROOT + "ajax.php?act=register&back=" + encodeURIComponent(source);
            }
            var stylePreferenceHtml = "";
            for (var key in webData.stylePreference) {
                stylePreferenceHtml +=
                '<div class="style_preference">' +
                '<input type="checkbox" name="reg[style_preference][]" value="'+key+'" />' +
                '<label> '+ webData.stylePreference[key]+'</label>' +
                '</div>';
            }
            var couponUpper = _lang.page_checkout_coupon.toUpperCase()
            var loginDialogHtml =
                '<div class="login-register clearfix">'+
                '<div id="wrapper-r">' +
                    '<div class="widget w-scCreatNewAccount">' +
                    '<div class="w-rHeadingV2">' +
                    '<h2><span>' + _lang.page_common_register + '</span></h2>' +
                '<p class="register-coupon-tip">' + _lang.page_common_get + ' <b class="strong-bold">5% ' + _lang.page_common_price_off + ' </b>' + couponUpper + '</p>' +
                '</div>' +
                '<div class="mainbox">' +
                    '<p class="alert hide" id="_msgx"></p>' +
                    '<form action="'+regUrl+'" method="post" name="form_reg" id="form_reg" autocomplete="off" style="display: block;">' +
                    '<input type="hidden" name="act" value="register">' +
                    '<table cellspacing="0">' +
                    '<tbody>' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_email + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol relative"><input type="text" id="email" name="reg[email]" class="text elmbBlur" maxlength="60" autocomplete="off">' +
                                '<span id="regEmailValWait"></span>' +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_password + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol"><input type="password" id="password" name="reg[password]" class="text elmbBlur" maxlength="32">' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_repeat_the_password + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol" style="padding-top: 1px"><input type="password" id="password_again" name="reg[password_again]" class="text elmbBlur" maxlength="32"></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td><span class="required"></span>' + _lang.page_common_event_day + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol datepicker" style="padding-top: 1px"><input type="text" id="datepicker_pop" name="event_day" class="text elmbBlur" readonly="readonly" maxlength="32"></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td>'+_lang.page_style_preference+':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td>' +
                                stylePreferenceHtml +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="newsletter"><input type="checkbox" checked="checked" id="agreeNewsLetter" name="reg[agreeNewsLetter]">' +
                            '<label> ' + _lang.page_register_agree_newsletter + '</label></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="sign-up-btn-td">' +
                                '<a href="javascript:void(0);" class="sign-up-btn" tabindex="3">' +
                                    '<input type="submit" value="' + _lang.page_register_reg_submit + '" alt="' + _lang.page_register_reg_submit + '" title="' + _lang.page_register_reg_submit + '" src="' + webData.IMG_PATH + 'tran.gif"  class="signUpBtn">' +
                                '</a>' +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="privacy"><p>' + pageLoginByClickingRegister +'</p>' +
                            '<p>' + pageRemindRegisterEmail + '</p>' +
                            '</td>' +
                        '</tr>' +
                    '</tbody>' +
                '</table>';
            if(use_coupon_register){
                 loginDialogHtml = loginDialogHtml + '<input type="hidden" name="act" value="coupon_register" />';
            }else{
                 loginDialogHtml = loginDialogHtml + '<input type="hidden" name="act" value="register" />';
            }
                loginDialogHtml +=  '</form>' +
                '</div></div></div>'

                + '<div id="wrapper-l">' +
                '<div class="widget w-signInGuide">' +
                '<div class="w-rHeadingV2">' +
                '<h2><span>'+ _lang.page_login_sign_in +'</span></h2>' +
                '</div>' +
                '<div class="mainboxV2">' +
                '<form action="'+ logUrl +'" method="post" name="form_login" id="form_login" autocomplete="off">' +
                '<input type="hidden" value="login" name="act">' +
                '<table cellspacing="0"><tbody><tr><td>' +
                '<span class="required">* </span>'+ _lang.page_login_email +':</td></tr>' +
                '<tr><td class="inputcol">' +
                '<input type="text" id="_email" name="login[email]" value="" class="text elmbBlur" maxlength="96" autocomplete="off"></td></tr>' +
                '<tr><td><span class="required">* </span>'+ _lang.page_login_password +':</td></tr><tr>' +
                '<td class="inputcol"><input type="password" id="_password" name="login[password]" class="text elmbBlur" maxlength="40"></td></tr>' +
                '<tr><td class="inputcol"><p id="_msg" class="hide"></p></td></tr>' +
                '<tr><td class="sign-in-btn-td">' +
                '<a href="javascript:void(0);" class="sign-btn" tabindex="3">' +
                '<input type="submit" value="'+ _lang.page_login_sign_in +'" alt="'+ _lang.page_login_sign_in +'" title="'+ _lang.page_login_sign_in +'" src="' + webData.IMG_PATH + 'tran.gif" class="signInBtn">' +
                '</a>' +
                '</td></tr>' +
                '<tr><td class="inputcol">' +
                '<p class="forgotTip">' +
                '<a href="' + webData.WEB_ROOT + 'forgotpassword.php" target="_blank" title="' + _lang.page_login_forgot_tip + '" class="u">' + _lang.page_login_forgot_tip + '</a></p>' +
                '</p></td></tr></tbody></table></form>' +
                '<div class="login-dividing-line"><span>' + _lang.page_common_or + '</span></div>' +
                '<div class="sns-login"><div class="facebook_login">' +
                '<div id="fbSignBtn" onclick="pageData.loginModule.get_facebook_login()">' + _lang.page_login_login_with_facebook + '</div>' +
                '</div>' +
                '<div class="gmail_login"><div id="gmailSignBtn">' + _lang.page_sns_google_sign + '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>'
            + '</div>'
            dialog.openRegisterLogin({modId: 'loginDialog', width: 560, html: loginDialogHtml, closeWhenClickingBg: false});
            return true;
        }

        function dialogHandler() {
            //登陆注册表单
            var login = require('../pages/login');
            login.init_login(is_callback);
            login.init_register(is_callback);
            login.init_calendar('#datepicker_pop');
            if (typeof (is_callback) == 'undefined' || is_callback) {
                login.init_callback(signSuccessCb);
            }
        }

        if ($('#loginDialog').length > 0) {
            openLoginDialog();
            // dialogHandler();
        } else {
            $.ajax({
                type: 'get',
                url: webData.WEB_ROOT + 'ajax.php?act=checkLoggedIn',
                data: '',
                dataType: 'json',
                complete: function () {
                },
                success: function (r) {
                    if (r.error == 1) {
                        var use_coupon_register = webData.use_coupon_register;
                        if(use_coupon_register){
                            $('#loginDialog').css("display","block");
                        }
                        openLoginDialog();
                        dialogHandler();
                    } else {
                        signSuccessCb();
                    }
                },
                error: function () {
                }
            });
        }
    }

    PopLogin.prototype.jumpToUrl = function (url) {
        if (location.href === url) {
            window.location.reload()
        } else {
            window.location.href = url
        }
    }

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":9,"../mod/dialog":11,"../pages/login":20}],18:[function(require,module,exports){
//define(function(require, exports, module) {
function StringHandle() {}
module.exports = StringHandle;

StringHandle.prototype.quoteattr = function (string, preserveCR) {
	preserveCR = preserveCR ? '&#13;' : '\n';
	return ('' + string)                   /* Forces the conversion to string. */
		.replace(/&/g, '&amp;')            /* This MUST be the 1st replacement. */
		.replace(/'/g, '&apos;')           /* The 4 other predefined entities, required. */
		.replace(/"/g, '&quot;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
		/*
		 You may add other replacements here for HTML only
		 (but it's not necessary).
		 Or for XML, only if the named entities are defined in its DTD.
		 */
		.replace(/\r\n/g, preserveCR)      /* Must be before the next replacement. */
		.replace(/[\r\n]/g, preserveCR);
	;
}

//});
},{}],19:[function(require,module,exports){
//define(function (require, exports, module) {

    function UserAgent() {}
    module.exports = UserAgent;

    UserAgent.prototype.isIpad = function () {
        if (navigator.userAgent.match(/iPad/i)) {
            return true;
        } else {
            return false;
        }
    }
    
    UserAgent.prototype.isPhone = function () {
        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/) || navigator.userAgent.match(/Windows Phone/i) ||	navigator.userAgent.match(/ZuneWP7/i)) {
            return true;
        } else {
            return false;
        }
    }

    UserAgent.prototype.isIE = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        return isIE;
    }

    UserAgent.prototype.isIEVersion = function (version) {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        var uaVersion = (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [])[1];
        if(isIE && parseInt(uaVersion) == parseInt(version)) {
            return true;
        } else {
            return false;
        }
    }
    UserAgent.prototype.detectBrowser=function(){
        var ua= navigator.userAgent, tem, 
        M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if(/trident/i.test(M[1])){
            tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE '+(tem[1] || '');
        }
        if(M[1]=== 'Chrome'){
            tem= ua.match(/\bOPR\/(\d+)/)
            if(tem!= null) return 'Opera '+tem[1];
        }
        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
        if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
        return M.join(' ');
    };

//});
},{}],20:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    require('../lib/jqueryForm');
    require('../lib/jmodal');
    require('../mod/autocompleteEmail');
    require('../mod/formCheck');
    var openInPopup = require('../mod/openInPopup');
    var CouponRegisterDialog = require('../mod/coupon_register_dialog');
    var Cookie = require('../mod/cookie');
    require('../lib/jQueryDatePicker');
    require('../lib/jquery-ui-i18.min');
    var cookie = new Cookie();

    var back_url = (pageData && pageData.back) ? pageData.back : location.href;
    var anchorPos = back_url.indexOf('#');
    var back_url = back_url.substr(0, anchorPos > 0 ? anchorPos : back_url.length);
    var google_auth_url = pageData.google_auth_url;

    window.dataLayer = window.dataLayer || [];

    if (pageData && pageData.isCheckoutLogin) {
        back_url += '?isLoginBack=1';
    }
    function changeWriteReviewUrl() {
        if (!$.isEmptyObject(window.review) && window.review.status) {
            return window.review.status ? window.review.url : back_url;
        }
        return back_url;
    }

    function revertWriteReviewUrl() {
        window.review = {
            status: false,
            url: webData.WEB_ROOT
        }
    }

    //显示/清除错误提示
    var showError = function(obj, errMsg) {
        var obj = $(obj);
        if (obj.parent().hasClass('inputcol')) {
            obj.parent().addClass('error').find('.error-tip').text(errMsg);
            var error_tip = obj.parent().find('.error-tip');
            if(error_tip.length > 0) {
                error_tip.text(errMsg);
            } else {
                obj.parent().append(' <p class="error-tip">' + errMsg + '</p>');
            }
        } else {
            obj.wrap('<div class="inputcol error"></div>').parent().append(' <p class="error-tip">' + errMsg + '</p>');
        }
        obj.focus(function() {
            clearError($(this));
        });
    }
    function clearError(obj) {
        $(obj).parent('.inputcol').removeClass('error').children('.error-tip').text('');
    }

    //鼠标焦点
    var init_focus = function (focus_key) {
        if (focus_key == 'register') {
            $('#email').focus();
        } else if (focus_key == 'order_status') {
            $('#order_sn').focus();
        } else {
            $('#_email').focus();
        }
    };
    var header_init_focus = function (focus_key) {
        if (focus_key == 'register') {
            $('#header_register_email').focus();
        } else if (focus_key == 'order_status') {
            $('#order_sn').focus();
        } else if(focus_key == 'login') {
            $('#header_login_email').focus();
        } else {
            $('#header_login_email').focus();
        }
    };
    //获取提示邮箱
    var init_email = function () {
        var _url = webData.WEB_ROOT + 'ajax.php?act=get_email_domains&language=' + webData.lang;
        $.ajax({
            type : 'post',
            url : _url,
            success : function (data) {
                data = eval('[' + data + ']')[0];
                if (data != '') {
                    pageData.emailList = data;
                    init_login();
                    header_init_login();
                    init_register();
                    header_init_register();
                }
            }
        })
    }

    var check_is_https = function () {
        var targetProtocol = "https:";
        if (window.location.protocol != targetProtocol) {
            window.location.href = targetProtocol +
                window.location.href.substring(window.location.protocol.length);
            return false
        }
        return true;
    }

    function initCalendar(selector) {
        var options = $.extend(
            {},                                 
            $.datepicker.regional[webData.lang],
            { 
                dateFormat: "yy-mm-dd",
                minDate: '+1d',
                changeYear: false,
            
            } // your custom options
        );
        $(selector).datepicker(options);
    $(selector).wrap('<div style="position: relative; height:100%;"></div>')
        .after('<span class="ui-icon-calendar-register"></span>');
        initCalendarClick(selector);
}

function initCalendarClick(select) {
        $('.ui-icon-calendar-register').bind('click',function () {
            console.log(2020)
            $(select).focus();
        })
}

$(function () {
    if(window.initedDatepicker) {
        return
    }
    window.initedDatepicker = true
    // initCalendar('#datepicker_header');
    initCalendar('#datepicker_page');
    // initCalendar('#datepicker_pop');
})

    //登陆
    var init_login = function (is_callback) {
        //邮件提示
        $('#_email').autocompleteEmail();

        $('#fbSignBtn').bind('click', function () {
            window.dataLayer.push({'event' : 'pcFbLoginBtnTotalClicks'});
        })

        $('#gmailSignBtn, #showroomGmailSignBtn').bind('click', function () {
            gmailSignin();
            cookie.setCookie('signInGoogle', true, 30);
            window.dataLayer.push({'event' : 'pcgPlusLoginBtnTotalClicks'});
        })

        $.ajax({
            method: "POST",
            url: "/ajax.php",
            dataType: 'json',
            data: {
                act: "initLogin",
                back: pageData.back
            },
            success: function(r) {
                if (r.error == 0) {
                    google_auth_url = r.googleUrl;
                }
            }
        });

        //验证表单及提交
        var elem_form = $('#form_login');
        var items = {
            'login[password]': [
                {type: 'null', errMsg: _lang.page_login_enter_password}
            ]
        };
        var itemsEmail = {
            'login[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };
        var opt = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                                location.href = r.back
                        }, 500);
                    }else {
                            location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msg');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                    });
                }
            }
        }
        $('.login-register #_email').focus(function () {
            var emailObj = $('.login-register #_email');
            emailObj.css('color','#333');
            emailObj.css('border','');
        });

        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msg').html('').hide();
            var httpsRs = check_is_https();
            if (!httpsRs) {
                return false;
            }
            var isChecked = $(this).formCheck(items, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            var isCheckedEmail = $(this).formCheck(itemsEmail, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });

            if (isChecked && isCheckedEmail) {
                elem_form.ajaxSubmit(opt);
            } else if(!isCheckedEmail) {
                var emailObj = $('.login-register .inputcol #_email');
                emailObj.css('color','#fb5058');
                emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
            }
            return false;
        });

        //fackbook登陆
        if(webData.fb_app == '' && webData.gmail_app == '') {
            return;
        }
        window.fbAsyncInit = function() {
            FB.init({
                appId : webData.fb_app,
                status : false,
                cookie : true,
                xfbml : true,
                oauth : true,
                version : 'v2.3'
            });
//            FB.Event.subscribe('auth.statusChange', get_facebook_login);
        };
        if(typeof(FB) == 'undefined') {
            require('../mod/loader').loadSocialJS('facebook');
        }else {
            window.fbAsyncInit();
        }
    };

    //general login
var header_init_login = function (is_callback) {

    //邮件提示
    $('#header_login_email').autocompleteEmail();

    $('#header_login_fbSignBtn').bind('click', function () {
        window.dataLayer.push({'event' : 'pcFbLoginBtnTotalClicks'});
    })

    $('#header_login_gmailSignBtn, #header_login_showroomGmailSignBtn').bind('click', function () {
        gmailSignin();
        cookie.setCookie('signInGoogle', true, 30);
        window.dataLayer.push({'event' : 'pcgPlusLoginBtnTotalClicks'});
    })

    $.ajax({
        method: "POST",
        url: "/ajax.php",
        dataType: 'json',
        data: {
            act: "initLogin",
            back: pageData.back
        },
        success: function(r) {
            if (r.error == 0) {
                google_auth_url = r.googleUrl;
            }
        }
    });

    //验证表单及提交
    var elem_form = $('#header_form_login');
    var items = {
        'login[password]': [
            {type: 'null', errMsg: _lang.page_login_enter_password}
        ]
    };
    var itemsEmail = {
        'login[email]': [
            {type: 'null', errMsg: _lang.page_login_enter_email},
            {type: 'email', errMsg: _lang.page_login_check_email_format}
        ]
    };
    var opt = {
        dataType: 'json',
        success: function (r) {
            if (r.error == 0) {
                if(typeof(callback_func) == 'function') {
                    callback_func.call();
                    // add setTimeout to async the ajax, make the location.href run after the callback function.
                    setTimeout(function() {
                        location.href = r.back
                    }, 500);
                }else {
                    location.href = r.back;
                }
            } else {
                var _msg = $('#header_login_msg');
                _msg.html(r.msg).show();
                elem_form.find(':input').focus(function () {
                    _msg.hide();
                });
            }
        }
    }

    $('#header_login_email').focus(function () {
        var emailObj = $('#header_login_email');
        emailObj.css('color','#333');
        emailObj.css('border','');
    });
    elem_form.submit(function () {
        elem_form.find('.error-tip').html('');
        elem_form.find('#header_login_msg').html('').hide();
        var httpsRs = check_is_https();
        if (!httpsRs) {
            return false;
        }
        var isChecked = $(this).formCheck(items, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            }
        });
        var isCheckedEmail = $(this).formCheck(itemsEmail, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            }
        });

        if (isChecked && isCheckedEmail) {
            elem_form.ajaxSubmit(opt);
        } else if(!isCheckedEmail) {
            var emailObj = $('.login-register .inputcol #header_login_email');
            emailObj.css('color','#fb5058');
            emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
        }
        return false;
    });

    //fackbook登陆
    if(webData.fb_app == '' && webData.gmail_app == '') {
        return;
    }
    window.fbAsyncInit = function() {
        FB.init({
            appId : webData.fb_app,
            status : false,
            cookie : true,
            xfbml : true,
            oauth : true,
            version : 'v2.3'
        });
    //FB.Event.subscribe('auth.statusChange', get_facebook_login);
    };
    if(typeof(FB) == 'undefined') {
        require('../mod/loader').loadSocialJS('facebook');
    }else {
        window.fbAsyncInit();
    }
};

    function gmailSignin() {
        openInPopup(google_auth_url, 'google_auth', 600, 500);
    }

    var facebook_login_email_registered = function () {
        var email = $('#_email').val();
        var password = $('#_password').val();
        if (!email) {
            alert(_lang.page_login_enter_email);
        } else if (!password) {
            alert(_lang.page_login_enter_password);
        } else {
            var login = {
                'email': email,
                'password': password
            };
            $.ajax({
                'type': 'POST',
                'url': webData.WEB_ROOT + 'ajax.php',
                'data': 'act=login&login[email]=' + login.email + '&login[password]=' + login.password + '&from=facebook' + '&back=' + back_url,
                'dataType': 'json',
                'success': function(r) {
                    if (r.error == 0) {
                        setTimeout(function () {
                            location.href = changeWriteReviewUrl();
                        }, 500);
                    } else {
                        alert(r.msg);
                        revertWriteReviewUrl();
                    }
                }
            });
        }
    }

    //注册
    var init_register = function (is_callback) {
        var elem_form = $('#form_reg');
        var ipt_email = $('#email');
        var btnContinue = $('#continue-btn');

        //绑定continue显示注册窗口
        btnContinue.bind('click',function () {
            elem_form.show();
            btnContinue.hide();
        });

        //邮件提示
        ipt_email.autocompleteEmail();

        //验证邮箱是否被占用
        var email_wait =  $('#regEmailValWait');
        var checkEmailExists = function () {
            elem_form.formCheck({
                'reg[email]': [
                    {type: 'null', showError: function () {}, noFocus: true},
                    {type: 'email', showError: function () {}, noFocus: true},
                    {type: 'availEmail', noFocus: true}
                ]
            }, {
                rules: {
                    availEmail: function (obj, checks) {
                        $.ajax({
                            type: 'POST',
                            url: webData.WEB_ROOT + 'ajax.php?act=register',
                            data: {'email': $(obj).val(), 'checkEmail': 1},
                            dataType: 'json',
                            beforeSend: function () {
                                // email_wait.show();
                            },
                            complete: function() {
                                // email_wait.hide();
                            },
                            success: function (r) {
                                if (r.error == 0) {
                                    clearError(obj);
                                } else {
                                    showError(obj, r.msg);
                                }
                            }
                        });
                    }
                }
            });
        };
        // ipt_email.change(checkEmailExists);
        ipt_email.blur(checkEmailExists);
        ipt_email.focus(function () {
            ipt_email.css('color','#333');
            ipt_email.css('border','');
        });
        //验证表单及提交
        var itemsx = {
            'reg[password]': [
                {type: 'null', errMsg: _lang.page_login_enter_password},
                {type: 'minlength', minlength: 5, errMsg: _lang.page_register_pwd_minimum_5}
            ],
            'reg[password_again]': [
                {type: 'null', errMsg: _lang.page_login_reenter_password},
                {type: 'matchPassword', errMsg: _lang.page_register_pwd_not_match}
            ],
            'terms': [
                {type: 'checked', value: -1, errMsg: _lang.page_register_please_agree}
            ]
        };
        //验证表单及提交
        var itemsEmail = {
            'reg[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };

        var optx = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    var use_coupon_register = webData.use_coupon_register;
                    if(use_coupon_register){
                        $('#loginDialog').css("display","none");
                        CouponRegisterDialog.init(r.data.couponCode,r.back);
                        return false;
                    }
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msgx');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                        return true;
                    });
                }
            }
        }
        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msgx').html('').hide();

            var isChecked = $(this).formCheck(itemsx, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                },
                rules: {
                    matchPassword: function (obj, checks) {
                        return $(obj).val() == elem_form.find('#password').val();
                    }
                }
            });
            var isCheckedEmail = $(this).formCheck(itemsEmail, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            if (isChecked && isCheckedEmail) {
                elem_form.ajaxSubmit(optx);
            } else if(!isCheckedEmail){
                var emailObj = $('.login-register .inputcol #email');
                emailObj.css('color','#fb5058');
                emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
            }
            return false;
        });
        return true;
    };

    //general register
    var header_init_register = function (is_callback) {
    var elem_form = $('#header_form_reg');
    var ipt_email = $('#header_register_email');
    // var btnContinue = $('#header_continue-btn');

    //绑定continue显示注册窗口
    // btnContinue.bind('click',function () {
    //     elem_form.show();
    //     btnContinue.hide();
    // });

    //邮件提示
    ipt_email.autocompleteEmail();

    //验证邮箱是否被占用
    var email_wait =  $('#header_regEmailValWait');
    var checkEmailExists = function () {
        elem_form.formCheck({
            'reg[email]': [
                {type: 'null', showError: function () {}, noFocus: true},
                {type: 'email', showError: function () {}, noFocus: true},
                {type: 'availEmail', noFocus: true}
            ]
        }, {
            rules: {
                availEmail: function (obj, checks) {
                    $.ajax({
                        type: 'POST',
                        url: webData.WEB_ROOT + 'ajax.php?act=register',
                        data: {'email': $(obj).val(), 'checkEmail': 1},
                        dataType: 'json',
                        beforeSend: function () {
                            //email_wait.show();
                        },
                        complete: function() {
                            //email_wait.hide();
                        },
                        success: function (r) {
                            if (r.error == 0) {
                                clearError(obj);
                            } else {
                                showError(obj, r.msg);
                            }
                        }
                    });
                }
            }
        });
    };
    // ipt_email.change(checkEmailExists);
    ipt_email.blur(checkEmailExists);
    ipt_email.focus(function () {
        ipt_email.css('color','#333');
        ipt_email.css('border','');
    });
    //验证表单及提交
    var itemsx = {
        'reg[password]': [
            {type: 'null', errMsg: _lang.page_login_enter_password},
            {type: 'minlength', minlength: 5, errMsg: _lang.page_register_pwd_minimum_5}
        ],
        'reg[password_again]': [
            {type: 'null', errMsg: _lang.page_login_reenter_password},
            {type: 'matchPassword', errMsg: _lang.page_register_pwd_not_match}
        ],
        'terms': [
            {type: 'checked', value: -1, errMsg: _lang.page_register_please_agree}
        ]
    };
    var itemsEmail = {
        'reg[email]': [
            {type: 'null', errMsg: _lang.page_login_enter_email},
            {type: 'email', errMsg: _lang.page_login_check_email_format}
        ],
    };

    var optx = {
        dataType: 'json',
        success: function (r) {
            if (r.error == 0) {
                var use_coupon_register = webData.use_coupon_register;
                if(use_coupon_register){
                    $('#header_loginDialog').css("display","none");
                    CouponRegisterDialog.init(r.data.couponCode,r.back);
                    return false;
                }
                if(typeof(callback_func) == 'function') {
                    callback_func.call();
                    // add setTimeout to async the ajax, make the location.href run after the callback function.
                    setTimeout(function() {
                        location.href = r.back
                    }, 500);
                }else {
                    location.href = r.back;
                }
            } else {
                var _msg = $('#header_register_msgx');
                _msg.html(r.msg).show();
                elem_form.find(':input').focus(function () {
                    _msg.hide();
                });
            }
        }
    }
    elem_form.submit(function () {
        elem_form.find('.error-tip').html('');
        elem_form.find('#header_login_msg').html('').hide();

        var isChecked = $(this).formCheck(itemsx, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            },
            rules: {
                matchPassword: function (obj, checks) {
                    return $(obj).val() == elem_form.find('#header_register_password').val();
                }
            }
        });
        var isCheckedEmail = $(this).formCheck(itemsEmail, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            },
        });
        if (isChecked && isCheckedEmail) {
            elem_form.ajaxSubmit(optx);
        } else if(!isCheckedEmail) {
            ipt_email.css('color','#fb5058');
            ipt_email.val() !== '' && ipt_email.css('border','1px solid #fb5058');
        }
        return false;
    });

};
    // 匿名下单
    var init_login_guest = function () {
        var elem_form = $('#form_login_guest');

        //验证表单及提交
        var itemsx = {
            'guest[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };

        var optx = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msgx');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                    });
                }
            }
        }
        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msgx').html('').hide();

            var isChecked = $(this).formCheck(itemsx, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            if (isChecked) {
                elem_form.ajaxSubmit(optx);
            }
            return false;
        });

    };

    function facebook_login(email,back_url) {
        $.post(webData.WEB_ROOT + 'ajax.php', {
            'act': 'register',
            'from': 'facebook',
            'back': back_url,
            'email': email
        }, function (r) {
            if (r.error == 0) {
                setTimeout(function () {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                }, 500);
                window.dataLayer.push({'event' : 'pcNotBindFbLoginSucceed'});
            } else {
                // for fail
                window.dataLayer.push({'event' : 'pcNotBindFbLoginFailed'});
            }
        }, 'json');
    }

    function get_facebook_login() {
        var Dialog = require('../mod/dialog');
        //for facebook login dialog not center on ff
        window.open = openInPopup;
        FB.login(function(response) {
            if (response.status == "connected" && response.authResponse) {
                $("#loginDialog").hide();
                window.open = window.originOpen;
                var fbWaiteDialog = '<div id="fbWaiteDialog" >'
                    + '<h1 class="sign-with-facebook">' + _lang.page_login_login_with_facebook + '</h1>'
                    + '<div class="please-waite">' + _lang.page_login_you_have_logged_on_facebook + '</div>'
                    + '</div>';
                Dialog.open({
                    'modId':'fbWaiting',
                    'html':fbWaiteDialog,
                    'canClose': false
                });
                var back = changeWriteReviewUrl()
                $.post(webData.WEB_ROOT + 'ajax.php', {
                    'act': 'register',
                    'from': 'facebook',
                    'back': back
                }, function (r) {
                    if ($('#loginDialog').css("display") == 'none') {
                        revertWriteReviewUrl();
                    }
                    if (r.error == 0) {
                        revertWriteReviewUrl();
                        setTimeout(function () {
                            if(typeof(callback_func) == 'function') {
                                callback_func.call();
                                // add setTimeout to async the ajax, make the location.href run after the callback function.
                                setTimeout(function() {
                                    location.href = r.back
                                }, 500);
                            }else {
                                    location.href = r.back;
                            }
                        }, 500);
                    } else if (r.error == 2) {
                        $("#fbWaiting").hide();
                        $("#loginDialog").hide();
                        var fbEmailDialog = '<form id="fbEmailDialog" >'
                            + '<div class="mainContent">'
                            + '<p class="congratulate">' + _lang.page_sns_jjshouse_congratulations + '</p>'
                            + '<p class="provide">' + _lang.page_sns_jjshouse_provide_email + '</p>'
                            + '<p class="email">' + _lang.page_sns_jjshouse_email_address + '</p>'
                            + '<input id="facebookEmail" name="fbEmail" type="text"/>'
                            + '<p class="note">' + _lang.page_sns_jjshouse_email_note + '</p>'
                            + '</div>'
                            + '<div class="btn-group">'
                            + '<div id="submit">' + _lang.page_sbumit + '</div>'
                            + '<div id="cancel">' + _lang.page_common_cancel + '</div>'
                            + '</div>'
                            + '</form>';
                        Dialog.open({
                            'modId':'fbDialog',
                            'html':fbEmailDialog
                        });
                        var emailDialog = $('#fbEmailDialog');
                        var facebookEmail = emailDialog.find('#facebookEmail');
                        var btnSummit = emailDialog.find('#submit');
                        var btnCancel = emailDialog.find('#cancel');
                        var fbmsg = $('#fbmsg');
                        facebookEmail.bind('keydown',function (e) {
                            var unicode = e.keyCode ? e.keyCode : e.charCode;
                            if (unicode == 13) {
                                btnSummit.click();
                                return false;
                            }
                        })
                        emailDialog.find(':input').focus(function () {
                            fbmsg.hide();
                        });
                        btnCancel.bind('click',function () {
                            Dialog.close('#fbDialog',true);
                        });
                        btnSummit.bind('click',function () {
                            var email = facebookEmail.val();
                            var fbLoginDialog = '<div id="floatingSign">'
                                + '<div class="tabbable">'
                                + '<div class="tab-content">'
                                + '<div class="tab-pane active" id="loginPane">'
                                + '<div id="emailRegisteredTips">'
                                + '<p><a class="emailRegisteredImg"></a>'
                                + _lang.page_email_registered + email + _lang.page_sign_with_email_and_password
                                + '</p>'
                                + '</div>'
                                + '<form action=' + webData.WEB_ROOT + 'ajax.php' + ' method="post" name="form_facebook_login" id="form_facebook_login" autocomplete="off">'
                                + '<label for="_email">' + _lang.page_login_email + ':</label>'
                                + '<input type="text" name="login[email]" id="_email" value="' + email + '" maxlength="96" autocomplete="off">'
                                + '<label for="_password">' + _lang.page_login_password + ':</label>'
                                + '<input type="password" name="login[password]" id="_password" maxlength="40">'
                                + '<p class="footRegion">'
                                + '<button type="button" class="btn btn-success btn-large" onclick="pageData.loginModule.facebook_login_email_registered()">' + _lang.page_login_sign_in + '</button>'
                                + '<span id="forgotPwd"><a target="_blank" href="' + webData.WEB_ROOT + 'forgotpassword.php" title="' + _lang.page_login_forgot_tip + '">' + _lang.page_login_forgot_tip + '</a></span>'
                                + '</p>'
                                + '</form>'
                                + '</div>'
                                + '</div>'
                                + '</div>'
                                + '</div>';
                            var check = emailDialog.formCheck({
                                    'fbEmail': [
                                        {type: 'null', errMsg: _lang.page_login_enter_email},
                                        {type: 'email', errMsg: _lang.page_login_check_email_format}
                                    ]
                                }, {
                                    showError : function (obj, errMsg) {
                                        showError(obj, errMsg);
                                    }
                                });
                            if (check) {
                                $.ajax({
                                    'type': 'POST',
                                    'async': false,
                                    'url': webData.WEB_ROOT + 'ajax.php',
                                    'data': 'act=checkEmailRegistered&email=' + email + '&back=' + back_url,
                                    'cache': true,
                                    'dataType': 'json',
                                    'success': function(r) {
                                        if (r.error == 1) {
                                            Dialog.close('#fbDialog',true);
                                            Dialog.open({'modId':'fbLoginDialog', html: fbLoginDialog});
                                        } else {
                                            $('#submit').text(_lang.page_order_progress_processing).attr('disabled',true);
                                            facebook_login(r.email,r.back);
                                        }
                                    }
                                });
                            }
                        });
                    } else {
                        $("#loginDialog").show();
                        $("#fbDialog").hide();
                        $("#fbWaiting").hide();
                        var _msg = $('#_msg');
                        var elem_form = $('#form_login');
                        _msg.html(r.msg).show();
                        elem_form.find(':input').focus(function () {
                            _msg.hide();
                        });
                        window.dataLayer.push({'event' : 'pcNotBindFbLoginFailed'});
                        if ($('#loginDialog').css("display") == 'none') {
                            revertWriteReviewUrl();
                        }
                    }
                }, 'json');
            } else {
                if ($('#loginDialog').css("display") == 'none') {
                    revertWriteReviewUrl();
                }
            }
        },{scope: 'email'});
    }

    // 绑定回调函数
    var callback_func;

    var init_callback = function (callback)    {
        callback_func = callback;
    };

    //登陆注册页面事件绑定
    var init = function() {
        if(window.initedLoginJs) {
            return
        }
        window.initedLoginJs = true
        init_email();
        init_login_guest();
        init_focus(pageData.focus_key);
        header_init_focus(pageData.focus_key);
    };

    module.exports = {
        "init": init,
        "init_login": init_login,
        "init_email": init_email,
        "init_register": init_register,
        "init_login_guest": init_login_guest,
        "get_facebook_login": get_facebook_login,
        "facebook_login_email_registered": facebook_login_email_registered,
        "init_callback": init_callback,
        "init_calendar": initCalendar,
        "init_calendar_click": initCalendarClick,
    };

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvcGFnZXMvbG9naW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcblxyXG4gICAgdmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblxyXG4gICAgcmVxdWlyZSgnLi4vbGliL2pxdWVyeUZvcm0nKTtcclxuICAgIHJlcXVpcmUoJy4uL2xpYi9qbW9kYWwnKTtcclxuICAgIHJlcXVpcmUoJy4uL21vZC9hdXRvY29tcGxldGVFbWFpbCcpO1xyXG4gICAgcmVxdWlyZSgnLi4vbW9kL2Zvcm1DaGVjaycpO1xyXG4gICAgdmFyIG9wZW5JblBvcHVwID0gcmVxdWlyZSgnLi4vbW9kL29wZW5JblBvcHVwJyk7XHJcbiAgICB2YXIgQ291cG9uUmVnaXN0ZXJEaWFsb2cgPSByZXF1aXJlKCcuLi9tb2QvY291cG9uX3JlZ2lzdGVyX2RpYWxvZycpO1xyXG4gICAgdmFyIENvb2tpZSA9IHJlcXVpcmUoJy4uL21vZC9jb29raWUnKTtcclxuICAgIHJlcXVpcmUoJy4uL2xpYi9qUXVlcnlEYXRlUGlja2VyJyk7XHJcbiAgICByZXF1aXJlKCcuLi9saWIvanF1ZXJ5LXVpLWkxOC5taW4nKTtcclxuICAgIHZhciBjb29raWUgPSBuZXcgQ29va2llKCk7XHJcblxyXG4gICAgdmFyIGJhY2tfdXJsID0gKHBhZ2VEYXRhICYmIHBhZ2VEYXRhLmJhY2spID8gcGFnZURhdGEuYmFjayA6IGxvY2F0aW9uLmhyZWY7XHJcbiAgICB2YXIgYW5jaG9yUG9zID0gYmFja191cmwuaW5kZXhPZignIycpO1xyXG4gICAgdmFyIGJhY2tfdXJsID0gYmFja191cmwuc3Vic3RyKDAsIGFuY2hvclBvcyA+IDAgPyBhbmNob3JQb3MgOiBiYWNrX3VybC5sZW5ndGgpO1xyXG4gICAgdmFyIGdvb2dsZV9hdXRoX3VybCA9IHBhZ2VEYXRhLmdvb2dsZV9hdXRoX3VybDtcclxuXHJcbiAgICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcclxuXHJcbiAgICBpZiAocGFnZURhdGEgJiYgcGFnZURhdGEuaXNDaGVja291dExvZ2luKSB7XHJcbiAgICAgICAgYmFja191cmwgKz0gJz9pc0xvZ2luQmFjaz0xJztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoYW5nZVdyaXRlUmV2aWV3VXJsKCkge1xyXG4gICAgICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHdpbmRvdy5yZXZpZXcpICYmIHdpbmRvdy5yZXZpZXcuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmV2aWV3LnN0YXR1cyA/IHdpbmRvdy5yZXZpZXcudXJsIDogYmFja191cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiYWNrX3VybDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXZlcnRXcml0ZVJldmlld1VybCgpIHtcclxuICAgICAgICB3aW5kb3cucmV2aWV3ID0ge1xyXG4gICAgICAgICAgICBzdGF0dXM6IGZhbHNlLFxyXG4gICAgICAgICAgICB1cmw6IHdlYkRhdGEuV0VCX1JPT1RcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy/mmL7npLov5riF6Zmk6ZSZ6K+v5o+Q56S6XHJcbiAgICB2YXIgc2hvd0Vycm9yID0gZnVuY3Rpb24ob2JqLCBlcnJNc2cpIHtcclxuICAgICAgICB2YXIgb2JqID0gJChvYmopO1xyXG4gICAgICAgIGlmIChvYmoucGFyZW50KCkuaGFzQ2xhc3MoJ2lucHV0Y29sJykpIHtcclxuICAgICAgICAgICAgb2JqLnBhcmVudCgpLmFkZENsYXNzKCdlcnJvcicpLmZpbmQoJy5lcnJvci10aXAnKS50ZXh0KGVyck1zZyk7XHJcbiAgICAgICAgICAgIHZhciBlcnJvcl90aXAgPSBvYmoucGFyZW50KCkuZmluZCgnLmVycm9yLXRpcCcpO1xyXG4gICAgICAgICAgICBpZihlcnJvcl90aXAubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JfdGlwLnRleHQoZXJyTXNnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9iai5wYXJlbnQoKS5hcHBlbmQoJyA8cCBjbGFzcz1cImVycm9yLXRpcFwiPicgKyBlcnJNc2cgKyAnPC9wPicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqLndyYXAoJzxkaXYgY2xhc3M9XCJpbnB1dGNvbCBlcnJvclwiPjwvZGl2PicpLnBhcmVudCgpLmFwcGVuZCgnIDxwIGNsYXNzPVwiZXJyb3ItdGlwXCI+JyArIGVyck1zZyArICc8L3A+Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iai5mb2N1cyhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY2xlYXJFcnJvcigkKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3Iob2JqKSB7XHJcbiAgICAgICAgJChvYmopLnBhcmVudCgnLmlucHV0Y29sJykucmVtb3ZlQ2xhc3MoJ2Vycm9yJykuY2hpbGRyZW4oJy5lcnJvci10aXAnKS50ZXh0KCcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvL+m8oOagh+eEpueCuVxyXG4gICAgdmFyIGluaXRfZm9jdXMgPSBmdW5jdGlvbiAoZm9jdXNfa2V5KSB7XHJcbiAgICAgICAgaWYgKGZvY3VzX2tleSA9PSAncmVnaXN0ZXInKSB7XHJcbiAgICAgICAgICAgICQoJyNlbWFpbCcpLmZvY3VzKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmb2N1c19rZXkgPT0gJ29yZGVyX3N0YXR1cycpIHtcclxuICAgICAgICAgICAgJCgnI29yZGVyX3NuJykuZm9jdXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjX2VtYWlsJykuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGhlYWRlcl9pbml0X2ZvY3VzID0gZnVuY3Rpb24gKGZvY3VzX2tleSkge1xyXG4gICAgICAgIGlmIChmb2N1c19rZXkgPT0gJ3JlZ2lzdGVyJykge1xyXG4gICAgICAgICAgICAkKCcjaGVhZGVyX3JlZ2lzdGVyX2VtYWlsJykuZm9jdXMoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZvY3VzX2tleSA9PSAnb3JkZXJfc3RhdHVzJykge1xyXG4gICAgICAgICAgICAkKCcjb3JkZXJfc24nKS5mb2N1cygpO1xyXG4gICAgICAgIH0gZWxzZSBpZihmb2N1c19rZXkgPT0gJ2xvZ2luJykge1xyXG4gICAgICAgICAgICAkKCcjaGVhZGVyX2xvZ2luX2VtYWlsJykuZm9jdXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKCcjaGVhZGVyX2xvZ2luX2VtYWlsJykuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy/ojrflj5bmj5DnpLrpgq7nrrFcclxuICAgIHZhciBpbml0X2VtYWlsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdXJsID0gd2ViRGF0YS5XRUJfUk9PVCArICdhamF4LnBocD9hY3Q9Z2V0X2VtYWlsX2RvbWFpbnMmbGFuZ3VhZ2U9JyArIHdlYkRhdGEubGFuZztcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlIDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmwgOiBfdXJsLFxyXG4gICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBldmFsKCdbJyArIGRhdGEgKyAnXScpWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlRGF0YS5lbWFpbExpc3QgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRfbG9naW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJfaW5pdF9sb2dpbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRfcmVnaXN0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJfaW5pdF9yZWdpc3RlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY2hlY2tfaXNfaHR0cHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldFByb3RvY29sID0gXCJodHRwczpcIjtcclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9IHRhcmdldFByb3RvY29sKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGFyZ2V0UHJvdG9jb2wgK1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYuc3Vic3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5sZW5ndGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdENhbGVuZGFyKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZChcclxuICAgICAgICAgICAge30sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICQuZGF0ZXBpY2tlci5yZWdpb25hbFt3ZWJEYXRhLmxhbmddLFxyXG4gICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJ5eS1tbS1kZFwiLFxyXG4gICAgICAgICAgICAgICAgbWluRGF0ZTogJysxZCcsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyOiBmYWxzZSxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gLy8geW91ciBjdXN0b20gb3B0aW9uc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgJChzZWxlY3RvcikuZGF0ZXBpY2tlcihvcHRpb25zKTtcclxuICAgICQoc2VsZWN0b3IpLndyYXAoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7IGhlaWdodDoxMDAlO1wiPjwvZGl2PicpXHJcbiAgICAgICAgLmFmdGVyKCc8c3BhbiBjbGFzcz1cInVpLWljb24tY2FsZW5kYXItcmVnaXN0ZXJcIj48L3NwYW4+Jyk7XHJcbiAgICAgICAgaW5pdENhbGVuZGFyQ2xpY2soc2VsZWN0b3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0Q2FsZW5kYXJDbGljayhzZWxlY3QpIHtcclxuICAgICAgICAkKCcudWktaWNvbi1jYWxlbmRhci1yZWdpc3RlcicpLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKDIwMjApXHJcbiAgICAgICAgICAgICQoc2VsZWN0KS5mb2N1cygpO1xyXG4gICAgICAgIH0pXHJcbn1cclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYod2luZG93LmluaXRlZERhdGVwaWNrZXIpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHdpbmRvdy5pbml0ZWREYXRlcGlja2VyID0gdHJ1ZVxyXG4gICAgLy8gaW5pdENhbGVuZGFyKCcjZGF0ZXBpY2tlcl9oZWFkZXInKTtcclxuICAgIGluaXRDYWxlbmRhcignI2RhdGVwaWNrZXJfcGFnZScpO1xyXG4gICAgLy8gaW5pdENhbGVuZGFyKCcjZGF0ZXBpY2tlcl9wb3AnKTtcclxufSlcclxuXHJcbiAgICAvL+eZu+mZhlxyXG4gICAgdmFyIGluaXRfbG9naW4gPSBmdW5jdGlvbiAoaXNfY2FsbGJhY2spIHtcclxuICAgICAgICAvL+mCruS7tuaPkOekulxyXG4gICAgICAgICQoJyNfZW1haWwnKS5hdXRvY29tcGxldGVFbWFpbCgpO1xyXG5cclxuICAgICAgICAkKCcjZmJTaWduQnRuJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5kYXRhTGF5ZXIucHVzaCh7J2V2ZW50JyA6ICdwY0ZiTG9naW5CdG5Ub3RhbENsaWNrcyd9KTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAkKCcjZ21haWxTaWduQnRuLCAjc2hvd3Jvb21HbWFpbFNpZ25CdG4nKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ21haWxTaWduaW4oKTtcclxuICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnc2lnbkluR29vZ2xlJywgdHJ1ZSwgMzApO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goeydldmVudCcgOiAncGNnUGx1c0xvZ2luQnRuVG90YWxDbGlja3MnfSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgdXJsOiBcIi9hamF4LnBocFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBhY3Q6IFwiaW5pdExvZ2luXCIsXHJcbiAgICAgICAgICAgICAgICBiYWNrOiBwYWdlRGF0YS5iYWNrXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyLmVycm9yID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBnb29nbGVfYXV0aF91cmwgPSByLmdvb2dsZVVybDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL+mqjOivgeihqOWNleWPiuaPkOS6pFxyXG4gICAgICAgIHZhciBlbGVtX2Zvcm0gPSAkKCcjZm9ybV9sb2dpbicpO1xyXG4gICAgICAgIHZhciBpdGVtcyA9IHtcclxuICAgICAgICAgICAgJ2xvZ2luW3Bhc3N3b3JkXSc6IFtcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnbnVsbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9lbnRlcl9wYXNzd29yZH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGl0ZW1zRW1haWwgPSB7XHJcbiAgICAgICAgICAgICdsb2dpbltlbWFpbF0nOiBbXHJcbiAgICAgICAgICAgICAgICB7dHlwZTogJ251bGwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fZW50ZXJfZW1haWx9LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9jaGVja19lbWFpbF9mb3JtYXR9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBvcHQgPSB7XHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGNhbGxiYWNrX2Z1bmMpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tfZnVuYy5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzZXRUaW1lb3V0IHRvIGFzeW5jIHRoZSBhamF4LCBtYWtlIHRoZSBsb2NhdGlvbi5ocmVmIHJ1biBhZnRlciB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHIuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX21zZyA9ICQoJyNfbXNnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX21zZy5odG1sKHIubXNnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbV9mb3JtLmZpbmQoJzppbnB1dCcpLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21zZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgJCgnLmxvZ2luLXJlZ2lzdGVyICNfZW1haWwnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlbWFpbE9iaiA9ICQoJy5sb2dpbi1yZWdpc3RlciAjX2VtYWlsJyk7XHJcbiAgICAgICAgICAgIGVtYWlsT2JqLmNzcygnY29sb3InLCcjMzMzJyk7XHJcbiAgICAgICAgICAgIGVtYWlsT2JqLmNzcygnYm9yZGVyJywnJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsZW1fZm9ybS5zdWJtaXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbGVtX2Zvcm0uZmluZCgnLmVycm9yLXRpcCcpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICBlbGVtX2Zvcm0uZmluZCgnI19tc2cnKS5odG1sKCcnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIHZhciBodHRwc1JzID0gY2hlY2tfaXNfaHR0cHMoKTtcclxuICAgICAgICAgICAgaWYgKCFodHRwc1JzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZCA9ICQodGhpcykuZm9ybUNoZWNrKGl0ZW1zLCB7XHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3IgOiBmdW5jdGlvbiAob2JqLCBlcnJNc2cpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3Iob2JqLCBlcnJNc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZEVtYWlsID0gJCh0aGlzKS5mb3JtQ2hlY2soaXRlbXNFbWFpbCwge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yIDogZnVuY3Rpb24gKG9iaiwgZXJyTXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNDaGVja2VkICYmIGlzQ2hlY2tlZEVtYWlsKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtX2Zvcm0uYWpheFN1Ym1pdChvcHQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoIWlzQ2hlY2tlZEVtYWlsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW1haWxPYmogPSAkKCcubG9naW4tcmVnaXN0ZXIgLmlucHV0Y29sICNfZW1haWwnKTtcclxuICAgICAgICAgICAgICAgIGVtYWlsT2JqLmNzcygnY29sb3InLCcjZmI1MDU4Jyk7XHJcbiAgICAgICAgICAgICAgICBlbWFpbE9iai52YWwoKSAhPT0gJycgJiYgZW1haWxPYmouY3NzKCdib3JkZXInLCcxcHggc29saWQgI2ZiNTA1OCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9mYWNrYm9va+eZu+mZhlxyXG4gICAgICAgIGlmKHdlYkRhdGEuZmJfYXBwID09ICcnICYmIHdlYkRhdGEuZ21haWxfYXBwID09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LmZiQXN5bmNJbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIEZCLmluaXQoe1xyXG4gICAgICAgICAgICAgICAgYXBwSWQgOiB3ZWJEYXRhLmZiX2FwcCxcclxuICAgICAgICAgICAgICAgIHN0YXR1cyA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29va2llIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHhmYm1sIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9hdXRoIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHZlcnNpb24gOiAndjIuMydcclxuICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgRkIuRXZlbnQuc3Vic2NyaWJlKCdhdXRoLnN0YXR1c0NoYW5nZScsIGdldF9mYWNlYm9va19sb2dpbik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZih0eXBlb2YoRkIpID09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJlcXVpcmUoJy4uL21vZC9sb2FkZXInKS5sb2FkU29jaWFsSlMoJ2ZhY2Vib29rJyk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cuZmJBc3luY0luaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vZ2VuZXJhbCBsb2dpblxyXG52YXIgaGVhZGVyX2luaXRfbG9naW4gPSBmdW5jdGlvbiAoaXNfY2FsbGJhY2spIHtcclxuXHJcbiAgICAvL+mCruS7tuaPkOekulxyXG4gICAgJCgnI2hlYWRlcl9sb2dpbl9lbWFpbCcpLmF1dG9jb21wbGV0ZUVtYWlsKCk7XHJcblxyXG4gICAgJCgnI2hlYWRlcl9sb2dpbl9mYlNpZ25CdG4nKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goeydldmVudCcgOiAncGNGYkxvZ2luQnRuVG90YWxDbGlja3MnfSk7XHJcbiAgICB9KVxyXG5cclxuICAgICQoJyNoZWFkZXJfbG9naW5fZ21haWxTaWduQnRuLCAjaGVhZGVyX2xvZ2luX3Nob3dyb29tR21haWxTaWduQnRuJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZ21haWxTaWduaW4oKTtcclxuICAgICAgICBjb29raWUuc2V0Q29va2llKCdzaWduSW5Hb29nbGUnLCB0cnVlLCAzMCk7XHJcbiAgICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHsnZXZlbnQnIDogJ3BjZ1BsdXNMb2dpbkJ0blRvdGFsQ2xpY2tzJ30pO1xyXG4gICAgfSlcclxuXHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgdXJsOiBcIi9hamF4LnBocFwiLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBhY3Q6IFwiaW5pdExvZ2luXCIsXHJcbiAgICAgICAgICAgIGJhY2s6IHBhZ2VEYXRhLmJhY2tcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZ29vZ2xlX2F1dGhfdXJsID0gci5nb29nbGVVcmw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL+mqjOivgeihqOWNleWPiuaPkOS6pFxyXG4gICAgdmFyIGVsZW1fZm9ybSA9ICQoJyNoZWFkZXJfZm9ybV9sb2dpbicpO1xyXG4gICAgdmFyIGl0ZW1zID0ge1xyXG4gICAgICAgICdsb2dpbltwYXNzd29yZF0nOiBbXHJcbiAgICAgICAgICAgIHt0eXBlOiAnbnVsbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9lbnRlcl9wYXNzd29yZH1cclxuICAgICAgICBdXHJcbiAgICB9O1xyXG4gICAgdmFyIGl0ZW1zRW1haWwgPSB7XHJcbiAgICAgICAgJ2xvZ2luW2VtYWlsXSc6IFtcclxuICAgICAgICAgICAge3R5cGU6ICdudWxsJywgZXJyTXNnOiBfbGFuZy5wYWdlX2xvZ2luX2VudGVyX2VtYWlsfSxcclxuICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9jaGVja19lbWFpbF9mb3JtYXR9XHJcbiAgICAgICAgXVxyXG4gICAgfTtcclxuICAgIHZhciBvcHQgPSB7XHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YoY2FsbGJhY2tfZnVuYykgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrX2Z1bmMuY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzZXRUaW1lb3V0IHRvIGFzeW5jIHRoZSBhamF4LCBtYWtlIHRoZSBsb2NhdGlvbi5ocmVmIHJ1biBhZnRlciB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHIuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHIuYmFjaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBfbXNnID0gJCgnI2hlYWRlcl9sb2dpbl9tc2cnKTtcclxuICAgICAgICAgICAgICAgIF9tc2cuaHRtbChyLm1zZykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgZWxlbV9mb3JtLmZpbmQoJzppbnB1dCcpLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfbXNnLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICQoJyNoZWFkZXJfbG9naW5fZW1haWwnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVtYWlsT2JqID0gJCgnI2hlYWRlcl9sb2dpbl9lbWFpbCcpO1xyXG4gICAgICAgIGVtYWlsT2JqLmNzcygnY29sb3InLCcjMzMzJyk7XHJcbiAgICAgICAgZW1haWxPYmouY3NzKCdib3JkZXInLCcnKTtcclxuICAgIH0pO1xyXG4gICAgZWxlbV9mb3JtLnN1Ym1pdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZWxlbV9mb3JtLmZpbmQoJy5lcnJvci10aXAnKS5odG1sKCcnKTtcclxuICAgICAgICBlbGVtX2Zvcm0uZmluZCgnI2hlYWRlcl9sb2dpbl9tc2cnKS5odG1sKCcnKS5oaWRlKCk7XHJcbiAgICAgICAgdmFyIGh0dHBzUnMgPSBjaGVja19pc19odHRwcygpO1xyXG4gICAgICAgIGlmICghaHR0cHNScykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpc0NoZWNrZWQgPSAkKHRoaXMpLmZvcm1DaGVjayhpdGVtcywge1xyXG4gICAgICAgICAgICBzaG93RXJyb3IgOiBmdW5jdGlvbiAob2JqLCBlcnJNc2cpIHtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcihvYmosIGVyck1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgaXNDaGVja2VkRW1haWwgPSAkKHRoaXMpLmZvcm1DaGVjayhpdGVtc0VtYWlsLCB7XHJcbiAgICAgICAgICAgIHNob3dFcnJvciA6IGZ1bmN0aW9uIChvYmosIGVyck1zZykge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoaXNDaGVja2VkICYmIGlzQ2hlY2tlZEVtYWlsKSB7XHJcbiAgICAgICAgICAgIGVsZW1fZm9ybS5hamF4U3VibWl0KG9wdCk7XHJcbiAgICAgICAgfSBlbHNlIGlmKCFpc0NoZWNrZWRFbWFpbCkge1xyXG4gICAgICAgICAgICB2YXIgZW1haWxPYmogPSAkKCcubG9naW4tcmVnaXN0ZXIgLmlucHV0Y29sICNoZWFkZXJfbG9naW5fZW1haWwnKTtcclxuICAgICAgICAgICAgZW1haWxPYmouY3NzKCdjb2xvcicsJyNmYjUwNTgnKTtcclxuICAgICAgICAgICAgZW1haWxPYmoudmFsKCkgIT09ICcnICYmIGVtYWlsT2JqLmNzcygnYm9yZGVyJywnMXB4IHNvbGlkICNmYjUwNTgnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9mYWNrYm9va+eZu+mZhlxyXG4gICAgaWYod2ViRGF0YS5mYl9hcHAgPT0gJycgJiYgd2ViRGF0YS5nbWFpbF9hcHAgPT0gJycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBGQi5pbml0KHtcclxuICAgICAgICAgICAgYXBwSWQgOiB3ZWJEYXRhLmZiX2FwcCxcclxuICAgICAgICAgICAgc3RhdHVzIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvb2tpZSA6IHRydWUsXHJcbiAgICAgICAgICAgIHhmYm1sIDogdHJ1ZSxcclxuICAgICAgICAgICAgb2F1dGggOiB0cnVlLFxyXG4gICAgICAgICAgICB2ZXJzaW9uIDogJ3YyLjMnXHJcbiAgICAgICAgfSk7XHJcbiAgICAvL0ZCLkV2ZW50LnN1YnNjcmliZSgnYXV0aC5zdGF0dXNDaGFuZ2UnLCBnZXRfZmFjZWJvb2tfbG9naW4pO1xyXG4gICAgfTtcclxuICAgIGlmKHR5cGVvZihGQikgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXF1aXJlKCcuLi9tb2QvbG9hZGVyJykubG9hZFNvY2lhbEpTKCdmYWNlYm9vaycpO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5mYkFzeW5jSW5pdCgpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuICAgIGZ1bmN0aW9uIGdtYWlsU2lnbmluKCkge1xyXG4gICAgICAgIG9wZW5JblBvcHVwKGdvb2dsZV9hdXRoX3VybCwgJ2dvb2dsZV9hdXRoJywgNjAwLCA1MDApO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBmYWNlYm9va19sb2dpbl9lbWFpbF9yZWdpc3RlcmVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbWFpbCA9ICQoJyNfZW1haWwnKS52YWwoKTtcclxuICAgICAgICB2YXIgcGFzc3dvcmQgPSAkKCcjX3Bhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgaWYgKCFlbWFpbCkge1xyXG4gICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2xvZ2luX2VudGVyX2VtYWlsKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFwYXNzd29yZCkge1xyXG4gICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2xvZ2luX2VudGVyX3Bhc3N3b3JkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbG9naW4gPSB7XHJcbiAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICdwYXNzd29yZCc6IHBhc3N3b3JkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICd1cmwnOiB3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwJyxcclxuICAgICAgICAgICAgICAgICdkYXRhJzogJ2FjdD1sb2dpbiZsb2dpbltlbWFpbF09JyArIGxvZ2luLmVtYWlsICsgJyZsb2dpbltwYXNzd29yZF09JyArIGxvZ2luLnBhc3N3b3JkICsgJyZmcm9tPWZhY2Vib29rJyArICcmYmFjaz0nICsgYmFja191cmwsXHJcbiAgICAgICAgICAgICAgICAnZGF0YVR5cGUnOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGNoYW5nZVdyaXRlUmV2aWV3VXJsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoci5tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZlcnRXcml0ZVJldmlld1VybCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8v5rOo5YaMXHJcbiAgICB2YXIgaW5pdF9yZWdpc3RlciA9IGZ1bmN0aW9uIChpc19jYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBlbGVtX2Zvcm0gPSAkKCcjZm9ybV9yZWcnKTtcclxuICAgICAgICB2YXIgaXB0X2VtYWlsID0gJCgnI2VtYWlsJyk7XHJcbiAgICAgICAgdmFyIGJ0bkNvbnRpbnVlID0gJCgnI2NvbnRpbnVlLWJ0bicpO1xyXG5cclxuICAgICAgICAvL+e7keWummNvbnRpbnVl5pi+56S65rOo5YaM56qX5Y+jXHJcbiAgICAgICAgYnRuQ29udGludWUuYmluZCgnY2xpY2snLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZWxlbV9mb3JtLnNob3coKTtcclxuICAgICAgICAgICAgYnRuQ29udGludWUuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL+mCruS7tuaPkOekulxyXG4gICAgICAgIGlwdF9lbWFpbC5hdXRvY29tcGxldGVFbWFpbCgpO1xyXG5cclxuICAgICAgICAvL+mqjOivgemCrueuseaYr+WQpuiiq+WNoOeUqFxyXG4gICAgICAgIHZhciBlbWFpbF93YWl0ID0gICQoJyNyZWdFbWFpbFZhbFdhaXQnKTtcclxuICAgICAgICB2YXIgY2hlY2tFbWFpbEV4aXN0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZWxlbV9mb3JtLmZvcm1DaGVjayh7XHJcbiAgICAgICAgICAgICAgICAncmVnW2VtYWlsXSc6IFtcclxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogJ251bGwnLCBzaG93RXJyb3I6IGZ1bmN0aW9uICgpIHt9LCBub0ZvY3VzOiB0cnVlfSxcclxuICAgICAgICAgICAgICAgICAgICB7dHlwZTogJ2VtYWlsJywgc2hvd0Vycm9yOiBmdW5jdGlvbiAoKSB7fSwgbm9Gb2N1czogdHJ1ZX0sXHJcbiAgICAgICAgICAgICAgICAgICAge3R5cGU6ICdhdmFpbEVtYWlsJywgbm9Gb2N1czogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbEVtYWlsOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogd2ViRGF0YS5XRUJfUk9PVCArICdhamF4LnBocD9hY3Q9cmVnaXN0ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeydlbWFpbCc6ICQob2JqKS52YWwoKSwgJ2NoZWNrRW1haWwnOiAxfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW1haWxfd2FpdC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVtYWlsX3dhaXQuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckVycm9yKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgci5tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGlwdF9lbWFpbC5jaGFuZ2UoY2hlY2tFbWFpbEV4aXN0cyk7XHJcbiAgICAgICAgaXB0X2VtYWlsLmJsdXIoY2hlY2tFbWFpbEV4aXN0cyk7XHJcbiAgICAgICAgaXB0X2VtYWlsLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaXB0X2VtYWlsLmNzcygnY29sb3InLCcjMzMzJyk7XHJcbiAgICAgICAgICAgIGlwdF9lbWFpbC5jc3MoJ2JvcmRlcicsJycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8v6aqM6K+B6KGo5Y2V5Y+K5o+Q5LqkXHJcbiAgICAgICAgdmFyIGl0ZW1zeCA9IHtcclxuICAgICAgICAgICAgJ3JlZ1twYXNzd29yZF0nOiBbXHJcbiAgICAgICAgICAgICAgICB7dHlwZTogJ251bGwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fZW50ZXJfcGFzc3dvcmR9LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdtaW5sZW5ndGgnLCBtaW5sZW5ndGg6IDUsIGVyck1zZzogX2xhbmcucGFnZV9yZWdpc3Rlcl9wd2RfbWluaW11bV81fVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAncmVnW3Bhc3N3b3JkX2FnYWluXSc6IFtcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnbnVsbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9yZWVudGVyX3Bhc3N3b3JkfSxcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnbWF0Y2hQYXNzd29yZCcsIGVyck1zZzogX2xhbmcucGFnZV9yZWdpc3Rlcl9wd2Rfbm90X21hdGNofVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAndGVybXMnOiBbXHJcbiAgICAgICAgICAgICAgICB7dHlwZTogJ2NoZWNrZWQnLCB2YWx1ZTogLTEsIGVyck1zZzogX2xhbmcucGFnZV9yZWdpc3Rlcl9wbGVhc2VfYWdyZWV9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8v6aqM6K+B6KGo5Y2V5Y+K5o+Q5LqkXHJcbiAgICAgICAgdmFyIGl0ZW1zRW1haWwgPSB7XHJcbiAgICAgICAgICAgICdyZWdbZW1haWxdJzogW1xyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdudWxsJywgZXJyTXNnOiBfbGFuZy5wYWdlX2xvZ2luX2VudGVyX2VtYWlsfSxcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnZW1haWwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fY2hlY2tfZW1haWxfZm9ybWF0fVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG9wdHggPSB7XHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZV9jb3Vwb25fcmVnaXN0ZXIgPSB3ZWJEYXRhLnVzZV9jb3Vwb25fcmVnaXN0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodXNlX2NvdXBvbl9yZWdpc3Rlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsb2dpbkRpYWxvZycpLmNzcyhcImRpc3BsYXlcIixcIm5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvdXBvblJlZ2lzdGVyRGlhbG9nLmluaXQoci5kYXRhLmNvdXBvbkNvZGUsci5iYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoY2FsbGJhY2tfZnVuYykgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja19mdW5jLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHNldFRpbWVvdXQgdG8gYXN5bmMgdGhlIGFqYXgsIG1ha2UgdGhlIGxvY2F0aW9uLmhyZWYgcnVuIGFmdGVyIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX21zZyA9ICQoJyNfbXNneCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9tc2cuaHRtbChyLm1zZykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1fZm9ybS5maW5kKCc6aW5wdXQnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tc2cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbGVtX2Zvcm0uc3VibWl0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZWxlbV9mb3JtLmZpbmQoJy5lcnJvci10aXAnKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgZWxlbV9mb3JtLmZpbmQoJyNfbXNneCcpLmh0bWwoJycpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBpc0NoZWNrZWQgPSAkKHRoaXMpLmZvcm1DaGVjayhpdGVtc3gsIHtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvciA6IGZ1bmN0aW9uIChvYmosIGVyck1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dFcnJvcihvYmosIGVyck1zZyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaFBhc3N3b3JkOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQob2JqKS52YWwoKSA9PSBlbGVtX2Zvcm0uZmluZCgnI3Bhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZEVtYWlsID0gJCh0aGlzKS5mb3JtQ2hlY2soaXRlbXNFbWFpbCwge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yIDogZnVuY3Rpb24gKG9iaiwgZXJyTXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChpc0NoZWNrZWQgJiYgaXNDaGVja2VkRW1haWwpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1fZm9ybS5hamF4U3VibWl0KG9wdHgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoIWlzQ2hlY2tlZEVtYWlsKXtcclxuICAgICAgICAgICAgICAgIHZhciBlbWFpbE9iaiA9ICQoJy5sb2dpbi1yZWdpc3RlciAuaW5wdXRjb2wgI2VtYWlsJyk7XHJcbiAgICAgICAgICAgICAgICBlbWFpbE9iai5jc3MoJ2NvbG9yJywnI2ZiNTA1OCcpO1xyXG4gICAgICAgICAgICAgICAgZW1haWxPYmoudmFsKCkgIT09ICcnICYmIGVtYWlsT2JqLmNzcygnYm9yZGVyJywnMXB4IHNvbGlkICNmYjUwNTgnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vZ2VuZXJhbCByZWdpc3RlclxyXG4gICAgdmFyIGhlYWRlcl9pbml0X3JlZ2lzdGVyID0gZnVuY3Rpb24gKGlzX2NhbGxiYWNrKSB7XHJcbiAgICB2YXIgZWxlbV9mb3JtID0gJCgnI2hlYWRlcl9mb3JtX3JlZycpO1xyXG4gICAgdmFyIGlwdF9lbWFpbCA9ICQoJyNoZWFkZXJfcmVnaXN0ZXJfZW1haWwnKTtcclxuICAgIC8vIHZhciBidG5Db250aW51ZSA9ICQoJyNoZWFkZXJfY29udGludWUtYnRuJyk7XHJcblxyXG4gICAgLy/nu5Hlrppjb250aW51ZeaYvuekuuazqOWGjOeql+WPo1xyXG4gICAgLy8gYnRuQ29udGludWUuYmluZCgnY2xpY2snLGZ1bmN0aW9uICgpIHtcclxuICAgIC8vICAgICBlbGVtX2Zvcm0uc2hvdygpO1xyXG4gICAgLy8gICAgIGJ0bkNvbnRpbnVlLmhpZGUoKTtcclxuICAgIC8vIH0pO1xyXG5cclxuICAgIC8v6YKu5Lu25o+Q56S6XHJcbiAgICBpcHRfZW1haWwuYXV0b2NvbXBsZXRlRW1haWwoKTtcclxuXHJcbiAgICAvL+mqjOivgemCrueuseaYr+WQpuiiq+WNoOeUqFxyXG4gICAgdmFyIGVtYWlsX3dhaXQgPSAgJCgnI2hlYWRlcl9yZWdFbWFpbFZhbFdhaXQnKTtcclxuICAgIHZhciBjaGVja0VtYWlsRXhpc3RzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVsZW1fZm9ybS5mb3JtQ2hlY2soe1xyXG4gICAgICAgICAgICAncmVnW2VtYWlsXSc6IFtcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnbnVsbCcsIHNob3dFcnJvcjogZnVuY3Rpb24gKCkge30sIG5vRm9jdXM6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIHNob3dFcnJvcjogZnVuY3Rpb24gKCkge30sIG5vRm9jdXM6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdhdmFpbEVtYWlsJywgbm9Gb2N1czogdHJ1ZX1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgICAgIGF2YWlsRW1haWw6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwP2FjdD1yZWdpc3RlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsnZW1haWwnOiAkKG9iaikudmFsKCksICdjaGVja0VtYWlsJzogMX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZW1haWxfd2FpdC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZW1haWxfd2FpdC5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJFcnJvcihvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3Iob2JqLCByLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIGlwdF9lbWFpbC5jaGFuZ2UoY2hlY2tFbWFpbEV4aXN0cyk7XHJcbiAgICBpcHRfZW1haWwuYmx1cihjaGVja0VtYWlsRXhpc3RzKTtcclxuICAgIGlwdF9lbWFpbC5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaXB0X2VtYWlsLmNzcygnY29sb3InLCcjMzMzJyk7XHJcbiAgICAgICAgaXB0X2VtYWlsLmNzcygnYm9yZGVyJywnJyk7XHJcbiAgICB9KTtcclxuICAgIC8v6aqM6K+B6KGo5Y2V5Y+K5o+Q5LqkXHJcbiAgICB2YXIgaXRlbXN4ID0ge1xyXG4gICAgICAgICdyZWdbcGFzc3dvcmRdJzogW1xyXG4gICAgICAgICAgICB7dHlwZTogJ251bGwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fZW50ZXJfcGFzc3dvcmR9LFxyXG4gICAgICAgICAgICB7dHlwZTogJ21pbmxlbmd0aCcsIG1pbmxlbmd0aDogNSwgZXJyTXNnOiBfbGFuZy5wYWdlX3JlZ2lzdGVyX3B3ZF9taW5pbXVtXzV9XHJcbiAgICAgICAgXSxcclxuICAgICAgICAncmVnW3Bhc3N3b3JkX2FnYWluXSc6IFtcclxuICAgICAgICAgICAge3R5cGU6ICdudWxsJywgZXJyTXNnOiBfbGFuZy5wYWdlX2xvZ2luX3JlZW50ZXJfcGFzc3dvcmR9LFxyXG4gICAgICAgICAgICB7dHlwZTogJ21hdGNoUGFzc3dvcmQnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfcmVnaXN0ZXJfcHdkX25vdF9tYXRjaH1cclxuICAgICAgICBdLFxyXG4gICAgICAgICd0ZXJtcyc6IFtcclxuICAgICAgICAgICAge3R5cGU6ICdjaGVja2VkJywgdmFsdWU6IC0xLCBlcnJNc2c6IF9sYW5nLnBhZ2VfcmVnaXN0ZXJfcGxlYXNlX2FncmVlfVxyXG4gICAgICAgIF1cclxuICAgIH07XHJcbiAgICB2YXIgaXRlbXNFbWFpbCA9IHtcclxuICAgICAgICAncmVnW2VtYWlsXSc6IFtcclxuICAgICAgICAgICAge3R5cGU6ICdudWxsJywgZXJyTXNnOiBfbGFuZy5wYWdlX2xvZ2luX2VudGVyX2VtYWlsfSxcclxuICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9jaGVja19lbWFpbF9mb3JtYXR9XHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG9wdHggPSB7XHJcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlX2NvdXBvbl9yZWdpc3RlciA9IHdlYkRhdGEudXNlX2NvdXBvbl9yZWdpc3RlcjtcclxuICAgICAgICAgICAgICAgIGlmKHVzZV9jb3Vwb25fcmVnaXN0ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNoZWFkZXJfbG9naW5EaWFsb2cnKS5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIENvdXBvblJlZ2lzdGVyRGlhbG9nLmluaXQoci5kYXRhLmNvdXBvbkNvZGUsci5iYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YoY2FsbGJhY2tfZnVuYykgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrX2Z1bmMuY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzZXRUaW1lb3V0IHRvIGFzeW5jIHRoZSBhamF4LCBtYWtlIHRoZSBsb2NhdGlvbi5ocmVmIHJ1biBhZnRlciB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHIuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHIuYmFjaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBfbXNnID0gJCgnI2hlYWRlcl9yZWdpc3Rlcl9tc2d4Jyk7XHJcbiAgICAgICAgICAgICAgICBfbXNnLmh0bWwoci5tc2cpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIGVsZW1fZm9ybS5maW5kKCc6aW5wdXQnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX21zZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsZW1fZm9ybS5zdWJtaXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVsZW1fZm9ybS5maW5kKCcuZXJyb3ItdGlwJykuaHRtbCgnJyk7XHJcbiAgICAgICAgZWxlbV9mb3JtLmZpbmQoJyNoZWFkZXJfbG9naW5fbXNnJykuaHRtbCgnJykuaGlkZSgpO1xyXG5cclxuICAgICAgICB2YXIgaXNDaGVja2VkID0gJCh0aGlzKS5mb3JtQ2hlY2soaXRlbXN4LCB7XHJcbiAgICAgICAgICAgIHNob3dFcnJvciA6IGZ1bmN0aW9uIChvYmosIGVyck1zZykge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgICAgIG1hdGNoUGFzc3dvcmQ6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKG9iaikudmFsKCkgPT0gZWxlbV9mb3JtLmZpbmQoJyNoZWFkZXJfcmVnaXN0ZXJfcGFzc3dvcmQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBpc0NoZWNrZWRFbWFpbCA9ICQodGhpcykuZm9ybUNoZWNrKGl0ZW1zRW1haWwsIHtcclxuICAgICAgICAgICAgc2hvd0Vycm9yIDogZnVuY3Rpb24gKG9iaiwgZXJyTXNnKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3Iob2JqLCBlcnJNc2cpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpc0NoZWNrZWQgJiYgaXNDaGVja2VkRW1haWwpIHtcclxuICAgICAgICAgICAgZWxlbV9mb3JtLmFqYXhTdWJtaXQob3B0eCk7XHJcbiAgICAgICAgfSBlbHNlIGlmKCFpc0NoZWNrZWRFbWFpbCkge1xyXG4gICAgICAgICAgICBpcHRfZW1haWwuY3NzKCdjb2xvcicsJyNmYjUwNTgnKTtcclxuICAgICAgICAgICAgaXB0X2VtYWlsLnZhbCgpICE9PSAnJyAmJiBpcHRfZW1haWwuY3NzKCdib3JkZXInLCcxcHggc29saWQgI2ZiNTA1OCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbn07XHJcbiAgICAvLyDljL/lkI3kuIvljZVcclxuICAgIHZhciBpbml0X2xvZ2luX2d1ZXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtX2Zvcm0gPSAkKCcjZm9ybV9sb2dpbl9ndWVzdCcpO1xyXG5cclxuICAgICAgICAvL+mqjOivgeihqOWNleWPiuaPkOS6pFxyXG4gICAgICAgIHZhciBpdGVtc3ggPSB7XHJcbiAgICAgICAgICAgICdndWVzdFtlbWFpbF0nOiBbXHJcbiAgICAgICAgICAgICAgICB7dHlwZTogJ251bGwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fZW50ZXJfZW1haWx9LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9jaGVja19lbWFpbF9mb3JtYXR9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgb3B0eCA9IHtcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyLmVycm9yID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoY2FsbGJhY2tfZnVuYykgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja19mdW5jLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHNldFRpbWVvdXQgdG8gYXN5bmMgdGhlIGFqYXgsIG1ha2UgdGhlIGxvY2F0aW9uLmhyZWYgcnVuIGFmdGVyIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX21zZyA9ICQoJyNfbXNneCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9tc2cuaHRtbChyLm1zZykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1fZm9ybS5maW5kKCc6aW5wdXQnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tc2cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsZW1fZm9ybS5zdWJtaXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbGVtX2Zvcm0uZmluZCgnLmVycm9yLXRpcCcpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICBlbGVtX2Zvcm0uZmluZCgnI19tc2d4JykuaHRtbCgnJykuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZCA9ICQodGhpcykuZm9ybUNoZWNrKGl0ZW1zeCwge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yIDogZnVuY3Rpb24gKG9iaiwgZXJyTXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChpc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1fZm9ybS5hamF4U3VibWl0KG9wdHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGZhY2Vib29rX2xvZ2luKGVtYWlsLGJhY2tfdXJsKSB7XHJcbiAgICAgICAgJC5wb3N0KHdlYkRhdGEuV0VCX1JPT1QgKyAnYWpheC5waHAnLCB7XHJcbiAgICAgICAgICAgICdhY3QnOiAncmVnaXN0ZXInLFxyXG4gICAgICAgICAgICAnZnJvbSc6ICdmYWNlYm9vaycsXHJcbiAgICAgICAgICAgICdiYWNrJzogYmFja191cmwsXHJcbiAgICAgICAgICAgICdlbWFpbCc6IGVtYWlsXHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGNhbGxiYWNrX2Z1bmMpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tfZnVuYy5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBzZXRUaW1lb3V0IHRvIGFzeW5jIHRoZSBhamF4LCBtYWtlIHRoZSBsb2NhdGlvbi5ocmVmIHJ1biBhZnRlciB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gci5iYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gci5iYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goeydldmVudCcgOiAncGNOb3RCaW5kRmJMb2dpblN1Y2NlZWQnfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgZmFpbFxyXG4gICAgICAgICAgICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHsnZXZlbnQnIDogJ3BjTm90QmluZEZiTG9naW5GYWlsZWQnfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAnanNvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldF9mYWNlYm9va19sb2dpbigpIHtcclxuICAgICAgICB2YXIgRGlhbG9nID0gcmVxdWlyZSgnLi4vbW9kL2RpYWxvZycpO1xyXG4gICAgICAgIC8vZm9yIGZhY2Vib29rIGxvZ2luIGRpYWxvZyBub3QgY2VudGVyIG9uIGZmXHJcbiAgICAgICAgd2luZG93Lm9wZW4gPSBvcGVuSW5Qb3B1cDtcclxuICAgICAgICBGQi5sb2dpbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IFwiY29ubmVjdGVkXCIgJiYgcmVzcG9uc2UuYXV0aFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI2xvZ2luRGlhbG9nXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuID0gd2luZG93Lm9yaWdpbk9wZW47XHJcbiAgICAgICAgICAgICAgICB2YXIgZmJXYWl0ZURpYWxvZyA9ICc8ZGl2IGlkPVwiZmJXYWl0ZURpYWxvZ1wiID4nXHJcbiAgICAgICAgICAgICAgICAgICAgKyAnPGgxIGNsYXNzPVwic2lnbi13aXRoLWZhY2Vib29rXCI+JyArIF9sYW5nLnBhZ2VfbG9naW5fbG9naW5fd2l0aF9mYWNlYm9vayArICc8L2gxPidcclxuICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwicGxlYXNlLXdhaXRlXCI+JyArIF9sYW5nLnBhZ2VfbG9naW5feW91X2hhdmVfbG9nZ2VkX29uX2ZhY2Vib29rICsgJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgRGlhbG9nLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICdtb2RJZCc6J2ZiV2FpdGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2h0bWwnOmZiV2FpdGVEaWFsb2csXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NhbkNsb3NlJzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJhY2sgPSBjaGFuZ2VXcml0ZVJldmlld1VybCgpXHJcbiAgICAgICAgICAgICAgICAkLnBvc3Qod2ViRGF0YS5XRUJfUk9PVCArICdhamF4LnBocCcsIHtcclxuICAgICAgICAgICAgICAgICAgICAnYWN0JzogJ3JlZ2lzdGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAnZnJvbSc6ICdmYWNlYm9vaycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2JhY2snOiBiYWNrXHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKCcjbG9naW5EaWFsb2cnKS5jc3MoXCJkaXNwbGF5XCIpID09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZlcnRXcml0ZVJldmlld1VybCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoci5lcnJvciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydFdyaXRlUmV2aWV3VXJsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGNhbGxiYWNrX2Z1bmMpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja19mdW5jLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgc2V0VGltZW91dCB0byBhc3luYyB0aGUgYWpheCwgbWFrZSB0aGUgbG9jYXRpb24uaHJlZiBydW4gYWZ0ZXIgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gci5iYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5lcnJvciA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjZmJXYWl0aW5nXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNsb2dpbkRpYWxvZ1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYkVtYWlsRGlhbG9nID0gJzxmb3JtIGlkPVwiZmJFbWFpbERpYWxvZ1wiID4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwibWFpbkNvbnRlbnRcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8cCBjbGFzcz1cImNvbmdyYXR1bGF0ZVwiPicgKyBfbGFuZy5wYWdlX3Nuc19qanNob3VzZV9jb25ncmF0dWxhdGlvbnMgKyAnPC9wPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxwIGNsYXNzPVwicHJvdmlkZVwiPicgKyBfbGFuZy5wYWdlX3Nuc19qanNob3VzZV9wcm92aWRlX2VtYWlsICsgJzwvcD4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8cCBjbGFzcz1cImVtYWlsXCI+JyArIF9sYW5nLnBhZ2Vfc25zX2pqc2hvdXNlX2VtYWlsX2FkZHJlc3MgKyAnPC9wPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxpbnB1dCBpZD1cImZhY2Vib29rRW1haWxcIiBuYW1lPVwiZmJFbWFpbFwiIHR5cGU9XCJ0ZXh0XCIvPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxwIGNsYXNzPVwibm90ZVwiPicgKyBfbGFuZy5wYWdlX3Nuc19qanNob3VzZV9lbWFpbF9ub3RlICsgJzwvcD4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBpZD1cInN1Ym1pdFwiPicgKyBfbGFuZy5wYWdlX3NidW1pdCArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGlkPVwiY2FuY2VsXCI+JyArIF9sYW5nLnBhZ2VfY29tbW9uX2NhbmNlbCArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Zvcm0+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGlhbG9nLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21vZElkJzonZmJEaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2h0bWwnOmZiRW1haWxEaWFsb2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbWFpbERpYWxvZyA9ICQoJyNmYkVtYWlsRGlhbG9nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWNlYm9va0VtYWlsID0gZW1haWxEaWFsb2cuZmluZCgnI2ZhY2Vib29rRW1haWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ0blN1bW1pdCA9IGVtYWlsRGlhbG9nLmZpbmQoJyNzdWJtaXQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ0bkNhbmNlbCA9IGVtYWlsRGlhbG9nLmZpbmQoJyNjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZibXNnID0gJCgnI2ZibXNnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2Vib29rRW1haWwuYmluZCgna2V5ZG93bicsZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmljb2RlID0gZS5rZXlDb2RlID8gZS5rZXlDb2RlIDogZS5jaGFyQ29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmljb2RlID09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuU3VtbWl0LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbERpYWxvZy5maW5kKCc6aW5wdXQnKS5mb2N1cyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYm1zZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5DYW5jZWwuYmluZCgnY2xpY2snLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpYWxvZy5jbG9zZSgnI2ZiRGlhbG9nJyx0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0blN1bW1pdC5iaW5kKCdjbGljaycsZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtYWlsID0gZmFjZWJvb2tFbWFpbC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYkxvZ2luRGlhbG9nID0gJzxkaXYgaWQ9XCJmbG9hdGluZ1NpZ25cIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cInRhYmJhYmxlXCI+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwidGFiLXBhbmUgYWN0aXZlXCIgaWQ9XCJsb2dpblBhbmVcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBpZD1cImVtYWlsUmVnaXN0ZXJlZFRpcHNcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPHA+PGEgY2xhc3M9XCJlbWFpbFJlZ2lzdGVyZWRJbWdcIj48L2E+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgX2xhbmcucGFnZV9lbWFpbF9yZWdpc3RlcmVkICsgZW1haWwgKyBfbGFuZy5wYWdlX3NpZ25fd2l0aF9lbWFpbF9hbmRfcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L3A+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8Zm9ybSBhY3Rpb249JyArIHdlYkRhdGEuV0VCX1JPT1QgKyAnYWpheC5waHAnICsgJyBtZXRob2Q9XCJwb3N0XCIgbmFtZT1cImZvcm1fZmFjZWJvb2tfbG9naW5cIiBpZD1cImZvcm1fZmFjZWJvb2tfbG9naW5cIiBhdXRvY29tcGxldGU9XCJvZmZcIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGxhYmVsIGZvcj1cIl9lbWFpbFwiPicgKyBfbGFuZy5wYWdlX2xvZ2luX2VtYWlsICsgJzo8L2xhYmVsPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibG9naW5bZW1haWxdXCIgaWQ9XCJfZW1haWxcIiB2YWx1ZT1cIicgKyBlbWFpbCArICdcIiBtYXhsZW5ndGg9XCI5NlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8bGFiZWwgZm9yPVwiX3Bhc3N3b3JkXCI+JyArIF9sYW5nLnBhZ2VfbG9naW5fcGFzc3dvcmQgKyAnOjwvbGFiZWw+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwibG9naW5bcGFzc3dvcmRdXCIgaWQ9XCJfcGFzc3dvcmRcIiBtYXhsZW5ndGg9XCI0MFwiPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8cCBjbGFzcz1cImZvb3RSZWdpb25cIj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3MgYnRuLWxhcmdlXCIgb25jbGljaz1cInBhZ2VEYXRhLmxvZ2luTW9kdWxlLmZhY2Vib29rX2xvZ2luX2VtYWlsX3JlZ2lzdGVyZWQoKVwiPicgKyBfbGFuZy5wYWdlX2xvZ2luX3NpZ25faW4gKyAnPC9idXR0b24+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxzcGFuIGlkPVwiZm9yZ290UHdkXCI+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIicgKyB3ZWJEYXRhLldFQl9ST09UICsgJ2ZvcmdvdHBhc3N3b3JkLnBocFwiIHRpdGxlPVwiJyArIF9sYW5nLnBhZ2VfbG9naW5fZm9yZ290X3RpcCArICdcIj4nICsgX2xhbmcucGFnZV9sb2dpbl9mb3Jnb3RfdGlwICsgJzwvYT48L3NwYW4+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvcD4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9mb3JtPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9kaXY+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrID0gZW1haWxEaWFsb2cuZm9ybUNoZWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZiRW1haWwnOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogJ251bGwnLCBlcnJNc2c6IF9sYW5nLnBhZ2VfbG9naW5fZW50ZXJfZW1haWx9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIGVyck1zZzogX2xhbmcucGFnZV9sb2dpbl9jaGVja19lbWFpbF9mb3JtYXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFcnJvciA6IGZ1bmN0aW9uIChvYmosIGVyck1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yKG9iaiwgZXJyTXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhc3luYyc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXJsJzogd2ViRGF0YS5XRUJfUk9PVCArICdhamF4LnBocCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogJ2FjdD1jaGVja0VtYWlsUmVnaXN0ZXJlZCZlbWFpbD0nICsgZW1haWwgKyAnJmJhY2s9JyArIGJhY2tfdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FjaGUnOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YVR5cGUnOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpYWxvZy5jbG9zZSgnI2ZiRGlhbG9nJyx0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWFsb2cub3Blbih7J21vZElkJzonZmJMb2dpbkRpYWxvZycsIGh0bWw6IGZiTG9naW5EaWFsb2d9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N1Ym1pdCcpLnRleHQoX2xhbmcucGFnZV9vcmRlcl9wcm9ncmVzc19wcm9jZXNzaW5nKS5hdHRyKCdkaXNhYmxlZCcsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZWJvb2tfbG9naW4oci5lbWFpbCxyLmJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjbG9naW5EaWFsb2dcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ZiRGlhbG9nXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNmYldhaXRpbmdcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX21zZyA9ICQoJyNfbXNnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtX2Zvcm0gPSAkKCcjZm9ybV9sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbXNnLmh0bWwoci5tc2cpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbV9mb3JtLmZpbmQoJzppbnB1dCcpLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tc2cuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmRhdGFMYXllci5wdXNoKHsnZXZlbnQnIDogJ3BjTm90QmluZEZiTG9naW5GYWlsZWQnfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCcjbG9naW5EaWFsb2cnKS5jc3MoXCJkaXNwbGF5XCIpID09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0V3JpdGVSZXZpZXdVcmwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sICdqc29uJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnI2xvZ2luRGlhbG9nJykuY3NzKFwiZGlzcGxheVwiKSA9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXZlcnRXcml0ZVJldmlld1VybCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSx7c2NvcGU6ICdlbWFpbCd9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnu5Hlrprlm57osIPlh73mlbBcclxuICAgIHZhciBjYWxsYmFja19mdW5jO1xyXG5cclxuICAgIHZhciBpbml0X2NhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSAgICB7XHJcbiAgICAgICAgY2FsbGJhY2tfZnVuYyA9IGNhbGxiYWNrO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL+eZu+mZhuazqOWGjOmhtemdouS6i+S7tue7keWumlxyXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZih3aW5kb3cuaW5pdGVkTG9naW5Kcykge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LmluaXRlZExvZ2luSnMgPSB0cnVlXHJcbiAgICAgICAgaW5pdF9lbWFpbCgpO1xyXG4gICAgICAgIGluaXRfbG9naW5fZ3Vlc3QoKTtcclxuICAgICAgICBpbml0X2ZvY3VzKHBhZ2VEYXRhLmZvY3VzX2tleSk7XHJcbiAgICAgICAgaGVhZGVyX2luaXRfZm9jdXMocGFnZURhdGEuZm9jdXNfa2V5KTtcclxuICAgIH07XHJcblxyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAgICAgXCJpbml0XCI6IGluaXQsXHJcbiAgICAgICAgXCJpbml0X2xvZ2luXCI6IGluaXRfbG9naW4sXHJcbiAgICAgICAgXCJpbml0X2VtYWlsXCI6IGluaXRfZW1haWwsXHJcbiAgICAgICAgXCJpbml0X3JlZ2lzdGVyXCI6IGluaXRfcmVnaXN0ZXIsXHJcbiAgICAgICAgXCJpbml0X2xvZ2luX2d1ZXN0XCI6IGluaXRfbG9naW5fZ3Vlc3QsXHJcbiAgICAgICAgXCJnZXRfZmFjZWJvb2tfbG9naW5cIjogZ2V0X2ZhY2Vib29rX2xvZ2luLFxyXG4gICAgICAgIFwiZmFjZWJvb2tfbG9naW5fZW1haWxfcmVnaXN0ZXJlZFwiOiBmYWNlYm9va19sb2dpbl9lbWFpbF9yZWdpc3RlcmVkLFxyXG4gICAgICAgIFwiaW5pdF9jYWxsYmFja1wiOiBpbml0X2NhbGxiYWNrLFxyXG4gICAgICAgIFwiaW5pdF9jYWxlbmRhclwiOiBpbml0Q2FsZW5kYXIsXHJcbiAgICAgICAgXCJpbml0X2NhbGVuZGFyX2NsaWNrXCI6IGluaXRDYWxlbmRhckNsaWNrLFxyXG4gICAgfTtcclxuIl19
},{"../lib/jQueryDatePicker":4,"../lib/jmodal":5,"../lib/jquery-ui-i18.min":6,"../lib/jqueryForm":7,"../mod/autocompleteEmail":8,"../mod/cookie":9,"../mod/coupon_register_dialog":10,"../mod/dialog":11,"../mod/formCheck":13,"../mod/loader":14,"../mod/openInPopup":15}],21:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var popGetCoupon = require('../mod/popGetCoupon');

var addOnItemGetCouponTpl = $('.add-on-item-get-coupon-tpl');

var init = function () {
    //点击get code
    addOnItemGetCouponTpl.delegate('.get-code', 'click', function () {
        var getCoupon = new popGetCoupon();
        var me = $(this);
        var length = $('#coupon_dialog_container').length;

        getCoupon.couponDialog();

        if(length < 1){
            getCoupon.bindEvent();
        }
        return false;
    });

};

module.exports = {
    "init": init
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvcmVjb21tZW5kUGlja3MvcmVjb21tZW5kX3BpY2tzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbnZhciBwb3BHZXRDb3Vwb24gPSByZXF1aXJlKCcuLi9tb2QvcG9wR2V0Q291cG9uJyk7XHJcblxyXG52YXIgYWRkT25JdGVtR2V0Q291cG9uVHBsID0gJCgnLmFkZC1vbi1pdGVtLWdldC1jb3Vwb24tdHBsJyk7XHJcblxyXG52YXIgaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8v54K55Ye7Z2V0IGNvZGVcclxuICAgIGFkZE9uSXRlbUdldENvdXBvblRwbC5kZWxlZ2F0ZSgnLmdldC1jb2RlJywgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBnZXRDb3Vwb24gPSBuZXcgcG9wR2V0Q291cG9uKCk7XHJcbiAgICAgICAgdmFyIG1lID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gJCgnI2NvdXBvbl9kaWFsb2dfY29udGFpbmVyJykubGVuZ3RoO1xyXG5cclxuICAgICAgICBnZXRDb3Vwb24uY291cG9uRGlhbG9nKCk7XHJcblxyXG4gICAgICAgIGlmKGxlbmd0aCA8IDEpe1xyXG4gICAgICAgICAgICBnZXRDb3Vwb24uYmluZEV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgXCJpbml0XCI6IGluaXRcclxufTtcclxuXHJcblxyXG4iXX0=
},{"../mod/popGetCoupon":16}],"recommend_picks":[function(require,module,exports){
// require('./common')
require('../recommendPicks/recommend_picks.js').init();
require('../goods/do_fav_new').init(); //get fav-count and add-to-fav
},{"../goods/do_fav_new":2,"../recommendPicks/recommend_picks.js":21}]},{},[])
//# sourceMappingURL=data:application/json;base64,
