require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var isEmailFormSubmit = false;
    var bind_submit = function (elem_form, ipt_email) {
        elem_form.submit(function () {
            if (elem_form.length < 1 || ipt_email.length < 1) {
                return false;
            }
            if (isEmailFormSubmit) {
                return false;
            }
            var email = ipt_email.val();
            email = email.trim();
            if (email == '') {
                alert(_lang.page_common_footer_please_check_your_email_address);
                ipt_email.focus();
                return false;
            } else if (!(/^[\w]{1}[\w+.-]*@[\w-]+(\.[\w-]+)+$/i.test(email)) || email.length > 60) {
                alert(_lang.page_email_address_non_existent);
                ipt_email.focus();
                return false;
            }

            isEmailFormSubmit = true;
            var options = {
                url: webData.WEB_ROOT + 'ajax.php',
                type: 'post',
                dataType: 'json',
                data: elem_form.serialize(),
                success: function (data) {
                    isEmailFormSubmit = false;
                    if (data.code == 1) {
                        var invatigateHtm = data.result;
                        $('body').append(invatigateHtm);
                        investigate();
                    } else {
                        alert(data.msg)
                    }
                }
            };
            $.ajax(options);
            return false;
        });
    };
    var investigate = function() {
        $('body #newsletter_investigate_form').on('submit', function () {
            var elem_form = $('#newsletter_investigate_form');
            var newsletter_role = elem_form.find('input[name=newsletter_role]:checked').val();
            var newsletter_remark = elem_form.find('input[name=other_remark]').val();
            if (newsletter_role == undefined) {
                $('.newsletter_investigate .newsletter_warning').html(_lang.page_code_newsletter_select_role);
                return false;
            }
            var options = {
                url: '/ajax.php',
                type: 'post',
                dataType: 'json',
                data: elem_form.serialize(),
                success: function (data) {
                    if (data.code == 1) {
                        $('.newsletter_investigate_modal').remove()
                        $('.newsletter_investigate_layer').remove()
                    } else {
                        alert(data.msg);
                    }
                }
            };

            $.ajax(options);
            return false;
        });
        $('.newsletter_investigate .icon-cross').click(function () {
            $('.newsletter_investigate_modal').remove();
            $('.newsletter_investigate_layer').remove();
        });
        $('.newsletter_role_label').click(function () {
            var radioObj = $(this).prev('input[name=newsletter_role]');
            if (radioObj.val() == 7) {
                $('input[name=other_remark]').prop('disabled', '');
            }else {
                $('input[name=other_remark]').prop('disabled', 'disabled');
            }
        });
    }

    module.exports = {
        "bind_submit": bind_submit
    };
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL25ld3NsZXR0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cclxuICAgIHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG4gICAgdmFyIGlzRW1haWxGb3JtU3VibWl0ID0gZmFsc2U7XHJcbiAgICB2YXIgYmluZF9zdWJtaXQgPSBmdW5jdGlvbiAoZWxlbV9mb3JtLCBpcHRfZW1haWwpIHtcclxuICAgICAgICBlbGVtX2Zvcm0uc3VibWl0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1fZm9ybS5sZW5ndGggPCAxIHx8IGlwdF9lbWFpbC5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzRW1haWxGb3JtU3VibWl0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGVtYWlsID0gaXB0X2VtYWlsLnZhbCgpO1xyXG4gICAgICAgICAgICBlbWFpbCA9IGVtYWlsLnRyaW0oKTtcclxuICAgICAgICAgICAgaWYgKGVtYWlsID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2NvbW1vbl9mb290ZXJfcGxlYXNlX2NoZWNrX3lvdXJfZW1haWxfYWRkcmVzcyk7XHJcbiAgICAgICAgICAgICAgICBpcHRfZW1haWwuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghKC9eW1xcd117MX1bXFx3Ky4tXSpAW1xcdy1dKyhcXC5bXFx3LV0rKSskL2kudGVzdChlbWFpbCkpIHx8IGVtYWlsLmxlbmd0aCA+IDYwKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2VtYWlsX2FkZHJlc3Nfbm9uX2V4aXN0ZW50KTtcclxuICAgICAgICAgICAgICAgIGlwdF9lbWFpbC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0VtYWlsRm9ybVN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgdXJsOiB3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBlbGVtX2Zvcm0uc2VyaWFsaXplKCksXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRW1haWxGb3JtU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY29kZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnZhdGlnYXRlSHRtID0gZGF0YS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoaW52YXRpZ2F0ZUh0bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoZGF0YS5tc2cpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkLmFqYXgob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgaW52ZXN0aWdhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCdib2R5ICNuZXdzbGV0dGVyX2ludmVzdGlnYXRlX2Zvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbV9mb3JtID0gJCgnI25ld3NsZXR0ZXJfaW52ZXN0aWdhdGVfZm9ybScpO1xyXG4gICAgICAgICAgICB2YXIgbmV3c2xldHRlcl9yb2xlID0gZWxlbV9mb3JtLmZpbmQoJ2lucHV0W25hbWU9bmV3c2xldHRlcl9yb2xlXTpjaGVja2VkJykudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdzbGV0dGVyX3JlbWFyayA9IGVsZW1fZm9ybS5maW5kKCdpbnB1dFtuYW1lPW90aGVyX3JlbWFya10nKS52YWwoKTtcclxuICAgICAgICAgICAgaWYgKG5ld3NsZXR0ZXJfcm9sZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICQoJy5uZXdzbGV0dGVyX2ludmVzdGlnYXRlIC5uZXdzbGV0dGVyX3dhcm5pbmcnKS5odG1sKF9sYW5nLnBhZ2VfY29kZV9uZXdzbGV0dGVyX3NlbGVjdF9yb2xlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9hamF4LnBocCcsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZWxlbV9mb3JtLnNlcmlhbGl6ZSgpLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb2RlID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm5ld3NsZXR0ZXJfaW52ZXN0aWdhdGVfbW9kYWwnKS5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubmV3c2xldHRlcl9pbnZlc3RpZ2F0ZV9sYXllcicpLnJlbW92ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoZGF0YS5tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICQuYWpheChvcHRpb25zKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5uZXdzbGV0dGVyX2ludmVzdGlnYXRlIC5pY29uLWNyb3NzJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKCcubmV3c2xldHRlcl9pbnZlc3RpZ2F0ZV9tb2RhbCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAkKCcubmV3c2xldHRlcl9pbnZlc3RpZ2F0ZV9sYXllcicpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoJy5uZXdzbGV0dGVyX3JvbGVfbGFiZWwnKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByYWRpb09iaiA9ICQodGhpcykucHJldignaW5wdXRbbmFtZT1uZXdzbGV0dGVyX3JvbGVdJyk7XHJcbiAgICAgICAgICAgIGlmIChyYWRpb09iai52YWwoKSA9PSA3KSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPW90aGVyX3JlbWFya10nKS5wcm9wKCdkaXNhYmxlZCcsICcnKTtcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1vdGhlcl9yZW1hcmtdJykucHJvcCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgICAgIFwiYmluZF9zdWJtaXRcIjogYmluZF9zdWJtaXRcclxuICAgIH07XHJcbi8vfSk7Il19
},{}],2:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {

exports.init = function () {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    var news = require('../mod/newsletter');
    var subscribe_form = $('#newsletter_submit');
    news.bind_submit(subscribe_form, subscribe_form.find('input[name="email"]'));
};

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvcGFnZXMvbmV3c2xldHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxuXHJcbmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuICAgIHZhciBuZXdzID0gcmVxdWlyZSgnLi4vbW9kL25ld3NsZXR0ZXInKTtcclxuICAgIHZhciBzdWJzY3JpYmVfZm9ybSA9ICQoJyNuZXdzbGV0dGVyX3N1Ym1pdCcpO1xyXG4gICAgbmV3cy5iaW5kX3N1Ym1pdChzdWJzY3JpYmVfZm9ybSwgc3Vic2NyaWJlX2Zvcm0uZmluZCgnaW5wdXRbbmFtZT1cImVtYWlsXCJdJykpO1xyXG59O1xyXG5cclxuLy99KTtcclxuIl19
},{"../mod/newsletter":1}],"newsletter":[function(require,module,exports){
// require('./common')
require('../pages/newsletter').init(); //related to newletter
},{"../pages/newsletter":2}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3Nlci1wYWNrXFxfcHJlbHVkZS5qcyIsIkQ6L3d3dy9wcm9tZXRoZXVzL3NyYy9nYWVhL2pzL21vZC9uZXdzbGV0dGVyLmpzIiwiRDovd3d3L3Byb21ldGhldXMvc3JjL2dhZWEvanMvcGFnZXMvbmV3c2xldHRlci5qcyIsIi4vZ2FlYS9qcy9lbnRyeV9qcy9uZXdzbGV0dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gKGdsb2JhbCl7XG4vL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcblxyXG4gICAgdmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbiAgICB2YXIgaXNFbWFpbEZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgIHZhciBiaW5kX3N1Ym1pdCA9IGZ1bmN0aW9uIChlbGVtX2Zvcm0sIGlwdF9lbWFpbCkge1xyXG4gICAgICAgIGVsZW1fZm9ybS5zdWJtaXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoZWxlbV9mb3JtLmxlbmd0aCA8IDEgfHwgaXB0X2VtYWlsLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNFbWFpbEZvcm1TdWJtaXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZW1haWwgPSBpcHRfZW1haWwudmFsKCk7XHJcbiAgICAgICAgICAgIGVtYWlsID0gZW1haWwudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAoZW1haWwgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KF9sYW5nLnBhZ2VfY29tbW9uX2Zvb3Rlcl9wbGVhc2VfY2hlY2tfeW91cl9lbWFpbF9hZGRyZXNzKTtcclxuICAgICAgICAgICAgICAgIGlwdF9lbWFpbC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoL15bXFx3XXsxfVtcXHcrLi1dKkBbXFx3LV0rKFxcLltcXHctXSspKyQvaS50ZXN0KGVtYWlsKSkgfHwgZW1haWwubGVuZ3RoID4gNjApIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KF9sYW5nLnBhZ2VfZW1haWxfYWRkcmVzc19ub25fZXhpc3RlbnQpO1xyXG4gICAgICAgICAgICAgICAgaXB0X2VtYWlsLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRW1haWxGb3JtU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHdlYkRhdGEuV0VCX1JPT1QgKyAnYWpheC5waHAnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGVsZW1fZm9ybS5zZXJpYWxpemUoKSxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNFbWFpbEZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb2RlID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludmF0aWdhdGVIdG0gPSBkYXRhLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChpbnZhdGlnYXRlSHRtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXN0aWdhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChkYXRhLm1zZylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICQuYWpheChvcHRpb25zKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBpbnZlc3RpZ2F0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJ2JvZHkgI25ld3NsZXR0ZXJfaW52ZXN0aWdhdGVfZm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtX2Zvcm0gPSAkKCcjbmV3c2xldHRlcl9pbnZlc3RpZ2F0ZV9mb3JtJyk7XHJcbiAgICAgICAgICAgIHZhciBuZXdzbGV0dGVyX3JvbGUgPSBlbGVtX2Zvcm0uZmluZCgnaW5wdXRbbmFtZT1uZXdzbGV0dGVyX3JvbGVdOmNoZWNrZWQnKS52YWwoKTtcclxuICAgICAgICAgICAgdmFyIG5ld3NsZXR0ZXJfcmVtYXJrID0gZWxlbV9mb3JtLmZpbmQoJ2lucHV0W25hbWU9b3RoZXJfcmVtYXJrXScpLnZhbCgpO1xyXG4gICAgICAgICAgICBpZiAobmV3c2xldHRlcl9yb2xlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgJCgnLm5ld3NsZXR0ZXJfaW52ZXN0aWdhdGUgLm5ld3NsZXR0ZXJfd2FybmluZycpLmh0bWwoX2xhbmcucGFnZV9jb2RlX25ld3NsZXR0ZXJfc2VsZWN0X3JvbGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2FqYXgucGhwJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBlbGVtX2Zvcm0uc2VyaWFsaXplKCksXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvZGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubmV3c2xldHRlcl9pbnZlc3RpZ2F0ZV9tb2RhbCcpLnJlbW92ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5uZXdzbGV0dGVyX2ludmVzdGlnYXRlX2xheWVyJykucmVtb3ZlKClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChkYXRhLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJC5hamF4KG9wdGlvbnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLm5ld3NsZXR0ZXJfaW52ZXN0aWdhdGUgLmljb24tY3Jvc3MnKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoJy5uZXdzbGV0dGVyX2ludmVzdGlnYXRlX21vZGFsJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICQoJy5uZXdzbGV0dGVyX2ludmVzdGlnYXRlX2xheWVyJykucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLm5ld3NsZXR0ZXJfcm9sZV9sYWJlbCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJhZGlvT2JqID0gJCh0aGlzKS5wcmV2KCdpbnB1dFtuYW1lPW5ld3NsZXR0ZXJfcm9sZV0nKTtcclxuICAgICAgICAgICAgaWYgKHJhZGlvT2JqLnZhbCgpID09IDcpIHtcclxuICAgICAgICAgICAgICAgICQoJ2lucHV0W25hbWU9b3RoZXJfcmVtYXJrXScpLnByb3AoJ2Rpc2FibGVkJywgJycpO1xyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPW90aGVyX3JlbWFya10nKS5wcm9wKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAgICAgXCJiaW5kX3N1Ym1pdFwiOiBiaW5kX3N1Ym1pdFxyXG4gICAgfTtcclxuLy99KTtcbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kaFpXRXZhbk12Ylc5a0wyNWxkM05zWlhSMFpYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OWtaV1pwYm1Vb1puVnVZM1JwYjI0Z0tISmxjWFZwY21Vc0lHVjRjRzl5ZEhNc0lHMXZaSFZzWlNrZ2UxeHlYRzVjY2x4dUlDQWdJSFpoY2lBa0lEMGdLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ1B5QjNhVzVrYjNkYkp5UW5YU0E2SUhSNWNHVnZaaUJuYkc5aVlXd2dJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJuYkc5aVlXeGJKeVFuWFNBNklHNTFiR3dwTzF4eVhHNGdJQ0FnZG1GeUlHbHpSVzFoYVd4R2IzSnRVM1ZpYldsMElEMGdabUZzYzJVN1hISmNiaUFnSUNCMllYSWdZbWx1WkY5emRXSnRhWFFnUFNCbWRXNWpkR2x2YmlBb1pXeGxiVjltYjNKdExDQnBjSFJmWlcxaGFXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCbGJHVnRYMlp2Y20wdWMzVmliV2wwS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxZlptOXliUzVzWlc1bmRHZ2dQQ0F4SUh4OElHbHdkRjlsYldGcGJDNXNaVzVuZEdnZ1BDQXhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6UlcxaGFXeEdiM0p0VTNWaWJXbDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z0WVdsc0lEMGdhWEIwWDJWdFlXbHNMblpoYkNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJXRnBiQ0E5SUdWdFlXbHNMblJ5YVcwb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z0WVdsc0lEMDlJQ2NuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiR1Z5ZENoZmJHRnVaeTV3WVdkbFgyTnZiVzF2Ymw5bWIyOTBaWEpmY0d4bFlYTmxYMk5vWldOclgzbHZkWEpmWlcxaGFXeGZZV1JrY21WemN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwY0hSZlpXMWhhV3d1Wm05amRYTW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hLQzllVzF4Y2QxMTdNWDFiWEZ4M0t5NHRYU3BBVzF4Y2R5MWRLeWhjWEM1YlhGeDNMVjByS1Nza0wya3VkR1Z6ZENobGJXRnBiQ2twSUh4OElHVnRZV2xzTG14bGJtZDBhQ0ErSURZd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkdWeWRDaGZiR0Z1Wnk1d1lXZGxYMlZ0WVdsc1gyRmtaSEpsYzNOZmJtOXVYMlY0YVhOMFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsd2RGOWxiV0ZwYkM1bWIyTjFjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzBWdFlXbHNSbTl5YlZOMVltMXBkQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNPaUIzWldKRVlYUmhMbGRGUWw5U1QwOVVJQ3NnSjJGcVlYZ3VjR2h3Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkd2IzTjBKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRlVlWEJsT2lBbmFuTnZiaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJsYkdWdFgyWnZjbTB1YzJWeWFXRnNhWHBsS0Nrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV05qWlhOek9pQm1kVzVqZEdsdmJpQW9aR0YwWVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselJXMWhhV3hHYjNKdFUzVmliV2wwSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRXVZMjlrWlNBOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBiblpoZEdsbllYUmxTSFJ0SUQwZ1pHRjBZUzV5WlhOMWJIUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSjJKdlpIa25LUzVoY0hCbGJtUW9hVzUyWVhScFoyRjBaVWgwYlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVkbVZ6ZEdsbllYUmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3hsY25Rb1pHRjBZUzV0YzJjcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0xtRnFZWGdvYjNCMGFXOXVjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0IyWVhJZ2FXNTJaWE4wYVdkaGRHVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWtLQ2RpYjJSNUlDTnVaWGR6YkdWMGRHVnlYMmx1ZG1WemRHbG5ZWFJsWDJadmNtMG5LUzV2YmlnbmMzVmliV2wwSnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWld4bGJWOW1iM0p0SUQwZ0pDZ25JMjVsZDNOc1pYUjBaWEpmYVc1MlpYTjBhV2RoZEdWZlptOXliU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtVjNjMnhsZEhSbGNsOXliMnhsSUQwZ1pXeGxiVjltYjNKdExtWnBibVFvSjJsdWNIVjBXMjVoYldVOWJtVjNjMnhsZEhSbGNsOXliMnhsWFRwamFHVmphMlZrSnlrdWRtRnNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVpYZHpiR1YwZEdWeVgzSmxiV0Z5YXlBOUlHVnNaVzFmWm05eWJTNW1hVzVrS0NkcGJuQjFkRnR1WVcxbFBXOTBhR1Z5WDNKbGJXRnlhMTBuS1M1MllXd29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGQzTnNaWFIwWlhKZmNtOXNaU0E5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1dVpYZHpiR1YwZEdWeVgybHVkbVZ6ZEdsbllYUmxJQzV1WlhkemJHVjBkR1Z5WDNkaGNtNXBibWNuS1M1b2RHMXNLRjlzWVc1bkxuQmhaMlZmWTI5a1pWOXVaWGR6YkdWMGRHVnlYM05sYkdWamRGOXliMnhsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMGFXOXVjeUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnliRG9nSnk5aGFtRjRMbkJvY0Njc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNHOXpkQ2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhWSGx3WlRvZ0oycHpiMjRuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWld4bGJWOW1iM0p0TG5ObGNtbGhiR2w2WlNncExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1ZqWTJWemN6b2dablZ1WTNScGIyNGdLR1JoZEdFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVM1amIyUmxJRDA5SURFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duTG01bGQzTnNaWFIwWlhKZmFXNTJaWE4wYVdkaGRHVmZiVzlrWVd3bktTNXlaVzF2ZG1Vb0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1Ym1WM2MyeGxkSFJsY2w5cGJuWmxjM1JwWjJGMFpWOXNZWGxsY2ljcExuSmxiVzkyWlNncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4bGNuUW9aR0YwWVM1dGMyY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNRdVlXcGhlQ2h2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXVaWGR6YkdWMGRHVnlYMmx1ZG1WemRHbG5ZWFJsSUM1cFkyOXVMV055YjNOekp5a3VZMnhwWTJzb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1Ym1WM2MyeGxkSFJsY2w5cGJuWmxjM1JwWjJGMFpWOXRiMlJoYkNjcExuSmxiVzkyWlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY3VibVYzYzJ4bGRIUmxjbDlwYm5abGMzUnBaMkYwWlY5c1lYbGxjaWNwTG5KbGJXOTJaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNRb0p5NXVaWGR6YkdWMGRHVnlYM0p2YkdWZmJHRmlaV3duS1M1amJHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlZV1JwYjA5aWFpQTlJQ1FvZEdocGN5a3VjSEpsZGlnbmFXNXdkWFJiYm1GdFpUMXVaWGR6YkdWMGRHVnlYM0p2YkdWZEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WVdScGIwOWlhaTUyWVd3b0tTQTlQU0EzS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2RwYm5CMWRGdHVZVzFsUFc5MGFHVnlYM0psYldGeWExMG5LUzV3Y205d0tDZGthWE5oWW14bFpDY3NJQ2NuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZldWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbmFXNXdkWFJiYm1GdFpUMXZkR2hsY2w5eVpXMWhjbXRkSnlrdWNISnZjQ2duWkdsellXSnNaV1FuTENBblpHbHpZV0pzWldRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHlYRzRnSUNBZ0lDQWdJRndpWW1sdVpGOXpkV0p0YVhSY0lqb2dZbWx1WkY5emRXSnRhWFJjY2x4dUlDQWdJSDA3WEhKY2JpOHZmU2s3SWwxOSIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbi8vZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cclxuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblxyXG4gICAgdmFyIG5ld3MgPSByZXF1aXJlKCcuLi9tb2QvbmV3c2xldHRlcicpO1xyXG4gICAgdmFyIHN1YnNjcmliZV9mb3JtID0gJCgnI25ld3NsZXR0ZXJfc3VibWl0Jyk7XHJcbiAgICBuZXdzLmJpbmRfc3VibWl0KHN1YnNjcmliZV9mb3JtLCBzdWJzY3JpYmVfZm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKSk7XHJcbn07XHJcblxyXG4vL30pO1xyXG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1kaFpXRXZhbk12Y0dGblpYTXZibVYzYzJ4bGRIUmxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkwyUmxabWx1WlNobWRXNWpkR2x2YmloeVpYRjFhWEpsTENCbGVIQnZjblJ6TENCdGIyUjFiR1VwSUh0Y2NseHVYSEpjYm1WNGNHOXlkSE11YVc1cGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUhaaGNpQWtJRDBnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUIzYVc1a2IzZGJKeVFuWFNBNklIUjVjR1Z2WmlCbmJHOWlZV3dnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCbmJHOWlZV3hiSnlRblhTQTZJRzUxYkd3cE8xeHlYRzVjY2x4dUlDQWdJSFpoY2lCdVpYZHpJRDBnY21WeGRXbHlaU2duTGk0dmJXOWtMMjVsZDNOc1pYUjBaWEluS1R0Y2NseHVJQ0FnSUhaaGNpQnpkV0p6WTNKcFltVmZabTl5YlNBOUlDUW9KeU51WlhkemJHVjBkR1Z5WDNOMVltMXBkQ2NwTzF4eVhHNGdJQ0FnYm1WM2N5NWlhVzVrWDNOMVltMXBkQ2h6ZFdKelkzSnBZbVZmWm05eWJTd2djM1ZpYzJOeWFXSmxYMlp2Y20wdVptbHVaQ2duYVc1d2RYUmJibUZ0WlQxY0ltVnRZV2xzWENKZEp5a3BPMXh5WEc1OU8xeHlYRzVjY2x4dUx5OTlLVHRjY2x4dUlsMTkiLCIvLyByZXF1aXJlKCcuL2NvbW1vbicpXHJcbnJlcXVpcmUoJy4uL3BhZ2VzL25ld3NsZXR0ZXInKS5pbml0KCk7IC8vcmVsYXRlZCB0byBuZXdsZXR0ZXIiXX0=
