require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//define(function (require, exports, module) {
	
	//set A/BTest cookie
	var ABTest = require('../mod/abTest');
	var abTest = new ABTest();
	//abTest.setCookie();
	
	var Request = require('../mod/request');
	var request = new Request();
	
	var valid_redirect = pageData.valid_redirect;
	var url = location.href;
	var url_new = url;
	for(var key in valid_redirect) {
		var cookieName = valid_redirect[key];
		var val = abTest.getCookie(cookieName);
		if(! val)
			val = 'over'; //abtest已经取消，强制赋值
		url_new = request.setOne(url_new, key, val);
	}
	location.href = url_new;
//});

},{"../mod/abTest":2,"../mod/request":5}],2:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();

    var MyArray = require('../mod/myArray');
    var myarr = new MyArray();

    var Request = require('../mod/request');
    var request = new Request();

    function ABTest() {
        this.abtest_config = webData.abtest;
    }
    module.exports = ABTest;

    ABTest.prototype.getOneInConfig = function(cookieName) {
        var abtest_config = this.abtest_config;
        for(var i = 0; i < abtest_config.length; i ++) {
            var o_cookie = abtest_config[i];
            if(o_cookie['cookieName'] == cookieName && o_cookie['isActive'] && myarr.in_array(webData.lang, o_cookie['languages']))
                return o_cookie;
        }
        return false;
    }

    ABTest.prototype.getOneInCookie = function(cookieName) {
        var abtest_cookie = cookie.getCookie('abTest') ? cookie.getCookie('abTest') : '';
        if(abtest_cookie.length == 0)
            return false;
        abtest_cookie = abtest_cookie.split(',');
        for(var i = 0; i < abtest_cookie.length; i ++) {
            var c_cookie =  abtest_cookie[i].split('|');
            if(c_cookie[0] == cookieName) {
                return c_cookie;
            }
        }
        return false;
    }

    /* 该操作已在php端执行
     ABTest.prototype.setCookie = function () {
     var me = this;
     var abtest_config = this.abtest_config;
     var abtest_cookie = cookie.getCookie('abTest') ? cookie.getCookie('abTest') : '',
     abtest_cookie_arr = abtest_cookie.split(','),
     new_cookie = '',
     new_cookie_arr = [],
     unique_names = {};
     if(abtest_config.length == 0)
     return false;
     for(var i = 0; i < abtest_config.length; i ++) {
     var o_cookie = abtest_config[i],
     o_name = o_cookie['cookieName'];

     //cookie must be unique and active
     if ((typeof(unique_names[o_name]) != 'undefined') || (! o_cookie['isActive'])){
     continue;
     }
     unique_names[o_name] = 1;

     var o_values = o_cookie['cookieValue'],
     o_rate0 = parseInt(o_cookie['cookieRate'][0]),
     o_rate1 = parseInt(o_cookie['cookieRate'][1]);

     var c_cookie = me.getOneInCookie(o_name);
     if(c_cookie != false && c_cookie[2] == o_rate0 && c_cookie[3] == o_rate1 && myarr.in_array(c_cookie[1], o_values))  {
     new_cookie_arr.push(c_cookie.join('|'));
     continue;
     }

     var rand = parseInt(Math.random() * (o_rate0 + o_rate1)) + 1;
     var o_value = (rand <= o_rate0) ? o_values[0] : o_values[1];
     new_cookie_arr.push(o_name + '|' + o_value + '|' + o_rate0 + '|' + o_rate1);
     }
     new_cookie = new_cookie_arr.join(',');
     if(abtest_cookie != new_cookie) {
     cookie.setCookie('abTest', new_cookie, 365);
     //console.log('setCookie: ' + new_cookie);
     }
     }
     */

    ABTest.prototype.getCookie = function (cookieName) {
        var o_cookie = this.getOneInConfig(cookieName);
        var c_cookie = this.getOneInCookie(cookieName);
        if(! o_cookie || ! c_cookie)
            return false;
        return unescape(c_cookie[1]);
    }

    ABTest.prototype.getVersion = function(cookieName) {
        var o_cookie = this.getOneInConfig(cookieName);
        var c_cookie = this.getOneInCookie(cookieName);
        if(! o_cookie || ! c_cookie)
            return false;
        var c_value = unescape(c_cookie[1]);

        var o_values = o_cookie['cookieValues'];
        for(var i = 0; i < o_values.length; i ++) {
            var o_value = o_values[i]['activeValues'];
            if(c_value == o_value[0]) {
                return 'old';
            } else if(c_value == o_value[1]) {
                return 'new';
            }
        }
        return false;
    }

    ABTest.prototype.setUrl = function (container, attribute, urlKey, cookieName) {
        var urlVal = this.getCookie(cookieName);
        if(! urlVal)
            return false;
        $(container).each(function(index, elem) {
            var url = $(elem).attr(attribute);
            if(url.length < 1) {
                return false;
            }
            var urlNew = request.setOne(url, urlKey, urlVal);
            $(elem).attr(attribute, urlNew);
        });
    }

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2FiVGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxuXHJcbiAgICB2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHJcbiAgICB2YXIgQ29va2llID0gcmVxdWlyZSgnLi4vbW9kL2Nvb2tpZScpO1xyXG4gICAgdmFyIGNvb2tpZSA9IG5ldyBDb29raWUoKTtcclxuXHJcbiAgICB2YXIgTXlBcnJheSA9IHJlcXVpcmUoJy4uL21vZC9teUFycmF5Jyk7XHJcbiAgICB2YXIgbXlhcnIgPSBuZXcgTXlBcnJheSgpO1xyXG5cclxuICAgIHZhciBSZXF1ZXN0ID0gcmVxdWlyZSgnLi4vbW9kL3JlcXVlc3QnKTtcclxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBBQlRlc3QoKSB7XHJcbiAgICAgICAgdGhpcy5hYnRlc3RfY29uZmlnID0gd2ViRGF0YS5hYnRlc3Q7XHJcbiAgICB9XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEFCVGVzdDtcclxuXHJcbiAgICBBQlRlc3QucHJvdG90eXBlLmdldE9uZUluQ29uZmlnID0gZnVuY3Rpb24oY29va2llTmFtZSkge1xyXG4gICAgICAgIHZhciBhYnRlc3RfY29uZmlnID0gdGhpcy5hYnRlc3RfY29uZmlnO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhYnRlc3RfY29uZmlnLmxlbmd0aDsgaSArKykge1xyXG4gICAgICAgICAgICB2YXIgb19jb29raWUgPSBhYnRlc3RfY29uZmlnW2ldO1xyXG4gICAgICAgICAgICBpZihvX2Nvb2tpZVsnY29va2llTmFtZSddID09IGNvb2tpZU5hbWUgJiYgb19jb29raWVbJ2lzQWN0aXZlJ10gJiYgbXlhcnIuaW5fYXJyYXkod2ViRGF0YS5sYW5nLCBvX2Nvb2tpZVsnbGFuZ3VhZ2VzJ10pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9fY29va2llO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgQUJUZXN0LnByb3RvdHlwZS5nZXRPbmVJbkNvb2tpZSA9IGZ1bmN0aW9uKGNvb2tpZU5hbWUpIHtcclxuICAgICAgICB2YXIgYWJ0ZXN0X2Nvb2tpZSA9IGNvb2tpZS5nZXRDb29raWUoJ2FiVGVzdCcpID8gY29va2llLmdldENvb2tpZSgnYWJUZXN0JykgOiAnJztcclxuICAgICAgICBpZihhYnRlc3RfY29va2llLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgYWJ0ZXN0X2Nvb2tpZSA9IGFidGVzdF9jb29raWUuc3BsaXQoJywnKTtcclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYWJ0ZXN0X2Nvb2tpZS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICAgICAgdmFyIGNfY29va2llID0gIGFidGVzdF9jb29raWVbaV0uc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgaWYoY19jb29raWVbMF0gPT0gY29va2llTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNfY29va2llO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiDor6Xmk43kvZzlt7LlnKhwaHDnq6/miafooYxcclxuICAgICBBQlRlc3QucHJvdG90eXBlLnNldENvb2tpZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgIHZhciBhYnRlc3RfY29uZmlnID0gdGhpcy5hYnRlc3RfY29uZmlnO1xyXG4gICAgIHZhciBhYnRlc3RfY29va2llID0gY29va2llLmdldENvb2tpZSgnYWJUZXN0JykgPyBjb29raWUuZ2V0Q29va2llKCdhYlRlc3QnKSA6ICcnLFxyXG4gICAgIGFidGVzdF9jb29raWVfYXJyID0gYWJ0ZXN0X2Nvb2tpZS5zcGxpdCgnLCcpLFxyXG4gICAgIG5ld19jb29raWUgPSAnJyxcclxuICAgICBuZXdfY29va2llX2FyciA9IFtdLFxyXG4gICAgIHVuaXF1ZV9uYW1lcyA9IHt9O1xyXG4gICAgIGlmKGFidGVzdF9jb25maWcubGVuZ3RoID09IDApXHJcbiAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhYnRlc3RfY29uZmlnLmxlbmd0aDsgaSArKykge1xyXG4gICAgIHZhciBvX2Nvb2tpZSA9IGFidGVzdF9jb25maWdbaV0sXHJcbiAgICAgb19uYW1lID0gb19jb29raWVbJ2Nvb2tpZU5hbWUnXTtcclxuXHJcbiAgICAgLy9jb29raWUgbXVzdCBiZSB1bmlxdWUgYW5kIGFjdGl2ZVxyXG4gICAgIGlmICgodHlwZW9mKHVuaXF1ZV9uYW1lc1tvX25hbWVdKSAhPSAndW5kZWZpbmVkJykgfHwgKCEgb19jb29raWVbJ2lzQWN0aXZlJ10pKXtcclxuICAgICBjb250aW51ZTtcclxuICAgICB9XHJcbiAgICAgdW5pcXVlX25hbWVzW29fbmFtZV0gPSAxO1xyXG5cclxuICAgICB2YXIgb192YWx1ZXMgPSBvX2Nvb2tpZVsnY29va2llVmFsdWUnXSxcclxuICAgICBvX3JhdGUwID0gcGFyc2VJbnQob19jb29raWVbJ2Nvb2tpZVJhdGUnXVswXSksXHJcbiAgICAgb19yYXRlMSA9IHBhcnNlSW50KG9fY29va2llWydjb29raWVSYXRlJ11bMV0pO1xyXG5cclxuICAgICB2YXIgY19jb29raWUgPSBtZS5nZXRPbmVJbkNvb2tpZShvX25hbWUpO1xyXG4gICAgIGlmKGNfY29va2llICE9IGZhbHNlICYmIGNfY29va2llWzJdID09IG9fcmF0ZTAgJiYgY19jb29raWVbM10gPT0gb19yYXRlMSAmJiBteWFyci5pbl9hcnJheShjX2Nvb2tpZVsxXSwgb192YWx1ZXMpKSAge1xyXG4gICAgIG5ld19jb29raWVfYXJyLnB1c2goY19jb29raWUuam9pbignfCcpKTtcclxuICAgICBjb250aW51ZTtcclxuICAgICB9XHJcblxyXG4gICAgIHZhciByYW5kID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIChvX3JhdGUwICsgb19yYXRlMSkpICsgMTtcclxuICAgICB2YXIgb192YWx1ZSA9IChyYW5kIDw9IG9fcmF0ZTApID8gb192YWx1ZXNbMF0gOiBvX3ZhbHVlc1sxXTtcclxuICAgICBuZXdfY29va2llX2Fyci5wdXNoKG9fbmFtZSArICd8JyArIG9fdmFsdWUgKyAnfCcgKyBvX3JhdGUwICsgJ3wnICsgb19yYXRlMSk7XHJcbiAgICAgfVxyXG4gICAgIG5ld19jb29raWUgPSBuZXdfY29va2llX2Fyci5qb2luKCcsJyk7XHJcbiAgICAgaWYoYWJ0ZXN0X2Nvb2tpZSAhPSBuZXdfY29va2llKSB7XHJcbiAgICAgY29va2llLnNldENvb2tpZSgnYWJUZXN0JywgbmV3X2Nvb2tpZSwgMzY1KTtcclxuICAgICAvL2NvbnNvbGUubG9nKCdzZXRDb29raWU6ICcgKyBuZXdfY29va2llKTtcclxuICAgICB9XHJcbiAgICAgfVxyXG4gICAgICovXHJcblxyXG4gICAgQUJUZXN0LnByb3RvdHlwZS5nZXRDb29raWUgPSBmdW5jdGlvbiAoY29va2llTmFtZSkge1xyXG4gICAgICAgIHZhciBvX2Nvb2tpZSA9IHRoaXMuZ2V0T25lSW5Db25maWcoY29va2llTmFtZSk7XHJcbiAgICAgICAgdmFyIGNfY29va2llID0gdGhpcy5nZXRPbmVJbkNvb2tpZShjb29raWVOYW1lKTtcclxuICAgICAgICBpZighIG9fY29va2llIHx8ICEgY19jb29raWUpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdW5lc2NhcGUoY19jb29raWVbMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIEFCVGVzdC5wcm90b3R5cGUuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uKGNvb2tpZU5hbWUpIHtcclxuICAgICAgICB2YXIgb19jb29raWUgPSB0aGlzLmdldE9uZUluQ29uZmlnKGNvb2tpZU5hbWUpO1xyXG4gICAgICAgIHZhciBjX2Nvb2tpZSA9IHRoaXMuZ2V0T25lSW5Db29raWUoY29va2llTmFtZSk7XHJcbiAgICAgICAgaWYoISBvX2Nvb2tpZSB8fCAhIGNfY29va2llKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGNfdmFsdWUgPSB1bmVzY2FwZShjX2Nvb2tpZVsxXSk7XHJcblxyXG4gICAgICAgIHZhciBvX3ZhbHVlcyA9IG9fY29va2llWydjb29raWVWYWx1ZXMnXTtcclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb192YWx1ZXMubGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvX3ZhbHVlID0gb192YWx1ZXNbaV1bJ2FjdGl2ZVZhbHVlcyddO1xyXG4gICAgICAgICAgICBpZihjX3ZhbHVlID09IG9fdmFsdWVbMF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnb2xkJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmKGNfdmFsdWUgPT0gb192YWx1ZVsxXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICduZXcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBBQlRlc3QucHJvdG90eXBlLnNldFVybCA9IGZ1bmN0aW9uIChjb250YWluZXIsIGF0dHJpYnV0ZSwgdXJsS2V5LCBjb29raWVOYW1lKSB7XHJcbiAgICAgICAgdmFyIHVybFZhbCA9IHRoaXMuZ2V0Q29va2llKGNvb2tpZU5hbWUpO1xyXG4gICAgICAgIGlmKCEgdXJsVmFsKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgJChjb250YWluZXIpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW0pIHtcclxuICAgICAgICAgICAgdmFyIHVybCA9ICQoZWxlbSkuYXR0cihhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICBpZih1cmwubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB1cmxOZXcgPSByZXF1ZXN0LnNldE9uZSh1cmwsIHVybEtleSwgdXJsVmFsKTtcclxuICAgICAgICAgICAgJChlbGVtKS5hdHRyKGF0dHJpYnV0ZSwgdXJsTmV3KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbi8vfSk7Il19
},{"../mod/cookie":3,"../mod/myArray":4,"../mod/request":5}],3:[function(require,module,exports){
//define(function (require, exports, module) {

	function Cookie() {}
	module.exports = Cookie;
	var cookie_domain = webData.cookie_domain
	
	Cookie.prototype.setCookie = function (NameOfCookie, value, expiredays, domain) {
		if (expiredays == null || expiredays == undefined || expiredays == '' || isNaN(expiredays)) {
			expiredays = 365;
		}
		var ExpireDate = new Date();
		ExpireDate.setTime(ExpireDate.getTime() + (expiredays * 24 * 3600 * 1000));
		domain = domain ? domain : cookie_domain
        var _domain = domain ? ";domain=" + domain : ""
		document.cookie = NameOfCookie + "=" + escape(value) + _domain + ((expiredays == null) ? "": ";path=/; expires=" + ExpireDate.toGMTString());
	}

	Cookie.prototype.getCookie = function (NameOfCookie) {
		if (document.cookie.length > 0) {
			begin = document.cookie.indexOf(NameOfCookie + "=");
			if (begin != -1) {
				begin += NameOfCookie.length + 1;
				end = document.cookie.indexOf(";", begin);
				if (end == -1) end = document.cookie.length;
				return unescape(document.cookie.substring(begin, end));
			}
		}
		return null;
	}
	
//});

},{}],4:[function(require,module,exports){
//define(function (require, exports, module) {
	
	function MyArray() {}
	module.exports = MyArray;

	MyArray.prototype.in_array = function (elem, arr) {
		for(var i = 0; i < arr.length; i++){
			if(arr[i] == elem)
				return true;
		}
		return false;
	}
	
	MyArray.prototype.getIndex = function (elem, arr) {
		for(var i = 0; i < arr.length; i++){
			if(arr[i] == elem)
				return i;
		}
		return false;
	}

//});

},{}],5:[function(require,module,exports){
//define(function (require, exports, module) {

	function Request() {}
	module.exports = Request;

	Request.prototype.getAll = function () {
		var url = location.search;
		var requests = new Object();
		if (url.indexOf("?") != -1) {
			var str = url.substr(1);
			strs = str.split("&");
			for (var i = 0; i < strs.length; i++) {
				requests[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
			}
		}
		return requests;
	}
	
	Request.prototype.getOne = function (key) {
		var requests = this.getAll();
		return requests[key];
	}
	
	Request.prototype.setOne = function (url, key, val) {
		var url_new = '';
		if(url.indexOf('?' + key + '=') != -1 || url.indexOf('&' + key + '=') != -1) {
			return url;
		} else if (url.indexOf('?') != -1) {
			url_new = url.replace('?', '?' + key + '=' + val + '&');
		} else if(url.indexOf('#') != -1) {
			url_new = url.replace('#', '?' + key + '=' + val + '#');
		} else {
			url_new = url + '?' + key + '=' + val;
		}
		return url_new;
	}

//});

},{}],"redirect":[function(require,module,exports){
// require('./common')

require('../common/redirect'); // redirect for ABTest
},{"../common/redirect":1}]},{},[])
//# sourceMappingURL=data:application/json;base64,
