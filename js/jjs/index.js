require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

$(function() {
    if($('.download_app_sus')[0]) {
        var DownloadAppSus = require('../mod/downloadAppSus');
        var bownloadAppSus = new DownloadAppSus('.download_app_sus');
        bownloadAppSus.init();
    }
});

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvY29tbW9uL2Rvd25sb2FkX2FwcF9zdXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcbnZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuJChmdW5jdGlvbigpIHtcclxuICAgIGlmKCQoJy5kb3dubG9hZF9hcHBfc3VzJylbMF0pIHtcclxuICAgICAgICB2YXIgRG93bmxvYWRBcHBTdXMgPSByZXF1aXJlKCcuLi9tb2QvZG93bmxvYWRBcHBTdXMnKTtcclxuICAgICAgICB2YXIgYm93bmxvYWRBcHBTdXMgPSBuZXcgRG93bmxvYWRBcHBTdXMoJy5kb3dubG9hZF9hcHBfc3VzJyk7XHJcbiAgICAgICAgYm93bmxvYWRBcHBTdXMuaW5pdCgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vfSk7XHJcbiJdfQ==
},{"../mod/downloadAppSus":18}],2:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var bottom_space = 13;

var close = function (popwin) {
    var space = 0 - popwin.outerHeight() - 13;
    popwin.animate({bottom:space}, 500);
};

var openSkipPop = function () {
    var popwin = $('#popSkip');
    if(popwin){
        popwin.animate({bottom:bottom_space}, 500);
        popwin.delegate('.close,.local', 'click', function () {
            close(popwin);
            return false;
        });
        setTimeout(function () {
            close(popwin);
        }, 20000);
    }
};

exports.init = function () {
	var Cookie = require('../mod/cookie');
	var cookie = new Cookie();
    var nojump = cookie.getCookie('nl_nojump');
    if(pageData.popSkipConf && pageData.popSkipConf.trim().length > 0){
        var config = eval("(" + pageData.popSkipConf.trim() + ")");
        for (var i = 0; i<config.length; i++) {
            var cond = config[i];
            if(cond.targetUrl.toLowerCase().indexOf(location.hostname.toLowerCase()) >= 0){
                continue
            }
            if(webData.lang == cond.lang && webData.currency == cond.currency && !nojump) {
                cookie.setCookie('nl_nojump', 1, 365);
                targetUrl = cond.targetUrl;
                targetText = cond.targetText;
                $("#popSkip").find('.go').attr('href',targetUrl).text(targetText);
                $("#popSkip").find('go-block').attr('href',targetUrl);
                openSkipPop();
                break;
            }
        }
    }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvY29tbW9uL3BvcF9za2lwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxudmFyIGJvdHRvbV9zcGFjZSA9IDEzO1xyXG5cclxudmFyIGNsb3NlID0gZnVuY3Rpb24gKHBvcHdpbikge1xyXG4gICAgdmFyIHNwYWNlID0gMCAtIHBvcHdpbi5vdXRlckhlaWdodCgpIC0gMTM7XHJcbiAgICBwb3B3aW4uYW5pbWF0ZSh7Ym90dG9tOnNwYWNlfSwgNTAwKTtcclxufTtcclxuXHJcbnZhciBvcGVuU2tpcFBvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwb3B3aW4gPSAkKCcjcG9wU2tpcCcpO1xyXG4gICAgaWYocG9wd2luKXtcclxuICAgICAgICBwb3B3aW4uYW5pbWF0ZSh7Ym90dG9tOmJvdHRvbV9zcGFjZX0sIDUwMCk7XHJcbiAgICAgICAgcG9wd2luLmRlbGVnYXRlKCcuY2xvc2UsLmxvY2FsJywgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjbG9zZShwb3B3aW4pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNsb3NlKHBvcHdpbik7XHJcbiAgICAgICAgfSwgMjAwMDApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cdHZhciBDb29raWUgPSByZXF1aXJlKCcuLi9tb2QvY29va2llJyk7XHJcblx0dmFyIGNvb2tpZSA9IG5ldyBDb29raWUoKTtcclxuICAgIHZhciBub2p1bXAgPSBjb29raWUuZ2V0Q29va2llKCdubF9ub2p1bXAnKTtcclxuICAgIGlmKHBhZ2VEYXRhLnBvcFNraXBDb25mICYmIHBhZ2VEYXRhLnBvcFNraXBDb25mLnRyaW0oKS5sZW5ndGggPiAwKXtcclxuICAgICAgICB2YXIgY29uZmlnID0gZXZhbChcIihcIiArIHBhZ2VEYXRhLnBvcFNraXBDb25mLnRyaW0oKSArIFwiKVwiKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaTxjb25maWcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvbmQgPSBjb25maWdbaV07XHJcbiAgICAgICAgICAgIGlmKGNvbmQudGFyZ2V0VXJsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihsb2NhdGlvbi5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpKSA+PSAwKXtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYod2ViRGF0YS5sYW5nID09IGNvbmQubGFuZyAmJiB3ZWJEYXRhLmN1cnJlbmN5ID09IGNvbmQuY3VycmVuY3kgJiYgIW5vanVtcCkge1xyXG4gICAgICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnbmxfbm9qdW1wJywgMSwgMzY1KTtcclxuICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IGNvbmQudGFyZ2V0VXJsO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGV4dCA9IGNvbmQudGFyZ2V0VGV4dDtcclxuICAgICAgICAgICAgICAgICQoXCIjcG9wU2tpcFwiKS5maW5kKCcuZ28nKS5hdHRyKCdocmVmJyx0YXJnZXRVcmwpLnRleHQodGFyZ2V0VGV4dCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3BvcFNraXBcIikuZmluZCgnZ28tYmxvY2snKS5hdHRyKCdocmVmJyx0YXJnZXRVcmwpO1xyXG4gICAgICAgICAgICAgICAgb3BlblNraXBQb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuIl19
},{"../mod/cookie":14}],3:[function(require,module,exports){
(function (global){
var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var Countdown = require('../mod/countdown');
const reviseFeatureName = 'carouselBanners';
var revisingFeaturesList = typeof pageData.revisingFeaturesList != undefined ? pageData.revisingFeaturesList : [];

(function($, revisingFeaturesList) {
    var specialOfferCountdown = $('.banner-countdown-SpecialOffer');
    var pageTypeCode =  typeof pageData.js_key != undefined ? pageData.js_key : '';
    var initBannerSize = function() {
        if (pageTypeCode == 'landing_page') {
            var bannerSize = getLandingBannerSize();
        } else if(revisingFeaturesList.indexOf(reviseFeatureName) > -1) {
            var bannerSize = getMergedBannerSize();
        }else {
            var bannerSize = getBannerSize();
        }
        var reSizeSelector = "img, ul, li, .focus, .focus_wrap, .jfocus, .narrow_banner_content, .wide_banner, .merged-carousel-banner";
        //landing page fix height
        if (pageTypeCode != 'landing_page') {
            $index = $(".index_auto_banner");
        } else {
            $index = $(".landing-page-auto-banner");
        }
        // $index.find(reSizeSelector).css({'width': bannerSize.bannerWidth+'px', 'height': bannerSize.bannerHeight+'px'});
        // $index.css({'height': bannerSize.bannerHeight+'px'});
    };

    var initCountdownSize = function () {
        if(specialOfferCountdown.length > 0) {
            if(revisingFeaturesList.indexOf(reviseFeatureName) > -1) {
                var bannerSize = getMergedBannerSize();
                $('.merged-carousel-banner .banner-countdown-SpecialOffer').css({'font-size': Math.round(bannerSize.bannerWidth / 1700 * 70 * 2) / 2 + 'px'});
            } else {
                var bannerSize = getBannerSize();
                $('.narrow_banner .banner-countdown-SpecialOffer').css({'font-size': Math.round(bannerSize.bannerWidth / 1200 * 56 * 2) / 2 + 'px'});

                $('.wide_banner .banner-countdown-SpecialOffer').css({'font-size': Math.round(bannerSize.bannerWidth / 1600 * 70 * 2) / 2 + 'px'});
            }
        }
    };

    var getBannerSize = function() {
        var bannerWidth;
        var bannerHeight;
        var clientWidth = window.innerWidth;
        var clientRealWidth = $(window).width();
        if(clientWidth > 1600) {
            bannerWidth = 1600;
            bannerHeight = 670;
        }else if(clientWidth >= 1400) {
            bannerWidth = clientRealWidth;
            bannerHeight = clientRealWidth * 670 / 1600;
        }else if(clientWidth > 1200) {
            bannerWidth = 1200;
            bannerHeight = 600;
        }else if(clientWidth > 990) {
            bannerWidth = clientRealWidth;
            bannerHeight = clientRealWidth * 600 / 1200;
        }else {
            bannerWidth = 990;
            bannerHeight = 990 * 600 / 1200;
        }
        return {"bannerWidth":bannerWidth,"bannerHeight":bannerHeight};
    };

    var getMergedBannerSize = function() {
        var bannerWidth;
        var bannerHeight;
        var clientWidth = window.innerWidth;
        var clientRealWidth = $(window).width();
        if(clientWidth > 990) {
            bannerWidth = clientRealWidth * 1920 / 1920;
            bannerHeight = clientRealWidth * 550 / 1920;
        }else {
            bannerWidth = 990;
            bannerHeight = 284;
        }
        return {"bannerWidth":bannerWidth,"bannerHeight":bannerHeight};
    }

    var getLandingBannerSize = function() {
        var bannerWidth;
        var bannerHeight;
        var clientWidth = window.innerWidth;
        var clientRealWidth = $(window).width();
        if(clientWidth >= 1024) {
            bannerWidth = clientRealWidth * 1920 / 1920;
            bannerHeight = clientRealWidth * 550 / 1920;
        }else {
            bannerWidth = 1007;
            bannerHeight = 288;
        }
        return {"bannerWidth":bannerWidth,"bannerHeight":bannerHeight};
    }

    initBannerSize();
    $(window).resize(function(){
        initBannerSize();
        initCountdownSize();
    });

    function addLoadEvent(func){
        var oldOnLoad = window.onload;
        if(typeof window.onload != 'function'){
            window.onload = func;
        }else{
            window.onload = function(){
                oldOnLoad();
                func();
            }
        }
    }

    var bannerInit = function (){
        $(".index_auto_banner").find('img').each(function(){
            if(typeof $(this).attr('src') == 'undefined' && typeof $(this).attr('data-src') != 'undefined'){
                $(this).attr('src',$(this).attr('data-src'));
            }
        });
    };
    addLoadEvent(bannerInit);

    $(".index-banner-popup").click(function (){
        $('#promotion-top-popup-img').show();
    });

    if(specialOfferCountdown.length > 0) {
        $.ajax({
            'type': 'POST',
            'url': webData.WEB_ROOT + 'ajax_general_promotion.php',
            'data': 'act=get_general_promotion_time&promotion_name=SpecialOffer',
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    var _time = r.end_time - r.now_time;
                    var banner_cd = new Countdown('.banner-countdown-SpecialOffer', _time, r.time_format, false, false, true);
                    banner_cd.run();
                    initCountdownSize();
                }
            }
        })
    }
})(jQuery, revisingFeaturesList);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/countdown":15}],4:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    (function(){
        var items0 = $('.billboard-product>div').eq(0);
	    var items1 = $('.billboard-product>div').eq(1);
	    var height0 = items0.height();
	    var height1 = items1.height();
	    items0.find('>div').height(height0);
	    items1.find('>div').height(height1);	
    })();
    
    $(function() {
        $('.billboard-product .rect a').hover(function() {
            $(this).children('.imageHover').show();
        }, function() {
            $(this).children('.imageHover').hide();
        });
    });

    $(function(){
        $('#faqs_livechat_service').click(function(){
            $('#faqs_livechat').addClass('faqs_livechat_open');
            $("#faqs_help_content").show();
            $('#faqs_livechat').find('.faqs-chat-content').hide();
            $("#chat-widget-container").css("display", 'none');
        })
    });
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvaW5kZXgvYmlsbGJvYXJkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcblx0dmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblxyXG4gICAgKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgdmFyIGl0ZW1zMCA9ICQoJy5iaWxsYm9hcmQtcHJvZHVjdD5kaXYnKS5lcSgwKTtcclxuXHQgICAgdmFyIGl0ZW1zMSA9ICQoJy5iaWxsYm9hcmQtcHJvZHVjdD5kaXYnKS5lcSgxKTtcclxuXHQgICAgdmFyIGhlaWdodDAgPSBpdGVtczAuaGVpZ2h0KCk7XHJcblx0ICAgIHZhciBoZWlnaHQxID0gaXRlbXMxLmhlaWdodCgpO1xyXG5cdCAgICBpdGVtczAuZmluZCgnPmRpdicpLmhlaWdodChoZWlnaHQwKTtcclxuXHQgICAgaXRlbXMxLmZpbmQoJz5kaXYnKS5oZWlnaHQoaGVpZ2h0MSk7XHRcclxuICAgIH0pKCk7XHJcbiAgICBcclxuICAgICQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJCgnLmJpbGxib2FyZC1wcm9kdWN0IC5yZWN0IGEnKS5ob3ZlcihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbignLmltYWdlSG92ZXInKS5zaG93KCk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy5pbWFnZUhvdmVyJykuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChmdW5jdGlvbigpe1xyXG4gICAgICAgICQoJyNmYXFzX2xpdmVjaGF0X3NlcnZpY2UnKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAkKCcjZmFxc19saXZlY2hhdCcpLmFkZENsYXNzKCdmYXFzX2xpdmVjaGF0X29wZW4nKTtcclxuICAgICAgICAgICAgJChcIiNmYXFzX2hlbHBfY29udGVudFwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJyNmYXFzX2xpdmVjaGF0JykuZmluZCgnLmZhcXMtY2hhdC1jb250ZW50JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKFwiI2NoYXQtd2lkZ2V0LWNvbnRhaW5lclwiKS5jc3MoXCJkaXNwbGF5XCIsICdub25lJyk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG4vL30pOyJdfQ==
},{}],5:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	function get_recent_order() {
        $.getJSON(webData.WEB_ROOT + 'ajax.php?act=get_recent_order',
            function(r) {
                var ohtml = '';
                for (var i = 0; i < r.length; i++) {
                    ohtml += '<li><span class="recent_order_icon">&nbsp;</span><a rel="nofollow" href="' + 
                    r[i].url + 
                    '" target="_blank"> ' + 
                    r[i].goods_name + 
                    ' </a><br/>' + 
                    pageData.shipTo + ' ' +
                    r[i].address + '</li>';
                }
                $('#recent_order_info').html(ohtml + ohtml);
                scroll_order(1);
            }
        );
    }

    function scroll_order(time) {
        var sp = 70 * time + 'px';
        $('#recent_order_info').animate({
            scrollTop: sp
        }, 3000, function() {
            ++time;
            if (time == 16) {
                $('#recent_order_info').scrollTop(0);
                time = 1;
            }
            setTimeout(function() {
                scroll_order(time)
            }, 3000);
        });
    }
    get_recent_order();
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvaW5kZXgvcmVjZW50X29yZGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxuXHR2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHRcclxuXHRmdW5jdGlvbiBnZXRfcmVjZW50X29yZGVyKCkge1xyXG4gICAgICAgICQuZ2V0SlNPTih3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwP2FjdD1nZXRfcmVjZW50X29yZGVyJyxcclxuICAgICAgICAgICAgZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9odG1sID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBvaHRtbCArPSAnPGxpPjxzcGFuIGNsYXNzPVwicmVjZW50X29yZGVyX2ljb25cIj4mbmJzcDs8L3NwYW4+PGEgcmVsPVwibm9mb2xsb3dcIiBocmVmPVwiJyArIFxyXG4gICAgICAgICAgICAgICAgICAgIHJbaV0udXJsICsgXHJcbiAgICAgICAgICAgICAgICAgICAgJ1wiIHRhcmdldD1cIl9ibGFua1wiPiAnICsgXHJcbiAgICAgICAgICAgICAgICAgICAgcltpXS5nb29kc19uYW1lICsgXHJcbiAgICAgICAgICAgICAgICAgICAgJyA8L2E+PGJyLz4nICsgXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZURhdGEuc2hpcFRvICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICByW2ldLmFkZHJlc3MgKyAnPC9saT4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJCgnI3JlY2VudF9vcmRlcl9pbmZvJykuaHRtbChvaHRtbCArIG9odG1sKTtcclxuICAgICAgICAgICAgICAgIHNjcm9sbF9vcmRlcigxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2Nyb2xsX29yZGVyKHRpbWUpIHtcclxuICAgICAgICB2YXIgc3AgPSA3MCAqIHRpbWUgKyAncHgnO1xyXG4gICAgICAgICQoJyNyZWNlbnRfb3JkZXJfaW5mbycpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IHNwXHJcbiAgICAgICAgfSwgMzAwMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICsrdGltZTtcclxuICAgICAgICAgICAgaWYgKHRpbWUgPT0gMTYpIHtcclxuICAgICAgICAgICAgICAgICQoJyNyZWNlbnRfb3JkZXJfaW5mbycpLnNjcm9sbFRvcCgwKTtcclxuICAgICAgICAgICAgICAgIHRpbWUgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxfb3JkZXIodGltZSlcclxuICAgICAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXRfcmVjZW50X29yZGVyKCk7XHJcbi8vfSk7Il19
},{}],6:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var pagesize = window.matchMedia("(max-width: 1400px)").matches ? 5 : 6;
var specialOfferContainer = $('.special-offer-container');
var goodsUl = specialOfferContainer.find('.recommend-goods');
var currItem = 0;
var totalItems = goodsUl.children('li').length;
var exposureContain = [];

function init_handler() {
    specialOfferContainer.delegate('.arrow_left', 'click', function () {
        currItem -= pagesize;
        show_items();
    })
    specialOfferContainer.delegate('.arrow_right', 'click', function () {
        currItem += pagesize;
        show_items();
    })
}

function init_items() {
    show_items();
}

function init() {
    init_items()
    init_handler();
}

function show_items() {
    goodsUl.children('li').hide();
    if(currItem + pagesize > totalItems) {
        currItem += totalItems % pagesize - pagesize;
    }
    if(currItem < 0) {
        currItem = 0;
    }
    for(var i = currItem; i < currItem + pagesize; i ++) {
        goodsUl.children('li').eq(i).show()
        if (exposureContain.indexOf(i) === -1) {
            var soo = $('#special_offer_'+(i+1))
            if(soo) {
                soo.click()
                exposureContain.push(i)
            }
        }
    }
    show_btns();
}
var specialOffer = function(){
    for (var i=0;i< pagesize;i++) {
        $('#special_offer_'+(i+1)).click();
        exposureContain.push(i)
    }
}
function addSpecialOfferEvent(func){
    var oldOnLoad = window.onload;
    if(typeof window.onload != 'function'){
        window.onload = func;
    }else{
        window.onload = function(){
            oldOnLoad();
            func();
        }
    }
}
addSpecialOfferEvent(specialOffer);

function show_btns() {
    var nextBtn = specialOfferContainer.find('.arrow_right');
    var preBtn = specialOfferContainer.find('.arrow_left');
    if(currItem + pagesize >= totalItems) {
        nextBtn.hide();
    }else {
        nextBtn.show();
    }
    if(currItem <= 0) {
        preBtn.hide();
    } else {
        preBtn.show();
    }
}

$(window).resize(function () {
    pagesize = window.matchMedia("(max-width: 1400px)").matches ? 5 : 6;
})

module.exports = {
    "init": init
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvaW5kZXgvc3BlY2lhbC1vZmZlci1pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxudmFyIHBhZ2VzaXplID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiAxNDAwcHgpXCIpLm1hdGNoZXMgPyA1IDogNjtcclxudmFyIHNwZWNpYWxPZmZlckNvbnRhaW5lciA9ICQoJy5zcGVjaWFsLW9mZmVyLWNvbnRhaW5lcicpO1xyXG52YXIgZ29vZHNVbCA9IHNwZWNpYWxPZmZlckNvbnRhaW5lci5maW5kKCcucmVjb21tZW5kLWdvb2RzJyk7XHJcbnZhciBjdXJySXRlbSA9IDA7XHJcbnZhciB0b3RhbEl0ZW1zID0gZ29vZHNVbC5jaGlsZHJlbignbGknKS5sZW5ndGg7XHJcbnZhciBleHBvc3VyZUNvbnRhaW4gPSBbXTtcclxuXHJcbmZ1bmN0aW9uIGluaXRfaGFuZGxlcigpIHtcclxuICAgIHNwZWNpYWxPZmZlckNvbnRhaW5lci5kZWxlZ2F0ZSgnLmFycm93X2xlZnQnLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY3Vyckl0ZW0gLT0gcGFnZXNpemU7XHJcbiAgICAgICAgc2hvd19pdGVtcygpO1xyXG4gICAgfSlcclxuICAgIHNwZWNpYWxPZmZlckNvbnRhaW5lci5kZWxlZ2F0ZSgnLmFycm93X3JpZ2h0JywgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGN1cnJJdGVtICs9IHBhZ2VzaXplO1xyXG4gICAgICAgIHNob3dfaXRlbXMoKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRfaXRlbXMoKSB7XHJcbiAgICBzaG93X2l0ZW1zKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICBpbml0X2l0ZW1zKClcclxuICAgIGluaXRfaGFuZGxlcigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93X2l0ZW1zKCkge1xyXG4gICAgZ29vZHNVbC5jaGlsZHJlbignbGknKS5oaWRlKCk7XHJcbiAgICBpZihjdXJySXRlbSArIHBhZ2VzaXplID4gdG90YWxJdGVtcykge1xyXG4gICAgICAgIGN1cnJJdGVtICs9IHRvdGFsSXRlbXMgJSBwYWdlc2l6ZSAtIHBhZ2VzaXplO1xyXG4gICAgfVxyXG4gICAgaWYoY3Vyckl0ZW0gPCAwKSB7XHJcbiAgICAgICAgY3Vyckl0ZW0gPSAwO1xyXG4gICAgfVxyXG4gICAgZm9yKHZhciBpID0gY3Vyckl0ZW07IGkgPCBjdXJySXRlbSArIHBhZ2VzaXplOyBpICsrKSB7XHJcbiAgICAgICAgZ29vZHNVbC5jaGlsZHJlbignbGknKS5lcShpKS5zaG93KClcclxuICAgICAgICBpZiAoZXhwb3N1cmVDb250YWluLmluZGV4T2YoaSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHZhciBzb28gPSAkKCcjc3BlY2lhbF9vZmZlcl8nKyhpKzEpKVxyXG4gICAgICAgICAgICBpZihzb28pIHtcclxuICAgICAgICAgICAgICAgIHNvby5jbGljaygpXHJcbiAgICAgICAgICAgICAgICBleHBvc3VyZUNvbnRhaW4ucHVzaChpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd19idG5zKCk7XHJcbn1cclxudmFyIHNwZWNpYWxPZmZlciA9IGZ1bmN0aW9uKCl7XHJcbiAgICBmb3IgKHZhciBpPTA7aTwgcGFnZXNpemU7aSsrKSB7XHJcbiAgICAgICAgJCgnI3NwZWNpYWxfb2ZmZXJfJysoaSsxKSkuY2xpY2soKTtcclxuICAgICAgICBleHBvc3VyZUNvbnRhaW4ucHVzaChpKVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFkZFNwZWNpYWxPZmZlckV2ZW50KGZ1bmMpe1xyXG4gICAgdmFyIG9sZE9uTG9hZCA9IHdpbmRvdy5vbmxvYWQ7XHJcbiAgICBpZih0eXBlb2Ygd2luZG93Lm9ubG9hZCAhPSAnZnVuY3Rpb24nKXtcclxuICAgICAgICB3aW5kb3cub25sb2FkID0gZnVuYztcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBvbGRPbkxvYWQoKTtcclxuICAgICAgICAgICAgZnVuYygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5hZGRTcGVjaWFsT2ZmZXJFdmVudChzcGVjaWFsT2ZmZXIpO1xyXG5cclxuZnVuY3Rpb24gc2hvd19idG5zKCkge1xyXG4gICAgdmFyIG5leHRCdG4gPSBzcGVjaWFsT2ZmZXJDb250YWluZXIuZmluZCgnLmFycm93X3JpZ2h0Jyk7XHJcbiAgICB2YXIgcHJlQnRuID0gc3BlY2lhbE9mZmVyQ29udGFpbmVyLmZpbmQoJy5hcnJvd19sZWZ0Jyk7XHJcbiAgICBpZihjdXJySXRlbSArIHBhZ2VzaXplID49IHRvdGFsSXRlbXMpIHtcclxuICAgICAgICBuZXh0QnRuLmhpZGUoKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgICBuZXh0QnRuLnNob3coKTtcclxuICAgIH1cclxuICAgIGlmKGN1cnJJdGVtIDw9IDApIHtcclxuICAgICAgICBwcmVCdG4uaGlkZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwcmVCdG4uc2hvdygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4kKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcclxuICAgIHBhZ2VzaXplID0gd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiAxNDAwcHgpXCIpLm1hdGNoZXMgPyA1IDogNjtcclxufSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgXCJpbml0XCI6IGluaXRcclxufTtcclxuIl19
},{}],7:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    function get_testimonials() {
        var tms = pageData.testimonial;
        if (tms == null || tms == '') {
            return;
        }

        tms = eval('(' + tms + ')');

        var lang_code = webData.lang;
        var randIdx = Math.floor(Math.random() * tms.length);
        if (tms[randIdx] == null) {
            return;
        }
        var container = $('#testimonials');
        var testimonials = _lang[tms[randIdx].content];
        var sentences = "";
        testimonials = testimonials.split(" ");
        for (var i = 0; i < testimonials.length; ++i) {
            if (testimonials[i].length > 40) {
                sentences += "...";
                break;
            }

            if (sentences.length + testimonials[i].length < 280) {
                sentences = sentences + testimonials[i] + " ";
            }
            else {
                sentences += "...";
                break;
            }
        }

        container.find('span:eq(0)').html(sentences);
        var flag = '<img src="' + webData.IMG_PATH + 'flag/' + tms[randIdx]["flags"][lang_code] + '"> ';
        container.children('.by').html(flag + _lang[tms[randIdx].by]);
    }
    $(function(){
        get_testimonials();
    })
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvaW5kZXgvdGVzdGltb25pYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG4gICAgdmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbiAgICBmdW5jdGlvbiBnZXRfdGVzdGltb25pYWxzKCkge1xyXG4gICAgICAgIHZhciB0bXMgPSBwYWdlRGF0YS50ZXN0aW1vbmlhbDtcclxuICAgICAgICBpZiAodG1zID09IG51bGwgfHwgdG1zID09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRtcyA9IGV2YWwoJygnICsgdG1zICsgJyknKTtcclxuXHJcbiAgICAgICAgdmFyIGxhbmdfY29kZSA9IHdlYkRhdGEubGFuZztcclxuICAgICAgICB2YXIgcmFuZElkeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRtcy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICh0bXNbcmFuZElkeF0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb250YWluZXIgPSAkKCcjdGVzdGltb25pYWxzJyk7XHJcbiAgICAgICAgdmFyIHRlc3RpbW9uaWFscyA9IF9sYW5nW3Rtc1tyYW5kSWR4XS5jb250ZW50XTtcclxuICAgICAgICB2YXIgc2VudGVuY2VzID0gXCJcIjtcclxuICAgICAgICB0ZXN0aW1vbmlhbHMgPSB0ZXN0aW1vbmlhbHMuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVzdGltb25pYWxzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICh0ZXN0aW1vbmlhbHNbaV0ubGVuZ3RoID4gNDApIHtcclxuICAgICAgICAgICAgICAgIHNlbnRlbmNlcyArPSBcIi4uLlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzZW50ZW5jZXMubGVuZ3RoICsgdGVzdGltb25pYWxzW2ldLmxlbmd0aCA8IDI4MCkge1xyXG4gICAgICAgICAgICAgICAgc2VudGVuY2VzID0gc2VudGVuY2VzICsgdGVzdGltb25pYWxzW2ldICsgXCIgXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZW50ZW5jZXMgKz0gXCIuLi5cIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250YWluZXIuZmluZCgnc3BhbjplcSgwKScpLmh0bWwoc2VudGVuY2VzKTtcclxuICAgICAgICB2YXIgZmxhZyA9ICc8aW1nIHNyYz1cIicgKyB3ZWJEYXRhLklNR19QQVRIICsgJ2ZsYWcvJyArIHRtc1tyYW5kSWR4XVtcImZsYWdzXCJdW2xhbmdfY29kZV0gKyAnXCI+ICc7XHJcbiAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuKCcuYnknKS5odG1sKGZsYWcgKyBfbGFuZ1t0bXNbcmFuZElkeF0uYnldKTtcclxuICAgIH1cclxuICAgICQoZnVuY3Rpb24oKXtcclxuICAgICAgICBnZXRfdGVzdGltb25pYWxzKCk7XHJcbiAgICB9KVxyXG4vL30pOyJdfQ==
},{}],8:[function(require,module,exports){
(function (global){
var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

/*!
 * jQuery UI Core 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
(function( $, undefined ) {

var uuid = 0,
	runiqueId = /^ui-id-\d+$/;

// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.10.4",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	scrollParent: function() {
		var scrollParent;
		if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
			}).eq(0);
		}

		return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	uniqueId: function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.support.selectstart = "onselectstart" in document.createElement( "div" );
$.fn.extend({
	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.extend( $.ui, {
	// $.ui.plugin is deprecated. Use $.widget() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.ui[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var i,
				set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
				return;
			}

			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},

	// only used by resizable
	hasScroll: function( el, a ) {

		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	}
});

})( jQuery );

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],9:[function(require,module,exports){
(function (global){
var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('./core');

/*!
 * jQuery UI Datepicker 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.10.4" } });

var PROP_NAME = "datepicker",
	instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[""] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: ["January","February","March","April","May","June",
			"July","August","September","October","November","December"], // Names of months for drop-down and formatting
		monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
		dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
		dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
		dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional[""]);
	this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function(target, settings) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
		if (!target.id) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {});
		if (nodeName === "input") {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp);
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var showOn, buttonText, buttonImage,
			appendText = this._get(inst, "appendText"),
			isRTL = this._get(inst, "isRTL");

		if (inst.append) {
			inst.append.remove();
		}
		if (appendText) {
			inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](inst.append);
		}

		input.unbind("focus", this._showDatepicker);

		if (inst.trigger) {
			inst.trigger.remove();
		}

		showOn = this._get(inst, "showOn");
		if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		}
		if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
			buttonText = this._get(inst, "buttonText");
			buttonImage = this._get(inst, "buttonImage");
			inst.trigger = $(this._get(inst, "buttonImageOnly") ?
				$("<img/>").addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$("<button type='button'></button>").addClass(this._triggerClass).
					html(!buttonImage ? buttonText : $("<img/>").attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? "before" : "after"](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
					$.datepicker._hideDatepicker();
				} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker(input[0]);
				} else {
					$.datepicker._showDatepicker(input[0]);
				}
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, "autoSize") && !inst.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // Ensure double digits
				dateFormat = this._get(inst, "dateFormat");

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					"monthNames" : "monthNamesShort"))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
			}
			inst.input.attr("size", this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(inst.dpDiv);
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if (!inst) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown(this._doKeyDown);
			$("body").append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function(target) {
		var nodeName,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName === "input") {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind("focus", this._showDatepicker).
				unbind("keydown", this._doKeyDown).
				unbind("keypress", this._doKeyPress).
				unbind("keyup", this._doKeyUp);
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			inst.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function(target) {
		var nodeName, inline,
			$target = $(target),
			inst = $.data(target, PROP_NAME);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			inst.trigger.filter("button").
				each(function() { this.disabled = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("ui-state-disabled");
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function(target, name, value) {
		var settings, date, minDate, maxDate,
			inst = this._getInst(target);

		if (arguments.length === 2 && typeof name === "string") {
			return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name === "all" ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}

		settings = name || {};
		if (typeof name === "string") {
			settings = {};
			settings[name] = value;
		}

		if (inst) {
			if (this._curInst === inst) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker(target, true);
			minDate = this._getMinMaxDate(inst, "min");
			maxDate = this._getMinMaxDate(inst, "max");
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
				inst.settings.minDate = this._formatDate(inst, minDate);
			}
			if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker(target);
				} else {
					this._enableDatepicker(target);
				}
			}
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline) {
			this._setDateFromField(inst, noDefault);
		}
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst(event.target),
			handled = true,
			isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing) {
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv);
						if (sel[0]) {
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						}

						onSelect = $.datepicker._get(inst, "onSelect");
						if (onSelect) {
							dateStr = $.datepicker._formatDate(inst);

							// trigger custom callback
							onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, "stepBigMonths") :
							-$.datepicker._get(inst, "stepMonths")), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, "stepBigMonths") :
							+$.datepicker._get(inst, "stepMonths")), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							$.datepicker._clearDate(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							$.datepicker._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							$.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
							$.datepicker._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		} else {
			handled = false;
		}

		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var date,
			inst = $.datepicker._getInst(event.target);

		if (inst.input.val() !== inst.lastVal) {
			try {
				date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));

				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}

		beforeShow = $.datepicker._get(inst, "beforeShow");
		beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);

		if ($.datepicker._inDialog) { // hide cursor
			input.value = "";
		}
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});

		if (!inst.inline) {
			showAnim = $.datepicker._get(inst, "showAnim");
			duration = $.datepicker._get(inst, "duration");
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
			} else {
				inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

		var origyearshtml,
			numMonths = this._getNumberOfMonths(inst),
			cols = numMonths[1],
			width = 17;

		inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
		if (cols > 1) {
			inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("ui-datepicker-multi");
		inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
			"Class"]("ui-datepicker-rtl");

		if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.focus();
		}

		// deffered render of the years select (to avoid flashes on Firefox)
		if( inst.yearshtml ){
			origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var position,
			inst = this._getInst(obj),
			isRTL = this._get(inst, "isRTL");

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function(input) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
			return;
		}

		if (this._datepickerShowing) {
			showAnim = this._get(inst, "showAnim");
			duration = this._get(inst, "duration");
			postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
			} else {
				inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}

			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get(inst, "onClose");
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst) {
			return;
		}

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
				$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var date,
			target = $(id),
			inst = this._getInst(target[0]);

		if (this._get(inst, "gotoCurrent") && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id),
			inst = this._getInst(target[0]);

		inst["selected" + (period === "M" ? "Month" : "Year")] =
		inst["draw" + (period === "M" ? "Month" : "Year")] =
			parseInt(select.options[select.selectedIndex].value,10);

		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var inst,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}

		inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $("a", td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		this._selectDate(target, "");
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			inst = this._getInst(target[0]);

		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input) {
			inst.input.val(dateStr);
		}
		this._updateAlternate(inst);

		onSelect = this._get(inst, "onSelect");
		if (onSelect) {
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		} else if (inst.input) {
			inst.input.trigger("change"); // fire the change event
		}

		if (inst.inline){
			this._updateDatepicker(inst);
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) !== "object") {
				inst.input.focus(); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altFormat, date, dateStr,
			altField = this._get(inst, "altField");

		if (altField) { // update alternate field too
			altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
			date = this._getDate(inst);
			dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function(date) {
		var time,
			checkDate = new Date(date.getTime());

		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

		time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function (format, value, settings) {
		if (format == null || value == null) {
			throw "Invalid arguments";
		}

		value = (typeof value === "object" ? value.toString() : value + "");
		if (value === "") {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
			shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Extract a number from the string value
			getNumber = function(match) {
				var isDoubled = lookAhead(match),
					size = (match === "@" ? 14 : (match === "!" ? 20 :
					(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
					digits = new RegExp("^\\d{1," + size + "}"),
					num = value.substring(iValue).match(digits);
				if (!num) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[0].length;
				return parseInt(num[0], 10);
			},
			// Extract a name from the string value and convert to an index
			getName = function(match, shortNames, longNames) {
				var index = -1,
					names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
						return [ [k, v] ];
					}).sort(function (a, b) {
						return -(a[1].length - b[1].length);
					});

				$.each(names, function (i, pair) {
					var name = pair[1];
					if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
						index = pair[0];
						iValue += name.length;
						return false;
					}
				});
				if (index !== -1) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},
			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if (value.charAt(iValue) !== format.charAt(iFormat)) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						day = getNumber("d");
						break;
					case "D":
						getName("D", dayNamesShort, dayNames);
						break;
					case "o":
						doy = getNumber("o");
						break;
					case "m":
						month = getNumber("m");
						break;
					case "M":
						month = getName("M", monthNamesShort, monthNames);
						break;
					case "y":
						year = getNumber("y");
						break;
					case "@":
						date = new Date(getNumber("@"));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'")){
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if (iValue < value.length){
			extra = value.substr(iValue);
			if (!/^\s+/.test(extra)) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if (year === -1) {
			year = new Date().getFullYear();
		} else if (year < 100) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		}

		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim) {
					break;
				}
				month++;
				day -= dim;
			} while (true);
		}

		date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function (format, date, settings) {
		if (!date) {
			return "";
		}

		var iFormat,
			dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
			dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
			monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
			monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			},
			// Format a number, with leading zero if necessary
			formatNumber = function(match, value, len) {
				var num = "" + value;
				if (lookAhead(match)) {
					while (num.length < len) {
						num = "0" + num;
					}
				}
				return num;
			},
			// Format a name, short or long as requested
			formatName = function(match, value, shortNames, longNames) {
				return (lookAhead(match) ? longNames[value] : shortNames[value]);
			},
			output = "",
			literal = false;

		if (date) {
			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						output += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							output += formatNumber("d", date.getDate(), 2);
							break;
						case "D":
							output += formatName("D", date.getDay(), dayNamesShort, dayNames);
							break;
						case "o":
							output += formatNumber("o",
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case "m":
							output += formatNumber("m", date.getMonth() + 1, 2);
							break;
						case "M":
							output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
							break;
						case "y":
							output += (lookAhead("y") ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'")) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt(iFormat);
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,
			// Check whether a format character is doubled
			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() === inst.lastVal) {
			return;
		}

		var dateFormat = this._get(inst, "dateFormat"),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate(inst),
			date = defaultDate,
			settings = this._getFormatConfig(inst);

		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			dates = (noDefault ? "" : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						offset, $.datepicker._getFormatConfig(inst));
				}
				catch (e) {
					// Ignore
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					$.datepicker._getDate(inst) : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
				(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function(date) {
		if (!date) {
			return null;
		}
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
			this._notifyChange(inst);
		}
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? "" : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, "stepMonths"),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					$.datepicker._adjustDate(id, -stepMonths, "M");
				},
				next: function () {
					$.datepicker._adjustDate(id, +stepMonths, "M");
				},
				hide: function () {
					$.datepicker._hideDatepicker();
				},
				today: function () {
					$.datepicker._gotoToday(id);
				},
				selectDay: function () {
					$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonth: function () {
					$.datepicker._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$.datepicker._selectMonthYear(id, this, "Y");
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
		});
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
			isRTL = this._get(inst, "isRTL"),
			showButtonPanel = this._get(inst, "showButtonPanel"),
			hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
			navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
			numMonths = this._getNumberOfMonths(inst),
			showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
			stepMonths = this._get(inst, "stepMonths"),
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
				new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get(inst, "prevText");
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));

		prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = this._get(inst, "nextText");
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));

		next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = this._get(inst, "currentText");
		gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

		controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
			(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

		firstDay = parseInt(this._get(inst, "firstDay"),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = this._get(inst, "showWeek");
		dayNames = this._get(inst, "dayNames");
		dayNamesMin = this._get(inst, "dayNamesMin");
		monthNames = this._get(inst, "monthNames");
		monthNamesShort = this._get(inst, "monthNamesShort");
		beforeShowDay = this._get(inst, "beforeShowDay");
		showOtherMonths = this._get(inst, "showOtherMonths");
		selectOtherMonths = this._get(inst, "selectOtherMonths");
		defaultDate = this._getDefaultDate(inst);
		html = "";
		dow;
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				cornerClass = " ui-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='ui-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get(inst, "calculateWeek")(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
							(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
							((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get(inst, "changeMonth"),
			changeYear = this._get(inst, "changeYear"),
			showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// month selection
		if (secondary || !changeMonth) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
		} else {
			inMinYear = (minDate && minDate.getFullYear() === drawYear);
			inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
					monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if (!showMonthAfterYear) {
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
		}

		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {
				// determine range of years to display
				years = this._get(inst, "yearRange").split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for (; year <= endYear; year++) {
					inst.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get(inst, "yearSuffix");
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period === "Y" ? offset : 0),
			month = inst.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange(inst);
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, "onChangeMonthYear");
		if (onChange) {
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, "numberOfMonths");
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst),
			date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		}
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate(inst, "min"),
			maxDate = this._getMinMaxDate(inst, "max"),
			minYear = null,
			maxYear = null,
			years = this._get(inst, "yearRange");
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, "shortYearCutoff");
		shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
			monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day === "object" ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.delegate(selector, "mouseout", function() {
			$(this).removeClass("ui-state-hover");
			if (this.className.indexOf("ui-datepicker-prev") !== -1) {
				$(this).removeClass("ui-datepicker-prev-hover");
			}
			if (this.className.indexOf("ui-datepicker-next") !== -1) {
				$(this).removeClass("ui-datepicker-next-hover");
			}
		})
		.delegate(selector, "mouseover", function(){
			if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
				$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
				$(this).addClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).addClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).addClass("ui-datepicker-next-hover");
				}
			}
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props) {
		if (props[name] == null) {
			target[name] = props[name];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick);
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ($("#"+$.datepicker._mainDivId).length === 0) {
		$("body").append($.datepicker.dpDiv);
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
		return $.datepicker["_" + options + "Datepicker"].
			apply($.datepicker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		typeof options === "string" ?
			$.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.10.4";

})(jQuery);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./core":8}],10:[function(require,module,exports){
(function (global){
//define(function(require, exports, modlue) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	$.extend($.fn, {
		jmodal: function(setting) {
			var ps = $.fn.extend({
				data: {},
				marginTop: 100,
				buttonText: { ok: 'Ok', cancel: 'Cancel' },
				okEvent: function(e) { },
				width: 400,
				fixed: true,
				title: 'JModal Dialog',
				content: 'This is a jquery plugin!',
				skinId: 'jmodal-main'
			}, setting);
			var allSel = $('select').hide(), doc = $(document);

			ps.docWidth = doc.width();
			ps.docHeight = doc.height();
			var cache, cacheKey = 'jericho_modal';

			if ($('#jmodal-overlay').length == 0) {
				$('<div id="jmodal-overlay" class="jmodal-overlay"/>\
					<div class="jmodal-main" id="jmodal-main" >\
						<div class="jmodal-top">\
							<div class="jmodal-top-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-border-top jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-top-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
						<div class="jmodal-middle">\
							<div class="jmodal-border-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-middle-content">\
								<div class="jmodal-title" />\
								<div class="jmodal-content" id="jmodal-container-content" />\
								</div>\
							<div class="jmodal-border-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
						<div class="jmodal-bottom">\
							<div class="jmodal-bottom-left jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-border-bottom jmodal-png-fiexed">&nbsp;</div>\
							<div class="jmodal-bottom-right jmodal-png-fiexed">&nbsp;</div>\
						</div>\
					</div>').appendTo('body');
				//$(document.body).find('form:first-child') || $(document.body)
			}

			if (window[cacheKey] == undefined) {
				cache = {
					overlay: $('#jmodal-overlay'),
					modal: $('#jmodal-main'),
					body: $('#jmodal-container-content')
				};
				cache.title = cache.body.prev();
				cache.buttons = cache.body.next().children();
				window[cacheKey] = cache;
			}
			cache = window[cacheKey];
			var args = {
				hide: function() {
					cache.modal.fadeOut();
					cache.overlay.hide();
				},
				isCancelling: false
			};

			if (!cache.overlay.is(':visible')) {
				cache.overlay.css({ opacity: .4 }).show();
				cache.modal.attr('class', ps.skinId)
							.css({
								position: (ps.fixed ? 'fixed' : 'absolute'),
								width: ps.width,
								left: (ps.docWidth - ps.width) / 2,
								top: (ps.marginTop + document.documentElement.scrollTop)
							}).fadeIn();
			}
			cache.title.html(ps.title);
			//OK BUTTON
			cache.buttons.eq(0)
				.val(ps.buttonText.ok)
					.unbind('click')
						.click(function(e) {
							allSel.show();
							ps.okEvent(ps.data, args);
							if (!args.isCancelling) {
								args.hide();
							}
						})
			//CANCEL BUTTON
				.next()
					.val(ps.buttonText.cancel)
						.one('click', function() { args.hide(); allSel.show(); });

			if (typeof ps.content == 'string') {
				$('#jmodal-container-content').html(ps.content);
			}
			if (typeof ps.content == 'function') {
				ps.content(cache.body);
			}
		}
	})
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbGliL2ptb2RhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kbHVlKSB7XHJcblx0dmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblx0JC5leHRlbmQoJC5mbiwge1xyXG5cdFx0am1vZGFsOiBmdW5jdGlvbihzZXR0aW5nKSB7XHJcblx0XHRcdHZhciBwcyA9ICQuZm4uZXh0ZW5kKHtcclxuXHRcdFx0XHRkYXRhOiB7fSxcclxuXHRcdFx0XHRtYXJnaW5Ub3A6IDEwMCxcclxuXHRcdFx0XHRidXR0b25UZXh0OiB7IG9rOiAnT2snLCBjYW5jZWw6ICdDYW5jZWwnIH0sXHJcblx0XHRcdFx0b2tFdmVudDogZnVuY3Rpb24oZSkgeyB9LFxyXG5cdFx0XHRcdHdpZHRoOiA0MDAsXHJcblx0XHRcdFx0Zml4ZWQ6IHRydWUsXHJcblx0XHRcdFx0dGl0bGU6ICdKTW9kYWwgRGlhbG9nJyxcclxuXHRcdFx0XHRjb250ZW50OiAnVGhpcyBpcyBhIGpxdWVyeSBwbHVnaW4hJyxcclxuXHRcdFx0XHRza2luSWQ6ICdqbW9kYWwtbWFpbidcclxuXHRcdFx0fSwgc2V0dGluZyk7XHJcblx0XHRcdHZhciBhbGxTZWwgPSAkKCdzZWxlY3QnKS5oaWRlKCksIGRvYyA9ICQoZG9jdW1lbnQpO1xyXG5cclxuXHRcdFx0cHMuZG9jV2lkdGggPSBkb2Mud2lkdGgoKTtcclxuXHRcdFx0cHMuZG9jSGVpZ2h0ID0gZG9jLmhlaWdodCgpO1xyXG5cdFx0XHR2YXIgY2FjaGUsIGNhY2hlS2V5ID0gJ2plcmljaG9fbW9kYWwnO1xyXG5cclxuXHRcdFx0aWYgKCQoJyNqbW9kYWwtb3ZlcmxheScpLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcdFx0JCgnPGRpdiBpZD1cImptb2RhbC1vdmVybGF5XCIgY2xhc3M9XCJqbW9kYWwtb3ZlcmxheVwiLz5cXFxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1tYWluXCIgaWQ9XCJqbW9kYWwtbWFpblwiID5cXFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLXRvcFwiPlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC10b3AtbGVmdCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItdG9wIGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLXRvcC1yaWdodCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJqbW9kYWwtbWlkZGxlXCI+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvcmRlci1sZWZ0IGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLW1pZGRsZS1jb250ZW50XCI+XFxcclxuXHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJqbW9kYWwtdGl0bGVcIiAvPlxcXHJcblx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWNvbnRlbnRcIiBpZD1cImptb2RhbC1jb250YWluZXItY29udGVudFwiIC8+XFxcclxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItcmlnaHQgam1vZGFsLXBuZy1maWV4ZWRcIj4mbmJzcDs8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cXFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvdHRvbVwiPlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3R0b20tbGVmdCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImptb2RhbC1ib3JkZXItYm90dG9tIGptb2RhbC1wbmctZmlleGVkXCI+Jm5ic3A7PC9kaXY+XFxcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiam1vZGFsLWJvdHRvbS1yaWdodCBqbW9kYWwtcG5nLWZpZXhlZFwiPiZuYnNwOzwvZGl2PlxcXHJcblx0XHRcdFx0XHRcdDwvZGl2PlxcXHJcblx0XHRcdFx0XHQ8L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpO1xyXG5cdFx0XHRcdC8vJChkb2N1bWVudC5ib2R5KS5maW5kKCdmb3JtOmZpcnN0LWNoaWxkJykgfHwgJChkb2N1bWVudC5ib2R5KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAod2luZG93W2NhY2hlS2V5XSA9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRjYWNoZSA9IHtcclxuXHRcdFx0XHRcdG92ZXJsYXk6ICQoJyNqbW9kYWwtb3ZlcmxheScpLFxyXG5cdFx0XHRcdFx0bW9kYWw6ICQoJyNqbW9kYWwtbWFpbicpLFxyXG5cdFx0XHRcdFx0Ym9keTogJCgnI2ptb2RhbC1jb250YWluZXItY29udGVudCcpXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRjYWNoZS50aXRsZSA9IGNhY2hlLmJvZHkucHJldigpO1xyXG5cdFx0XHRcdGNhY2hlLmJ1dHRvbnMgPSBjYWNoZS5ib2R5Lm5leHQoKS5jaGlsZHJlbigpO1xyXG5cdFx0XHRcdHdpbmRvd1tjYWNoZUtleV0gPSBjYWNoZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYWNoZSA9IHdpbmRvd1tjYWNoZUtleV07XHJcblx0XHRcdHZhciBhcmdzID0ge1xyXG5cdFx0XHRcdGhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Y2FjaGUubW9kYWwuZmFkZU91dCgpO1xyXG5cdFx0XHRcdFx0Y2FjaGUub3ZlcmxheS5oaWRlKCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRpc0NhbmNlbGxpbmc6IGZhbHNlXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRpZiAoIWNhY2hlLm92ZXJsYXkuaXMoJzp2aXNpYmxlJykpIHtcclxuXHRcdFx0XHRjYWNoZS5vdmVybGF5LmNzcyh7IG9wYWNpdHk6IC40IH0pLnNob3coKTtcclxuXHRcdFx0XHRjYWNoZS5tb2RhbC5hdHRyKCdjbGFzcycsIHBzLnNraW5JZClcclxuXHRcdFx0XHRcdFx0XHQuY3NzKHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAocHMuZml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyksXHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDogcHMud2lkdGgsXHJcblx0XHRcdFx0XHRcdFx0XHRsZWZ0OiAocHMuZG9jV2lkdGggLSBwcy53aWR0aCkgLyAyLFxyXG5cdFx0XHRcdFx0XHRcdFx0dG9wOiAocHMubWFyZ2luVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcClcclxuXHRcdFx0XHRcdFx0XHR9KS5mYWRlSW4oKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYWNoZS50aXRsZS5odG1sKHBzLnRpdGxlKTtcclxuXHRcdFx0Ly9PSyBCVVRUT05cclxuXHRcdFx0Y2FjaGUuYnV0dG9ucy5lcSgwKVxyXG5cdFx0XHRcdC52YWwocHMuYnV0dG9uVGV4dC5vaylcclxuXHRcdFx0XHRcdC51bmJpbmQoJ2NsaWNrJylcclxuXHRcdFx0XHRcdFx0LmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRhbGxTZWwuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHRcdHBzLm9rRXZlbnQocHMuZGF0YSwgYXJncyk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFhcmdzLmlzQ2FuY2VsbGluZykge1xyXG5cdFx0XHRcdFx0XHRcdFx0YXJncy5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHQvL0NBTkNFTCBCVVRUT05cclxuXHRcdFx0XHQubmV4dCgpXHJcblx0XHRcdFx0XHQudmFsKHBzLmJ1dHRvblRleHQuY2FuY2VsKVxyXG5cdFx0XHRcdFx0XHQub25lKCdjbGljaycsIGZ1bmN0aW9uKCkgeyBhcmdzLmhpZGUoKTsgYWxsU2VsLnNob3coKTsgfSk7XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIHBzLmNvbnRlbnQgPT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHQkKCcjam1vZGFsLWNvbnRhaW5lci1jb250ZW50JykuaHRtbChwcy5jb250ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodHlwZW9mIHBzLmNvbnRlbnQgPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHBzLmNvbnRlbnQoY2FjaGUuYm9keSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KVxyXG4vL30pOyJdfQ==
},{}],11:[function(require,module,exports){
/*! jQuery UI - v1.11.1 - 2014-08-13
* http://jqueryui.com
* Includes: datepicker-af.js, datepicker-ar-DZ.js, datepicker-ar.js, datepicker-az.js, datepicker-be.js, datepicker-bg.js, datepicker-bs.js, datepicker-ca.js, datepicker-cs.js, datepicker-cy-GB.js, datepicker-da.js, datepicker-de.js, datepicker-el.js, datepicker-en-AU.js, datepicker-en-GB.js, datepicker-en-NZ.js, datepicker-eo.js, datepicker-es.js, datepicker-et.js, datepicker-eu.js, datepicker-fa.js, datepicker-fi.js, datepicker-fo.js, datepicker-fr-CA.js, datepicker-fr-CH.js, datepicker-fr.js, datepicker-gl.js, datepicker-he.js, datepicker-hi.js, datepicker-hr.js, datepicker-hu.js, datepicker-hy.js, datepicker-id.js, datepicker-is.js, datepicker-it-CH.js, datepicker-it.js, datepicker-ja.js, datepicker-ka.js, datepicker-kk.js, datepicker-km.js, datepicker-ko.js, datepicker-ky.js, datepicker-lb.js, datepicker-lt.js, datepicker-lv.js, datepicker-mk.js, datepicker-ml.js, datepicker-ms.js, datepicker-nb.js, datepicker-nl-BE.js, datepicker-nl.js, datepicker-nn.js, datepicker-no.js, datepicker-pl.js, datepicker-pt-BR.js, datepicker-pt.js, datepicker-rm.js, datepicker-ro.js, datepicker-ru.js, datepicker-sk.js, datepicker-sl.js, datepicker-sq.js, datepicker-sr-SR.js, datepicker-sr.js, datepicker-sv.js, datepicker-ta.js, datepicker-th.js, datepicker-tj.js, datepicker-tr.js, datepicker-uk.js, datepicker-vi.js, datepicker-zh-CN.js, datepicker-zh-HK.js, datepicker-zh-TW.js
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */

(function (e) {
    "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery)
})(function (e) {
    var t = e.datepicker;
    t.regional.af = {
        closeText: "Selekteer",
        prevText: "Vorige",
        nextText: "Volgende",
        currentText: "Vandag",
        monthNames: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        dayNames: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
        dayNamesShort: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
        dayNamesMin: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.af), t.regional.af, t.regional["ar-DZ"] = {
        closeText: "إغلاق",
        prevText: "&#x3C;السابق",
        nextText: "التالي&#x3E;",
        currentText: "اليوم",
        monthNames: ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesShort: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesMin: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        weekHeader: "أسبوع",
        dateFormat: "dd/mm/yy",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["ar-DZ"]), t.regional["ar-DZ"], t.regional.ar = {
        closeText: "إغلاق",
        prevText: "&#x3C;السابق",
        nextText: "التالي&#x3E;",
        currentText: "اليوم",
        monthNames: ["كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesShort: ["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
        dayNamesMin: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
        weekHeader: "أسبوع",
        dateFormat: "dd/mm/yy",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.ar), t.regional.ar, t.regional.az = {
        closeText: "Bağla",
        prevText: "&#x3C;Geri",
        nextText: "İrəli&#x3E;",
        currentText: "Bugün",
        monthNames: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"],
        monthNamesShort: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avq", "Sen", "Okt", "Noy", "Dek"],
        dayNames: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
        dayNamesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
        dayNamesMin: ["B", "B", "Ç", "С", "Ç", "C", "Ş"],
        weekHeader: "Hf",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.az), t.regional.az, t.regional.be = {
        closeText: "Зачыніць",
        prevText: "&larr;Папяр.",
        nextText: "Наст.&rarr;",
        currentText: "Сёньня",
        monthNames: ["Студзень", "Люты", "Сакавік", "Красавік", "Травень", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Сьнежань"],
        monthNamesShort: ["Сту", "Лют", "Сак", "Кра", "Тра", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сьн"],
        dayNames: ["нядзеля", "панядзелак", "аўторак", "серада", "чацьвер", "пятніца", "субота"],
        dayNamesShort: ["ндз", "пнд", "аўт", "срд", "чцв", "птн", "сбт"],
        dayNamesMin: ["Нд", "Пн", "Аў", "Ср", "Чц", "Пт", "Сб"],
        weekHeader: "Тд",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.be), t.regional.be, t.regional.bg = {
        closeText: "затвори",
        prevText: "&#x3C;назад",
        nextText: "напред&#x3E;",
        nextBigText: "&#x3E;&#x3E;",
        currentText: "днес",
        monthNames: ["Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември"],
        monthNamesShort: ["Яну", "Фев", "Мар", "Апр", "Май", "Юни", "Юли", "Авг", "Сеп", "Окт", "Нов", "Дек"],
        dayNames: ["Неделя", "Понеделник", "Вторник", "Сряда", "Четвъртък", "Петък", "Събота"],
        dayNamesShort: ["Нед", "Пон", "Вто", "Сря", "Чет", "Пет", "Съб"],
        dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Съ"],
        weekHeader: "Wk",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.bg), t.regional.bg, t.regional.bs = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Januar", "Februar", "Mart", "April", "Maj", "Juni", "Juli", "August", "Septembar", "Oktobar", "Novembar", "Decembar"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Wk",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.bs), t.regional.bs, t.regional.ca = {
        closeText: "Tanca",
        prevText: "Anterior",
        nextText: "Següent",
        currentText: "Avui",
        monthNames: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"],
        monthNamesShort: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des"],
        dayNames: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
        dayNamesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"],
        dayNamesMin: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"],
        weekHeader: "Set",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.ca), t.regional.ca, t.regional.cs = {
        closeText: "Zavřít",
        prevText: "&#x3C;Dříve",
        nextText: "Později&#x3E;",
        currentText: "Nyní",
        monthNames: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec"],
        monthNamesShort: ["led", "úno", "bře", "dub", "kvě", "čer", "čvc", "srp", "zář", "říj", "lis", "pro"],
        dayNames: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
        dayNamesShort: ["ne", "po", "út", "st", "čt", "pá", "so"],
        dayNamesMin: ["ne", "po", "út", "st", "čt", "pá", "so"],
        weekHeader: "Týd",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.cs), t.regional.cs, t.regional["cy-GB"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"],
        monthNamesShort: ["Ion", "Chw", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tac", "Rha"],
        dayNames: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
        dayNamesShort: ["Sul", "Llu", "Maw", "Mer", "Iau", "Gwe", "Sad"],
        dayNamesMin: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
        weekHeader: "Wy",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["cy-GB"]), t.regional["cy-GB"], t.regional.da = {
        closeText: "Luk",
        prevText: "&#x3C;Forrige",
        nextText: "Næste&#x3E;",
        currentText: "Idag",
        monthNames: ["Januar", "Februar", "Marts", "April", "Maj", "Juni", "Juli", "August", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"],
        dayNamesShort: ["Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør"],
        dayNamesMin: ["Sø", "Ma", "Ti", "On", "To", "Fr", "Lø"],
        weekHeader: "Uge",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.da), t.regional.da, t.regional.de = {
        closeText: "Schließen",
        prevText: "&#x3C;Zurück",
        nextText: "Vor&#x3E;",
        currentText: "Heute",
        monthNames: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        monthNamesShort: ["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        dayNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
        dayNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
        dayNamesMin: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
        weekHeader: "KW",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.de), t.regional.de, t.regional.el = {
        closeText: "Κλείσιμο",
        prevText: "Προηγούμενος",
        nextText: "Επόμενος",
        currentText: "Τρέχων Μήνας",
        monthNames: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"],
        monthNamesShort: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαι", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ"],
        dayNames: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
        dayNamesShort: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
        dayNamesMin: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σα"],
        weekHeader: "Εβδ",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.el), t.regional.el, t.regional["en-AU"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en-AU"]), t.regional["en-AU"], t.regional["en"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en"]), t.regional["en"], t.regional["en-NZ"] = {
        closeText: "Done",
        prevText: "Prev",
        nextText: "Next",
        currentText: "Today",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["en-NZ"]), t.regional["en-NZ"], t.regional.eo = {
        closeText: "Fermi",
        prevText: "&#x3C;Anta",
        nextText: "Sekv&#x3E;",
        currentText: "Nuna",
        monthNames: ["Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Dimanĉo", "Lundo", "Mardo", "Merkredo", "Ĵaŭdo", "Vendredo", "Sabato"],
        dayNamesShort: ["Dim", "Lun", "Mar", "Mer", "Ĵaŭ", "Ven", "Sab"],
        dayNamesMin: ["Di", "Lu", "Ma", "Me", "Ĵa", "Ve", "Sa"],
        weekHeader: "Sb",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.eo), t.regional.eo, t.regional.es = {
        closeText: "Cerrar",
        prevText: "&#x3C;Ant",
        nextText: "Sig&#x3E;",
        currentText: "Hoy",
        monthNames: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
        monthNamesShort: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
        dayNames: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
        dayNamesShort: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
        dayNamesMin: ["D", "L", "M", "X", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.es), t.regional.es, t.regional.et = {
        closeText: "Sulge",
        prevText: "Eelnev",
        nextText: "Järgnev",
        currentText: "Täna",
        monthNames: ["Jaanuar", "Veebruar", "Märts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember"],
        monthNamesShort: ["Jaan", "Veebr", "Märts", "Apr", "Mai", "Juuni", "Juuli", "Aug", "Sept", "Okt", "Nov", "Dets"],
        dayNames: ["Pühapäev", "Esmaspäev", "Teisipäev", "Kolmapäev", "Neljapäev", "Reede", "Laupäev"],
        dayNamesShort: ["Pühap", "Esmasp", "Teisip", "Kolmap", "Neljap", "Reede", "Laup"],
        dayNamesMin: ["P", "E", "T", "K", "N", "R", "L"],
        weekHeader: "näd",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.et), t.regional.et, t.regional.eu = {
        closeText: "Egina",
        prevText: "&#x3C;Aur",
        nextText: "Hur&#x3E;",
        currentText: "Gaur",
        monthNames: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua"],
        monthNamesShort: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe."],
        dayNames: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
        dayNamesShort: ["ig.", "al.", "ar.", "az.", "og.", "ol.", "lr."],
        dayNamesMin: ["ig", "al", "ar", "az", "og", "ol", "lr"],
        weekHeader: "As",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.eu), t.regional.eu, t.regional.fa = {
        closeText: "بستن",
        prevText: "&#x3C;قبلی",
        nextText: "بعدی&#x3E;",
        currentText: "امروز",
        monthNames: ["فروردين", "ارديبهشت", "خرداد", "تير", "مرداد", "شهريور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
        monthNamesShort: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
        dayNames: ["يکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
        dayNamesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
        dayNamesMin: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
        weekHeader: "هف",
        dateFormat: "yy/mm/dd",
        firstDay: 6,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fa), t.regional.fa, t.regional.fi = {
        closeText: "Sulje",
        prevText: "&#xAB;Edellinen",
        nextText: "Seuraava&#xBB;",
        currentText: "Tänään",
        monthNames: ["Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu"],
        monthNamesShort: ["Tammi", "Helmi", "Maalis", "Huhti", "Touko", "Kesä", "Heinä", "Elo", "Syys", "Loka", "Marras", "Joulu"],
        dayNamesShort: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
        dayNames: ["Sunnuntai", "Maanantai", "Tiistai", "Keskiviikko", "Torstai", "Perjantai", "Lauantai"],
        dayNamesMin: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
        weekHeader: "Vk",
        dateFormat: "d.m.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fi), t.regional.fi, t.regional.fo = {
        closeText: "Lat aftur",
        prevText: "&#x3C;Fyrra",
        nextText: "Næsta&#x3E;",
        currentText: "Í dag",
        monthNames: ["Januar", "Februar", "Mars", "Apríl", "Mei", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
        dayNames: ["Sunnudagur", "Mánadagur", "Týsdagur", "Mikudagur", "Hósdagur", "Fríggjadagur", "Leyardagur"],
        dayNamesShort: ["Sun", "Mán", "Týs", "Mik", "Hós", "Frí", "Ley"],
        dayNamesMin: ["Su", "Má", "Tý", "Mi", "Hó", "Fr", "Le"],
        weekHeader: "Vk",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fo), t.regional.fo, t.regional["fr-CA"] = {
        closeText: "Fermer",
        prevText: "Précédent",
        nextText: "Suivant",
        currentText: "Aujourd'hui",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sem.",
        dateFormat: "yy-mm-dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["fr-CA"]), t.regional["fr-CA"], t.regional["fr-CH"] = {
        closeText: "Fermer",
        prevText: "&#x3C;Préc",
        nextText: "Suiv&#x3E;",
        currentText: "Courant",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sm",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional["fr-CH"]), t.regional["fr-CH"], t.regional.fr = {
        closeText: "Fermer",
        prevText: "Précédent",
        nextText: "Suivant",
        currentText: "Aujourd'hui",
        monthNames: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        monthNamesShort: ["janv.", "févr.", "mars", "avril", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."],
        dayNames: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        dayNamesShort: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        dayNamesMin: ["D", "L", "M", "M", "J", "V", "S"],
        weekHeader: "Sem.",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.fr), t.regional.fr, t.regional.gl = {
        closeText: "Pechar",
        prevText: "&#x3C;Ant",
        nextText: "Seg&#x3E;",
        currentText: "Hoxe",
        monthNames: ["Xaneiro", "Febreiro", "Marzo", "Abril", "Maio", "Xuño", "Xullo", "Agosto", "Setembro", "Outubro", "Novembro", "Decembro"],
        monthNamesShort: ["Xan", "Feb", "Mar", "Abr", "Mai", "Xuñ", "Xul", "Ago", "Set", "Out", "Nov", "Dec"],
        dayNames: ["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mér", "Xov", "Ven", "Sáb"],
        dayNamesMin: ["Do", "Lu", "Ma", "Mé", "Xo", "Ve", "Sá"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.gl), t.regional.gl, t.regional.he = {
        closeText: "סגור",
        prevText: "&#x3C;הקודם",
        nextText: "הבא&#x3E;",
        currentText: "היום",
        monthNames: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
        monthNamesShort: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יוני", "יולי", "אוג", "ספט", "אוק", "נוב", "דצמ"],
        dayNames: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"],
        dayNamesShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"],
        dayNamesMin: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !0,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.he), t.regional.he, t.regional.hi = {
        closeText: "बंद",
        prevText: "पिछला",
        nextText: "अगला",
        currentText: "आज",
        monthNames: ["जनवरी ", "फरवरी", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अगस्त ", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसम्बर"],
        monthNamesShort: ["जन", "फर", "मार्च", "अप्रेल", "मई", "जून", "जूलाई", "अग", "सित", "अक्ट", "नव", "दि"],
        dayNames: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
        dayNamesShort: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"],
        dayNamesMin: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"],
        weekHeader: "हफ्ता",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hi), t.regional.hi, t.regional.hr = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"],
        monthNamesShort: ["Sij", "Velj", "Ožu", "Tra", "Svi", "Lip", "Srp", "Kol", "Ruj", "Lis", "Stu", "Pro"],
        dayNames: ["Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Tje",
        dateFormat: "dd.mm.yy.",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hr), t.regional.hr, t.regional.hu = {
        closeText: "bezár",
        prevText: "vissza",
        nextText: "előre",
        currentText: "ma",
        monthNames: ["Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Már", "Ápr", "Máj", "Jún", "Júl", "Aug", "Szep", "Okt", "Nov", "Dec"],
        dayNames: ["Vasárnap", "Hétfő", "Kedd", "Szerda", "Csütörtök", "Péntek", "Szombat"],
        dayNamesShort: ["Vas", "Hét", "Ked", "Sze", "Csü", "Pén", "Szo"],
        dayNamesMin: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
        weekHeader: "Hét",
        dateFormat: "yy.mm.dd.",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hu), t.regional.hu, t.regional.hy = {
        closeText: "Փակել",
        prevText: "&#x3C;Նախ.",
        nextText: "Հաջ.&#x3E;",
        currentText: "Այսօր",
        monthNames: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր"],
        monthNamesShort: ["Հունվ", "Փետր", "Մարտ", "Ապր", "Մայիս", "Հունիս", "Հուլ", "Օգս", "Սեպ", "Հոկ", "Նոյ", "Դեկ"],
        dayNames: ["կիրակի", "եկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"],
        dayNamesShort: ["կիր", "երկ", "երք", "չրք", "հնգ", "ուրբ", "շբթ"],
        dayNamesMin: ["կիր", "երկ", "երք", "չրք", "հնգ", "ուրբ", "շբթ"],
        weekHeader: "ՇԲՏ",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.hy), t.regional.hy, t.regional.id = {
        closeText: "Tutup",
        prevText: "&#x3C;mundur",
        nextText: "maju&#x3E;",
        currentText: "hari ini",
        monthNames: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agus", "Sep", "Okt", "Nop", "Des"],
        dayNames: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
        dayNamesShort: ["Min", "Sen", "Sel", "Rab", "kam", "Jum", "Sab"],
        dayNamesMin: ["Mg", "Sn", "Sl", "Rb", "Km", "jm", "Sb"],
        weekHeader: "Mg",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.id), t.regional.id, t.regional.is = {
        closeText: "Loka",
        prevText: "&#x3C; Fyrri",
        nextText: "Næsti &#x3E;",
        currentText: "Í dag",
        monthNames: ["Janúar", "Febrúar", "Mars", "Apríl", "Maí", "Júní", "Júlí", "Ágúst", "September", "Október", "Nóvember", "Desember"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maí", "Jún", "Júl", "Ágú", "Sep", "Okt", "Nóv", "Des"],
        dayNames: ["Sunnudagur", "Mánudagur", "Þriðjudagur", "Miðvikudagur", "Fimmtudagur", "Föstudagur", "Laugardagur"],
        dayNamesShort: ["Sun", "Mán", "Þri", "Mið", "Fim", "Fös", "Lau"],
        dayNamesMin: ["Su", "Má", "Þr", "Mi", "Fi", "Fö", "La"],
        weekHeader: "Vika",
        dateFormat: "dd.mm.yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    }, t.setDefaults(t.regional.is),t.regional.is,t.regional["it-CH"] = {
        closeText: "Chiudi",
        prevText: "&#x3C;Prec",
        nextText: "Succ&#x3E;",
        currentText: "Oggi",
        monthNames: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        monthNamesShort: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        dayNames: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
        dayNamesMin: ["Do", "Lu", "Ma", "Me", "Gi", "Ve", "Sa"],
        weekHeader: "Sm",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["it-CH"]),t.regional["it-CH"],t.regional.it = {
        closeText: "Chiudi",
        prevText: "&#x3C;Prec",
        nextText: "Succ&#x3E;",
        currentText: "Oggi",
        monthNames: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
        monthNamesShort: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
        dayNames: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
        dayNamesShort: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
        dayNamesMin: ["Do", "Lu", "Ma", "Me", "Gi", "Ve", "Sa"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.it),t.regional.it,t.regional.ja = {
        closeText: "閉じる",
        prevText: "&#x3C;前",
        nextText: "次&#x3E;",
        currentText: "今日",
        monthNames: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        monthNamesShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
        dayNames: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
        dayNamesShort: ["日", "月", "火", "水", "木", "金", "土"],
        dayNamesMin: ["日", "月", "火", "水", "木", "金", "土"],
        weekHeader: "週",
        dateFormat: "yy/mm/dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: "年"
    },t.setDefaults(t.regional.ja),t.regional.ja,t.regional.ka = {
        closeText: "დახურვა",
        prevText: "&#x3c; წინა",
        nextText: "შემდეგი &#x3e;",
        currentText: "დღეს",
        monthNames: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"],
        monthNamesShort: ["იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ"],
        dayNames: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
        dayNamesShort: ["კვ", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
        dayNamesMin: ["კვ", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
        weekHeader: "კვირა",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ka),t.regional.ka,t.regional.kk = {
        closeText: "Жабу",
        prevText: "&#x3C;Алдыңғы",
        nextText: "Келесі&#x3E;",
        currentText: "Бүгін",
        monthNames: ["Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан"],
        monthNamesShort: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел"],
        dayNames: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
        dayNamesShort: ["жкс", "дсн", "ссн", "срс", "бсн", "жма", "снб"],
        dayNamesMin: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
        weekHeader: "Не",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.kk),t.regional.kk,t.regional.km = {
        closeText: "ធ្វើ​រួច",
        prevText: "មុន",
        nextText: "បន្ទាប់",
        currentText: "ថ្ងៃ​នេះ",
        monthNames: ["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"],
        monthNamesShort: ["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"],
        dayNames: ["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"],
        dayNamesShort: ["អា", "ច", "អ", "ពុ", "ព្រហ", "សុ", "សៅ"],
        dayNamesMin: ["អា", "ច", "អ", "ពុ", "ព្រហ", "សុ", "សៅ"],
        weekHeader: "សប្ដាហ៍",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.km),t.regional.km,t.regional.ko = {
        closeText: "닫기",
        prevText: "이전달",
        nextText: "다음달",
        currentText: "오늘",
        monthNames: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
        monthNamesShort: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
        dayNames: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
        dayNamesShort: ["일", "월", "화", "수", "목", "금", "토"],
        dayNamesMin: ["일", "월", "화", "수", "목", "금", "토"],
        weekHeader: "Wk",
        dateFormat: "yy-mm-dd",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: "년"
    },t.setDefaults(t.regional.ko),t.regional.ko,t.regional.ky = {
        closeText: "Жабуу",
        prevText: "&#x3c;Мур",
        nextText: "Кий&#x3e;",
        currentText: "Бүгүн",
        monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"],
        dayNamesShort: ["жек", "дүй", "шей", "шар", "бей", "жум", "ише"],
        dayNamesMin: ["Жк", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
        weekHeader: "Жум",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ky),t.regional.ky,t.regional.lb = {
        closeText: "Fäerdeg",
        prevText: "Zréck",
        nextText: "Weider",
        currentText: "Haut",
        monthNames: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        monthNamesShort: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
        dayNames: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
        dayNamesShort: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
        dayNamesMin: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"],
        weekHeader: "W",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.lb),t.regional.lb,t.regional.lt = {
        closeText: "Uždaryti",
        prevText: "&#x3C;Atgal",
        nextText: "Pirmyn&#x3E;",
        currentText: "Šiandien",
        monthNames: ["Sausis", "Vasaris", "Kovas", "Balandis", "Gegužė", "Birželis", "Liepa", "Rugpjūtis", "Rugsėjis", "Spalis", "Lapkritis", "Gruodis"],
        monthNamesShort: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rugp", "Rugs", "Spa", "Lap", "Gru"],
        dayNames: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
        dayNamesShort: ["sek", "pir", "ant", "tre", "ket", "pen", "šeš"],
        dayNamesMin: ["Se", "Pr", "An", "Tr", "Ke", "Pe", "Še"],
        weekHeader: "SAV",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !0,
        yearSuffix: ""
    },t.setDefaults(t.regional.lt),t.regional.lt,t.regional.lv = {
        closeText: "Aizvērt",
        prevText: "Iepr.",
        nextText: "Nāk.",
        currentText: "Šodien",
        monthNames: ["Janvāris", "Februāris", "Marts", "Aprīlis", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jūn", "Jūl", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
        dayNamesShort: ["svt", "prm", "otr", "tre", "ctr", "pkt", "sst"],
        dayNamesMin: ["Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "Ss"],
        weekHeader: "Ned.",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.lv),t.regional.lv,t.regional.mk = {
        closeText: "Затвори",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Денес",
        monthNames: ["Јануари", "Февруари", "Март", "Април", "Мај", "Јуни", "Јули", "Август", "Септември", "Октомври", "Ноември", "Декември"],
        monthNamesShort: ["Јан", "Фев", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Ное", "Дек"],
        dayNames: ["Недела", "Понеделник", "Вторник", "Среда", "Четврток", "Петок", "Сабота"],
        dayNamesShort: ["Нед", "Пон", "Вто", "Сре", "Чет", "Пет", "Саб"],
        dayNamesMin: ["Не", "По", "Вт", "Ср", "Че", "Пе", "Са"],
        weekHeader: "Сед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.mk),t.regional.mk,t.regional.ml = {
        closeText: "ശരി",
        prevText: "മുന്നത്തെ",
        nextText: "അടുത്തത് ",
        currentText: "ഇന്ന്",
        monthNames: ["ജനുവരി", "ഫെബ്രുവരി", "മാര്‍ച്ച്", "ഏപ്രില്‍", "മേയ്", "ജൂണ്‍", "ജൂലൈ", "ആഗസ്റ്റ്", "സെപ്റ്റംബര്‍", "ഒക്ടോബര്‍", "നവംബര്‍", "ഡിസംബര്‍"],
        monthNamesShort: ["ജനു", "ഫെബ്", "മാര്‍", "ഏപ്രി", "മേയ്", "ജൂണ്‍", "ജൂലാ", "ആഗ", "സെപ്", "ഒക്ടോ", "നവം", "ഡിസ"],
        dayNames: ["ഞായര്‍", "തിങ്കള്‍", "ചൊവ്വ", "ബുധന്‍", "വ്യാഴം", "വെള്ളി", "ശനി"],
        dayNamesShort: ["ഞായ", "തിങ്ക", "ചൊവ്വ", "ബുധ", "വ്യാഴം", "വെള്ളി", "ശനി"],
        dayNamesMin: ["ഞാ", "തി", "ചൊ", "ബു", "വ്യാ", "വെ", "ശ"],
        weekHeader: "ആ",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ml),t.regional.ml,t.regional.ms = {
        closeText: "Tutup",
        prevText: "&#x3C;Sebelum",
        nextText: "Selepas&#x3E;",
        currentText: "hari ini",
        monthNames: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"],
        monthNamesShort: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"],
        dayNames: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
        dayNamesShort: ["Aha", "Isn", "Sel", "Rab", "kha", "Jum", "Sab"],
        dayNamesMin: ["Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"],
        weekHeader: "Mg",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ms),t.regional.ms,t.regional.nb = {
        closeText: "Lukk",
        prevText: "&#xAB;Forrige",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
        dayNames: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
        dayNamesMin: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
        weekHeader: "Uke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nb),t.regional.nb,t.regional["nl-BE"] = {
        closeText: "Sluiten",
        prevText: "←",
        nextText: "→",
        currentText: "Vandaag",
        monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
        monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
        dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
        dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
        dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["nl-BE"]),t.regional["nl-BE"],t.regional.nl = {
        closeText: "Sluiten",
        prevText: "←",
        nextText: "→",
        currentText: "Vandaag",
        monthNames: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
        monthNamesShort: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"],
        dayNames: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
        dayNamesShort: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
        dayNamesMin: ["zo", "ma", "di", "wo", "do", "vr", "za"],
        weekHeader: "Wk",
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nl),t.regional.nl,t.regional.nn = {
        closeText: "Lukk",
        prevText: "&#xAB;Førre",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["sun", "mån", "tys", "ons", "tor", "fre", "lau"],
        dayNames: ["sundag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
        dayNamesMin: ["su", "må", "ty", "on", "to", "fr", "la"],
        weekHeader: "Veke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.nn),t.regional.nn,t.regional.no = {
        closeText: "Lukk",
        prevText: "&#xAB;Forrige",
        nextText: "Neste&#xBB;",
        currentText: "I dag",
        monthNames: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
        monthNamesShort: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"],
        dayNamesShort: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
        dayNames: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
        dayNamesMin: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
        weekHeader: "Uke",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.no),t.regional.no,t.regional.pl = {
        closeText: "Zamknij",
        prevText: "&#x3C;Poprzedni",
        nextText: "Następny&#x3E;",
        currentText: "Dziś",
        monthNames: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
        monthNamesShort: ["Sty", "Lu", "Mar", "Kw", "Maj", "Cze", "Lip", "Sie", "Wrz", "Pa", "Lis", "Gru"],
        dayNames: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
        dayNamesShort: ["Nie", "Pn", "Wt", "Śr", "Czw", "Pt", "So"],
        dayNamesMin: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
        weekHeader: "Tydz",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.pl),t.regional.pl,t.regional["pt-BR"] = {
        closeText: "Fechar",
        prevText: "&#x3C;Anterior",
        nextText: "Próximo&#x3E;",
        currentText: "Hoje",
        monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
        dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        weekHeader: "Sm",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["pt-BR"]),t.regional["pt-BR"],t.regional.pt = {
        closeText: "Fechar",
        prevText: "Anterior",
        nextText: "Seguinte",
        currentText: "Hoje",
        monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
        dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sábado"],
        dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        weekHeader: "Sem",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.pt),t.regional.pt,t.regional.rm = {
        closeText: "Serrar",
        prevText: "&#x3C;Suandant",
        nextText: "Precedent&#x3E;",
        currentText: "Actual",
        monthNames: ["Schaner", "Favrer", "Mars", "Avrigl", "Matg", "Zercladur", "Fanadur", "Avust", "Settember", "October", "November", "December"],
        monthNamesShort: ["Scha", "Fev", "Mar", "Avr", "Matg", "Zer", "Fan", "Avu", "Sett", "Oct", "Nov", "Dec"],
        dayNames: ["Dumengia", "Glindesdi", "Mardi", "Mesemna", "Gievgia", "Venderdi", "Sonda"],
        dayNamesShort: ["Dum", "Gli", "Mar", "Mes", "Gie", "Ven", "Som"],
        dayNamesMin: ["Du", "Gl", "Ma", "Me", "Gi", "Ve", "So"],
        weekHeader: "emna",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.rm),t.regional.rm,t.regional.ro = {
        closeText: "Închide",
        prevText: "&#xAB; Luna precedentă",
        nextText: "Luna următoare &#xBB;",
        currentText: "Azi",
        monthNames: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"],
        monthNamesShort: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        dayNames: ["Duminică", "Luni", "Marţi", "Miercuri", "Joi", "Vineri", "Sâmbătă"],
        dayNamesShort: ["Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm"],
        dayNamesMin: ["Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"],
        weekHeader: "Săpt",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ro),t.regional.ro,t.regional.ru = {
        closeText: "Закрыть",
        prevText: "&#x3C;Пред",
        nextText: "След&#x3E;",
        currentText: "Сегодня",
        monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
        dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"],
        dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        weekHeader: "Нед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.ru),t.regional.ru,t.regional.sk = {
        closeText: "Zavrieť",
        prevText: "&#x3C;Predchádzajúci",
        nextText: "Nasledujúci&#x3E;",
        currentText: "Dnes",
        monthNames: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Máj", "Jún", "Júl", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Str", "Štv", "Pia", "Sob"],
        dayNamesMin: ["Ne", "Po", "Ut", "St", "Št", "Pia", "So"],
        weekHeader: "Ty",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sk),t.regional.sk,t.regional.sl = {
        closeText: "Zapri",
        prevText: "&#x3C;Prejšnji",
        nextText: "Naslednji&#x3E;",
        currentText: "Trenutni",
        monthNames: ["Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljek", "Torek", "Sreda", "Četrtek", "Petek", "Sobota"],
        dayNamesShort: ["Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob"],
        dayNamesMin: ["Ne", "Po", "To", "Sr", "Če", "Pe", "So"],
        weekHeader: "Teden",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sl),t.regional.sl,t.regional.sq = {
        closeText: "mbylle",
        prevText: "&#x3C;mbrapa",
        nextText: "Përpara&#x3E;",
        currentText: "sot",
        monthNames: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "Nëntor", "Dhjetor"],
        monthNamesShort: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gus", "Sht", "Tet", "Nën", "Dhj"],
        dayNames: ["E Diel", "E Hënë", "E Martë", "E Mërkurë", "E Enjte", "E Premte", "E Shtune"],
        dayNamesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"],
        dayNamesMin: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"],
        weekHeader: "Ja",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sq),t.regional.sq,t.regional["sr-SR"] = {
        closeText: "Zatvori",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Danas",
        monthNames: ["Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Avg", "Sep", "Okt", "Nov", "Dec"],
        dayNames: ["Nedelja", "Ponedeljak", "Utorak", "Sreda", "Četvrtak", "Petak", "Subota"],
        dayNamesShort: ["Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub"],
        dayNamesMin: ["Ne", "Po", "Ut", "Sr", "Če", "Pe", "Su"],
        weekHeader: "Sed",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional["sr-SR"]),t.regional["sr-SR"],t.regional.sr = {
        closeText: "Затвори",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Данас",
        monthNames: ["Јануар", "Фебруар", "Март", "Април", "Мај", "Јун", "Јул", "Август", "Септембар", "Октобар", "Новембар", "Децембар"],
        monthNamesShort: ["Јан", "Феб", "Мар", "Апр", "Мај", "Јун", "Јул", "Авг", "Сеп", "Окт", "Нов", "Дец"],
        dayNames: ["Недеља", "Понедељак", "Уторак", "Среда", "Четвртак", "Петак", "Субота"],
        dayNamesShort: ["Нед", "Пон", "Уто", "Сре", "Чет", "Пет", "Суб"],
        dayNamesMin: ["Не", "По", "Ут", "Ср", "Че", "Пе", "Су"],
        weekHeader: "Сед",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sr),t.regional.sr,t.regional.sv = {
        closeText: "Stäng",
        prevText: "&#xAB;Förra",
        nextText: "Nästa&#xBB;",
        currentText: "Idag",
        monthNames: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNamesShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
        dayNames: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
        dayNamesMin: ["Sö", "Må", "Ti", "On", "To", "Fr", "Lö"],
        weekHeader: "Ve",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.sv),t.regional.sv,t.regional.se = {
        closeText: "Stäng",
        prevText: "&#xAB;Förra",
        nextText: "Nästa&#xBB;",
        currentText: "Idag",
        monthNames: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
        dayNamesShort: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
        dayNames: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
        dayNamesMin: ["Sö", "Må", "Ti", "On", "To", "Fr", "Lö"],
        weekHeader: "Ve",
        dateFormat: "yy-mm-dd",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },t.setDefaults(t.regional.se),t.regional.se,t.regional.ta = {
        closeText: "மூடு",
        prevText: "முன்னையது",
        nextText: "அடுத்தது",
        currentText: "இன்று",
        monthNames: ["தை", "மாசி", "பங்குனி", "சித்திரை", "வைகாசி", "ஆனி", "ஆடி", "ஆவணி", "புரட்டாசி", "ஐப்பசி", "கார்த்திகை", "மார்கழி"],
        monthNamesShort: ["தை", "மாசி", "பங்", "சித்", "வைகா", "ஆனி", "ஆடி", "ஆவ", "புர", "ஐப்", "கார்", "மார்"],
        dayNames: ["ஞாயிற்றுக்கிழமை", "திங்கட்கிழமை", "செவ்வாய்க்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
        dayNamesShort: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
        dayNamesMin: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"],
        weekHeader: "Не",
        dateFormat: "dd/mm/yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.ta),t.regional.ta,t.regional.th = {
        closeText: "ปิด",
        prevText: "&#xAB;&#xA0;ย้อน",
        nextText: "ถัดไป&#xA0;&#xBB;",
        currentText: "วันนี้",
        monthNames: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"],
        monthNamesShort: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."],
        dayNames: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
        dayNamesShort: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
        dayNamesMin: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
        weekHeader: "Wk",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.th),t.regional.th,t.regional.tj = {
        closeText: "Идома",
        prevText: "&#x3c;Қафо",
        nextText: "Пеш&#x3e;",
        currentText: "Имрӯз",
        monthNames: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр"],
        monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
        dayNames: ["якшанбе", "душанбе", "сешанбе", "чоршанбе", "панҷшанбе", "ҷумъа", "шанбе"],
        dayNamesShort: ["якш", "душ", "сеш", "чор", "пан", "ҷум", "шан"],
        dayNamesMin: ["Як", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
        weekHeader: "Хф",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.tj),t.regional.tj,t.regional.tr = {
        closeText: "kapat",
        prevText: "&#x3C;geri",
        nextText: "ileri&#x3e",
        currentText: "bugün",
        monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
        monthNamesShort: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"],
        dayNames: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
        dayNamesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"],
        dayNamesMin: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"],
        weekHeader: "Hf",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.tr),t.regional.tr,t.regional.uk = {
        closeText: "Закрити",
        prevText: "&#x3C;",
        nextText: "&#x3E;",
        currentText: "Сьогодні",
        monthNames: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень"],
        monthNamesShort: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
        dayNames: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п’ятниця", "субота"],
        dayNamesShort: ["нед", "пнд", "вів", "срд", "чтв", "птн", "сбт"],
        dayNamesMin: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
        weekHeader: "Тиж",
        dateFormat: "dd.mm.yy",
        firstDay: 1,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.uk),t.regional.uk,t.regional.vi = {
        closeText: "Đóng",
        prevText: "&#x3C;Trước",
        nextText: "Tiếp&#x3E;",
        currentText: "Hôm nay",
        monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
        monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
        dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
        dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
        weekHeader: "Tu",
        dateFormat: "dd/mm/yy",
        firstDay: 0,
        isRTL: !1,
        showMonthAfterYear: !1,
        yearSuffix: ""
    },
    t.setDefaults(t.regional.vi),t.regional.vi
});

},{}],12:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
	var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	/*!
	 * jQuery Form Plugin
	 * version: 3.45.0-2013.10.17
	 * Requires jQuery v1.5 or later
	 * Copyright (c) 2013 M. Alsup
	 * Examples and documentation at: http://malsup.com/jquery/form/
	 * Project repository: https://github.com/malsup/form
	 * Dual licensed under the MIT and GPL licenses.
	 * https://github.com/malsup/form#copyright-and-license
	 */
	/*global ActiveXObject */
	;(function($) {
	"use strict";

	/*
		Usage Note:
		-----------
		Do not use both ajaxSubmit and ajaxForm on the same form.  These
		functions are mutually exclusive.  Use ajaxSubmit if you want
		to bind your own submit handler to the form.  For example,

		$(document).ready(function() {
			$('#myForm').on('submit', function(e) {
				e.preventDefault(); // <-- important
				$(this).ajaxSubmit({
					target: '#output'
				});
			});
		});

		Use ajaxForm when you want the plugin to manage all the event binding
		for you.  For example,

		$(document).ready(function() {
			$('#myForm').ajaxForm({
				target: '#output'
			});
		});

		You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
		form does not have to exist when you invoke ajaxForm:

		$('#myForm').ajaxForm({
			delegation: true,
			target: '#output'
		});

		When using ajaxForm, the ajaxSubmit function will be invoked for you
		at the appropriate time.
	*/

	/**
	 * Feature detection
	 */
	var feature = {};
	feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
	feature.formdata = window.FormData !== undefined;

	var hasProp = !!$.fn.prop;

	// attr2 uses prop when it can but checks the return type for
	// an expected string.  this accounts for the case where a form 
	// contains inputs with names like "action" or "method"; in those
	// cases "prop" returns the element
	$.fn.attr2 = function() {
		if ( ! hasProp )
			return this.attr.apply(this, arguments);
		var val = this.prop.apply(this, arguments);
		if ( ( val && val.jquery ) || typeof val === 'string' )
			return val;
		return this.attr.apply(this, arguments);
	};

	/**
	 * ajaxSubmit() provides a mechanism for immediately submitting
	 * an HTML form using AJAX.
	 */
	$.fn.ajaxSubmit = function(options) {
		/*jshint scripturl:true */

		// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
		if (!this.length) {
			log('ajaxSubmit: skipping submit process - no element selected');
			return this;
		}

		var method, action, url, $form = this;

		if (typeof options == 'function') {
			options = { success: options };
		}
		else if ( options === undefined ) {
			options = {};
		}

		method = options.type || this.attr2('method');
		action = options.url  || this.attr2('action');

		url = (typeof action === 'string') ? $.trim(action) : '';
		url = url || window.location.href || '';
		if (url) {
			// clean url (don't include hash vaue)
			url = (url.match(/^([^#]+)/)||[])[1];
		}

		options = $.extend(true, {
			url:  url,
			success: $.ajaxSettings.success,
			type: method || $.ajaxSettings.type,
			iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
		}, options);

		// hook for manipulating the form data before it is extracted;
		// convenient for use with rich editors like tinyMCE or FCKEditor
		var veto = {};
		this.trigger('form-pre-serialize', [this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
			return this;
		}

		// provide opportunity to alter form data before it is serialized
		if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSerialize callback');
			return this;
		}

		var traditional = options.traditional;
		if ( traditional === undefined ) {
			traditional = $.ajaxSettings.traditional;
		}

		var elements = [];
		var qx, a = this.formToArray(options.semantic, elements);
		if (options.data) {
			options.extraData = options.data;
			qx = $.param(options.data, traditional);
		}

		// give pre-submit callback an opportunity to abort the submit
		if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSubmit callback');
			return this;
		}

		// fire vetoable 'validate' event
		this.trigger('form-submit-validate', [a, this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
			return this;
		}

		var q = $.param(a, traditional);
		if (qx) {
			q = ( q ? (q + '&' + qx) : qx );
		}
		if (options.type.toUpperCase() == 'GET') {
			options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
			options.data = null;  // data is null for 'get'
		}
		else {
			options.data = q; // data is the query string for 'post'
		}

		var callbacks = [];
		if (options.resetForm) {
			callbacks.push(function() { $form.resetForm(); });
		}
		if (options.clearForm) {
			callbacks.push(function() { $form.clearForm(options.includeHidden); });
		}

		// perform a load on the target only if dataType is not provided
		if (!options.dataType && options.target) {
			var oldSuccess = options.success || function(){};
			callbacks.push(function(data) {
				var fn = options.replaceTarget ? 'replaceWith' : 'html';
				$(options.target)[fn](data).each(oldSuccess, arguments);
			});
		}
		else if (options.success) {
			callbacks.push(options.success);
		}

		options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
			var context = options.context || this ;    // jQuery 1.4+ supports scope context
			for (var i=0, max=callbacks.length; i < max; i++) {
				callbacks[i].apply(context, [data, status, xhr || $form, $form]);
			}
		};

		if (options.error) {
			var oldError = options.error;
			options.error = function(xhr, status, error) {
				var context = options.context || this;
				oldError.apply(context, [xhr, status, error, $form]);
			};
		}

		 if (options.complete) {
			var oldComplete = options.complete;
			options.complete = function(xhr, status) {
				var context = options.context || this;
				oldComplete.apply(context, [xhr, status, $form]);
			};
		}

		// are there files to upload?

		// [value] (issue #113), also see comment:
		// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
		var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

		var hasFileInputs = fileInputs.length > 0;
		var mp = 'multipart/form-data';
		var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

		var fileAPI = feature.fileapi && feature.formdata;
		log("fileAPI :" + fileAPI);
		var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

		var jqxhr;

		// options.iframe allows user to force iframe mode
		// 06-NOV-09: now defaulting to iframe mode if file input is detected
		if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
			// hack to fix Safari hang (thanks to Tim Molendijk for this)
			// see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
			if (options.closeKeepAlive) {
				$.get(options.closeKeepAlive, function() {
					jqxhr = fileUploadIframe(a);
				});
			}
			else {
				jqxhr = fileUploadIframe(a);
			}
		}
		else if ((hasFileInputs || multipart) && fileAPI) {
			jqxhr = fileUploadXhr(a);
		}
		else {
			jqxhr = $.ajax(options);
		}

		$form.removeData('jqxhr').data('jqxhr', jqxhr);

		// clear element array
		for (var k=0; k < elements.length; k++)
			elements[k] = null;

		// fire 'notify' event
		this.trigger('form-submit-notify', [this, options]);
		return this;

		// utility fn for deep serialization
		function deepSerialize(extraData){
			var serialized = $.param(extraData, options.traditional).split('&');
			var len = serialized.length;
			var result = [];
			var i, part;
			for (i=0; i < len; i++) {
				// #252; undo param space replacement
				serialized[i] = serialized[i].replace(/\+/g,' ');
				part = serialized[i].split('=');
				// #278; use array instead of object storage, favoring array serializations
				result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
			}
			return result;
		}

		 // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
		function fileUploadXhr(a) {
			var formdata = new FormData();

			for (var i=0; i < a.length; i++) {
				formdata.append(a[i].name, a[i].value);
			}

			if (options.extraData) {
				var serializedData = deepSerialize(options.extraData);
				for (i=0; i < serializedData.length; i++)
					if (serializedData[i])
						formdata.append(serializedData[i][0], serializedData[i][1]);
			}

			options.data = null;

			var s = $.extend(true, {}, $.ajaxSettings, options, {
				contentType: false,
				processData: false,
				cache: false,
				type: method || 'POST'
			});

			if (options.uploadProgress) {
				// workaround because jqXHR does not expose upload property
				s.xhr = function() {
					var xhr = $.ajaxSettings.xhr();
					if (xhr.upload) {
						xhr.upload.addEventListener('progress', function(event) {
							var percent = 0;
							var position = event.loaded || event.position; /*event.position is deprecated*/
							var total = event.total;
							if (event.lengthComputable) {
								percent = Math.ceil(position / total * 100);
							}
							options.uploadProgress(event, position, total, percent);
						}, false);
					}
					return xhr;
				};
			}

			s.data = null;
			var beforeSend = s.beforeSend;
			s.beforeSend = function(xhr, o) {
				//Send FormData() provided by user
				if (options.formData)
					o.data = options.formData;
				else
					o.data = formdata;
				if(beforeSend)
					beforeSend.call(this, xhr, o);
			};
			return $.ajax(s);
		}

		// private function for handling file uploads (hat tip to YAHOO!)
		function fileUploadIframe(a) {
			var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
			var deferred = $.Deferred();

			// #341
			deferred.abort = function(status) {
				xhr.abort(status);
			};

			if (a) {
				// ensure that every serialized input is still enabled
				for (i=0; i < elements.length; i++) {
					el = $(elements[i]);
					if ( hasProp )
						el.prop('disabled', false);
					else
						el.removeAttr('disabled');
				}
			}

			s = $.extend(true, {}, $.ajaxSettings, options);
			s.context = s.context || s;
			id = 'jqFormIO' + (new Date().getTime());
			if (s.iframeTarget) {
				$io = $(s.iframeTarget);
				n = $io.attr2('name');
				if (!n)
					 $io.attr2('name', id);
				else
					id = n;
			}
			else {
				$io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
				$io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
			}
			io = $io[0];


			xhr = { // mock object
				aborted: 0,
				responseText: null,
				responseXML: null,
				status: 0,
				statusText: 'n/a',
				getAllResponseHeaders: function() {},
				getResponseHeader: function() {},
				setRequestHeader: function() {},
				abort: function(status) {
					var e = (status === 'timeout' ? 'timeout' : 'aborted');
					log('aborting upload... ' + e);
					this.aborted = 1;

					try { // #214, #257
						if (io.contentWindow.document.execCommand) {
							io.contentWindow.document.execCommand('Stop');
						}
					}
					catch(ignore) {}

					$io.attr('src', s.iframeSrc); // abort op in progress
					xhr.error = e;
					if (s.error)
						s.error.call(s.context, xhr, e, status);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, e]);
					if (s.complete)
						s.complete.call(s.context, xhr, e);
				}
			};

			g = s.global;
			// trigger ajax global events so that activity/block indicators work like normal
			if (g && 0 === $.active++) {
				$.event.trigger("ajaxStart");
			}
			if (g) {
				$.event.trigger("ajaxSend", [xhr, s]);
			}

			if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
				if (s.global) {
					$.active--;
				}
				deferred.reject();
				return deferred;
			}
			if (xhr.aborted) {
				deferred.reject();
				return deferred;
			}

			// add submitting element to data if we know it
			sub = form.clk;
			if (sub) {
				n = sub.name;
				if (n && !sub.disabled) {
					s.extraData = s.extraData || {};
					s.extraData[n] = sub.value;
					if (sub.type == "image") {
						s.extraData[n+'.x'] = form.clk_x;
						s.extraData[n+'.y'] = form.clk_y;
					}
				}
			}

			var CLIENT_TIMEOUT_ABORT = 1;
			var SERVER_ABORT = 2;
					
			function getDoc(frame) {
				/* it looks like contentWindow or contentDocument do not
				 * carry the protocol property in ie8, when running under ssl
				 * frame.document is the only valid response document, since
				 * the protocol is know but not on the other two objects. strange?
				 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
				 */
				
				var doc = null;
				
				// IE8 cascading access check
				try {
					if (frame.contentWindow) {
						doc = frame.contentWindow.document;
					}
				} catch(err) {
					// IE8 access denied under ssl & missing protocol
					log('cannot get iframe.contentWindow document: ' + err);
				}

				if (doc) { // successful getting content
					return doc;
				}

				try { // simply checking may throw in ie8 under ssl or mismatched protocol
					doc = frame.contentDocument ? frame.contentDocument : frame.document;
				} catch(err) {
					// last attempt
					log('cannot get iframe.contentDocument: ' + err);
					doc = frame.document;
				}
				return doc;
			}

			// Rails CSRF hack (thanks to Yvan Barthelemy)
			var csrf_token = $('meta[name=csrf-token]').attr('content');
			var csrf_param = $('meta[name=csrf-param]').attr('content');
			if (csrf_param && csrf_token) {
				s.extraData = s.extraData || {};
				s.extraData[csrf_param] = csrf_token;
			}

			// take a breath so that pending repaints get some cpu time before the upload starts
			function doSubmit() {
				// make sure form attrs are set
				var t = $form.attr2('target'), a = $form.attr2('action');

				// update form attrs in IE friendly way
				form.setAttribute('target',id);
				if (!method || /post/i.test(method) ) {
					form.setAttribute('method', 'POST');
				}
				if (a != s.url) {
					form.setAttribute('action', s.url);
				}

				// ie borks in some cases when setting encoding
				if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
					$form.attr({
						encoding: 'multipart/form-data',
						enctype:  'multipart/form-data'
					});
				}

				// support timout
				if (s.timeout) {
					timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
				}

				// look for server aborts
				function checkState() {
					try {
						var state = getDoc(io).readyState;
						log('state = ' + state);
						if (state && state.toLowerCase() == 'uninitialized')
							setTimeout(checkState,50);
					}
					catch(e) {
						log('Server abort: ' , e, ' (', e.name, ')');
						cb(SERVER_ABORT);
						if (timeoutHandle)
							clearTimeout(timeoutHandle);
						timeoutHandle = undefined;
					}
				}

				// add "extra" data to form if provided in options
				var extraInputs = [];
				try {
					if (s.extraData) {
						for (var n in s.extraData) {
							if (s.extraData.hasOwnProperty(n)) {
							   // if using the $.param format that allows for multiple values with the same name
							   if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
								   extraInputs.push(
								   $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
									   .appendTo(form)[0]);
							   } else {
								   extraInputs.push(
								   $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
									   .appendTo(form)[0]);
							   }
							}
						}
					}

					if (!s.iframeTarget) {
						// add iframe to doc and submit the form
						$io.appendTo('body');
					}
					if (io.attachEvent)
						io.attachEvent('onload', cb);
					else
						io.addEventListener('load', cb, false);
					setTimeout(checkState,15);

					try {
						form.submit();
					} catch(err) {
						// just in case form has element with name/id of 'submit'
						var submitFn = document.createElement('form').submit;
						submitFn.apply(form);
					}
				}
				finally {
					// reset attrs and remove "extra" input elements
					form.setAttribute('action',a);
					if(t) {
						form.setAttribute('target', t);
					} else {
						$form.removeAttr('target');
					}
					$(extraInputs).remove();
				}
			}

			if (s.forceSync) {
				doSubmit();
			}
			else {
				setTimeout(doSubmit, 10); // this lets dom updates render
			}

			var data, doc, domCheckCount = 50, callbackProcessed;

			function cb(e) {
				if (xhr.aborted || callbackProcessed) {
					return;
				}
				
				doc = getDoc(io);
				if(!doc) {
					log('cannot access response document');
					e = SERVER_ABORT;
				}
				if (e === CLIENT_TIMEOUT_ABORT && xhr) {
					xhr.abort('timeout');
					deferred.reject(xhr, 'timeout');
					return;
				}
				else if (e == SERVER_ABORT && xhr) {
					xhr.abort('server abort');
					deferred.reject(xhr, 'error', 'server abort');
					return;
				}

				if (!doc || doc.location.href == s.iframeSrc) {
					// response not received yet
					if (!timedOut)
						return;
				}
				if (io.detachEvent)
					io.detachEvent('onload', cb);
				else
					io.removeEventListener('load', cb, false);

				var status = 'success', errMsg;
				try {
					if (timedOut) {
						throw 'timeout';
					}

					var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
					log('isXml='+isXml);
					if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
						if (--domCheckCount) {
							// in some browsers (Opera) the iframe DOM is not always traversable when
							// the onload callback fires, so we loop a bit to accommodate
							log('requeing onLoad callback, DOM not available');
							setTimeout(cb, 250);
							return;
						}
						// let this fall through because server response could be an empty document
						//log('Could not access iframe DOM after mutiple tries.');
						//throw 'DOMException: not available';
					}

					//log('response detected');
					var docRoot = doc.body ? doc.body : doc.documentElement;
					xhr.responseText = docRoot ? docRoot.innerHTML : null;
					xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
					if (isXml)
						s.dataType = 'xml';
					xhr.getResponseHeader = function(header){
						var headers = {'content-type': s.dataType};
						return headers[header.toLowerCase()];
					};
					// support for XHR 'status' & 'statusText' emulation :
					if (docRoot) {
						xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
						xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
					}

					var dt = (s.dataType || '').toLowerCase();
					var scr = /(json|script|text)/.test(dt);
					if (scr || s.textarea) {
						// see if user embedded response in textarea
						var ta = doc.getElementsByTagName('textarea')[0];
						if (ta) {
							xhr.responseText = ta.value;
							// support for XHR 'status' & 'statusText' emulation :
							xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
							xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
						}
						else if (scr) {
							// account for browsers injecting pre around json response
							var pre = doc.getElementsByTagName('pre')[0];
							var b = doc.getElementsByTagName('body')[0];
							if (pre) {
								xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
							}
							else if (b) {
								xhr.responseText = b.textContent ? b.textContent : b.innerText;
							}
						}
					}
					else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
						xhr.responseXML = toXml(xhr.responseText);
					}

					try {
						data = httpData(xhr, dt, s);
					}
					catch (err) {
						status = 'parsererror';
						xhr.error = errMsg = (err || status);
					}
				}
				catch (err) {
					log('error caught: ',err);
					status = 'error';
					xhr.error = errMsg = (err || status);
				}

				if (xhr.aborted) {
					log('upload aborted');
					status = null;
				}

				if (xhr.status) { // we've set xhr.status
					status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
				}

				// ordering of these callbacks/triggers is odd, but that's how $.ajax does it
				if (status === 'success') {
					if (s.success)
						s.success.call(s.context, data, 'success', xhr);
					deferred.resolve(xhr.responseText, 'success', xhr);
					if (g)
						$.event.trigger("ajaxSuccess", [xhr, s]);
				}
				else if (status) {
					if (errMsg === undefined)
						errMsg = xhr.statusText;
					if (s.error)
						s.error.call(s.context, xhr, status, errMsg);
					deferred.reject(xhr, 'error', errMsg);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, errMsg]);
				}

				if (g)
					$.event.trigger("ajaxComplete", [xhr, s]);

				if (g && ! --$.active) {
					$.event.trigger("ajaxStop");
				}

				if (s.complete)
					s.complete.call(s.context, xhr, status);

				callbackProcessed = true;
				if (s.timeout)
					clearTimeout(timeoutHandle);

				// clean up
				setTimeout(function() {
					if (!s.iframeTarget)
						$io.remove();
					else  //adding else to clean up existing iframe response.
						$io.attr('src', s.iframeSrc);
					xhr.responseXML = null;
				}, 100);
			}

			var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
				if (window.ActiveXObject) {
					doc = new ActiveXObject('Microsoft.XMLDOM');
					doc.async = 'false';
					doc.loadXML(s);
				}
				else {
					doc = (new DOMParser()).parseFromString(s, 'text/xml');
				}
				return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
			};
			var parseJSON = $.parseJSON || function(s) {
				/*jslint evil:true */
				return window['eval']('(' + s + ')');
			};

			var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

				var ct = xhr.getResponseHeader('content-type') || '',
					xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
					data = xml ? xhr.responseXML : xhr.responseText;

				if (xml && data.documentElement.nodeName === 'parsererror') {
					if ($.error)
						$.error('parsererror');
				}
				if (s && s.dataFilter) {
					data = s.dataFilter(data, type);
				}
				if (typeof data === 'string') {
					if (type === 'json' || !type && ct.indexOf('json') >= 0) {
						data = parseJSON(data);
					} else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
						$.globalEval(data);
					}
				}
				return data;
			};

			return deferred;
		}
	};

	/**
	 * ajaxForm() provides a mechanism for fully automating form submission.
	 *
	 * The advantages of using this method instead of ajaxSubmit() are:
	 *
	 * 1: This method will include coordinates for <input type="image" /> elements (if the element
	 *    is used to submit the form).
	 * 2. This method will include the submit element's name/value data (for the element that was
	 *    used to submit the form).
	 * 3. This method binds the submit() method to the form for you.
	 *
	 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
	 * passes the options argument along after properly binding events for submit elements and
	 * the form itself.
	 */
	$.fn.ajaxForm = function(options) {
		options = options || {};
		options.delegation = options.delegation && $.isFunction($.fn.on);

		// in jQuery 1.3+ we can fix mistakes with the ready state
		if (!options.delegation && this.length === 0) {
			var o = { s: this.selector, c: this.context };
			if (!$.isReady && o.s) {
				log('DOM not ready, queuing ajaxForm');
				$(function() {
					$(o.s,o.c).ajaxForm(options);
				});
				return this;
			}
			// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
			log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
			return this;
		}

		if ( options.delegation ) {
			$(document)
				.off('submit.form-plugin', this.selector, doAjaxSubmit)
				.off('click.form-plugin', this.selector, captureSubmittingElement)
				.on('submit.form-plugin', this.selector, options, doAjaxSubmit)
				.on('click.form-plugin', this.selector, options, captureSubmittingElement);
			return this;
		}

		return this.ajaxFormUnbind()
			.bind('submit.form-plugin', options, doAjaxSubmit)
			.bind('click.form-plugin', options, captureSubmittingElement);
	};

	// private event handlers
	function doAjaxSubmit(e) {
		/*jshint validthis:true */
		var options = e.data;
		if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
			e.preventDefault();
			$(e.target).ajaxSubmit(options); // #365
		}
	}

	function captureSubmittingElement(e) {
		/*jshint validthis:true */
		var target = e.target;
		var $el = $(target);
		if (!($el.is("[type=submit],[type=image]"))) {
			// is this a child element of the submit el?  (ex: a span within a button)
			var t = $el.closest('[type=submit]');
			if (t.length === 0) {
				return;
			}
			target = t[0];
		}
		var form = this;
		form.clk = target;
		if (target.type == 'image') {
			if (e.offsetX !== undefined) {
				form.clk_x = e.offsetX;
				form.clk_y = e.offsetY;
			} else if (typeof $.fn.offset == 'function') {
				var offset = $el.offset();
				form.clk_x = e.pageX - offset.left;
				form.clk_y = e.pageY - offset.top;
			} else {
				form.clk_x = e.pageX - target.offsetLeft;
				form.clk_y = e.pageY - target.offsetTop;
			}
		}
		// clear form vars
		setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
	}


	// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
	$.fn.ajaxFormUnbind = function() {
		return this.unbind('submit.form-plugin click.form-plugin');
	};

	/**
	 * formToArray() gathers form element data into an array of objects that can
	 * be passed to any of the following ajax functions: $.get, $.post, or load.
	 * Each object in the array has both a 'name' and 'value' property.  An example of
	 * an array for a simple login form might be:
	 *
	 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
	 *
	 * It is this array that is passed to pre-submit callback functions provided to the
	 * ajaxSubmit() and ajaxForm() methods.
	 */
	$.fn.formToArray = function(semantic, elements) {
		var a = [];
		if (this.length === 0) {
			return a;
		}

		var form = this[0];
		var els = semantic ? form.getElementsByTagName('*') : form.elements;
		if (!els) {
			return a;
		}

		var i,j,n,v,el,max,jmax;
		for(i=0, max=els.length; i < max; i++) {
			el = els[i];
			n = el.name;
			if (!n || el.disabled) {
				continue;
			}

			if (semantic && form.clk && el.type == "image") {
				// handle image inputs on the fly when semantic == true
				if(form.clk == el) {
					a.push({name: n, value: $(el).val(), type: el.type });
					a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
				}
				continue;
			}

			v = $.fieldValue(el, true);
			if (v && v.constructor == Array) {
				if (elements)
					elements.push(el);
				for(j=0, jmax=v.length; j < jmax; j++) {
					a.push({name: n, value: v[j]});
				}
			}
			else if (feature.fileapi && el.type == 'file') {
				if (elements)
					elements.push(el);
				var files = el.files;
				if (files.length) {
					for (j=0; j < files.length; j++) {
						a.push({name: n, value: files[j], type: el.type});
					}
				}
				else {
					// #180
					a.push({ name: n, value: '', type: el.type });
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				if (elements)
					elements.push(el);
				a.push({name: n, value: v, type: el.type, required: el.required});
			}
		}

		if (!semantic && form.clk) {
			// input type=='image' are not found in elements array! handle it here
			var $input = $(form.clk), input = $input[0];
			n = input.name;
			if (n && !input.disabled && input.type == 'image') {
				a.push({name: n, value: $input.val()});
				a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
			}
		}
		return a;
	};

	/**
	 * Serializes form data into a 'submittable' string. This method will return a string
	 * in the format: name1=value1&amp;name2=value2
	 */
	$.fn.formSerialize = function(semantic) {
		//hand off to jQuery.param for proper encoding
		return $.param(this.formToArray(semantic));
	};

	/**
	 * Serializes all field elements in the jQuery object into a query string.
	 * This method will return a string in the format: name1=value1&amp;name2=value2
	 */
	$.fn.fieldSerialize = function(successful) {
		var a = [];
		this.each(function() {
			var n = this.name;
			if (!n) {
				return;
			}
			var v = $.fieldValue(this, successful);
			if (v && v.constructor == Array) {
				for (var i=0,max=v.length; i < max; i++) {
					a.push({name: n, value: v[i]});
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				a.push({name: this.name, value: v});
			}
		});
		//hand off to jQuery.param for proper encoding
		return $.param(a);
	};

	/**
	 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
	 *
	 *  <form><fieldset>
	 *      <input name="A" type="text" />
	 *      <input name="A" type="text" />
	 *      <input name="B" type="checkbox" value="B1" />
	 *      <input name="B" type="checkbox" value="B2"/>
	 *      <input name="C" type="radio" value="C1" />
	 *      <input name="C" type="radio" value="C2" />
	 *  </fieldset></form>
	 *
	 *  var v = $('input[type=text]').fieldValue();
	 *  // if no values are entered into the text inputs
	 *  v == ['','']
	 *  // if values entered into the text inputs are 'foo' and 'bar'
	 *  v == ['foo','bar']
	 *
	 *  var v = $('input[type=checkbox]').fieldValue();
	 *  // if neither checkbox is checked
	 *  v === undefined
	 *  // if both checkboxes are checked
	 *  v == ['B1', 'B2']
	 *
	 *  var v = $('input[type=radio]').fieldValue();
	 *  // if neither radio is checked
	 *  v === undefined
	 *  // if first radio is checked
	 *  v == ['C1']
	 *
	 * The successful argument controls whether or not the field element must be 'successful'
	 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
	 * The default value of the successful argument is true.  If this value is false the value(s)
	 * for each element is returned.
	 *
	 * Note: This method *always* returns an array.  If no valid value can be determined the
	 *    array will be empty, otherwise it will contain one or more values.
	 */
	$.fn.fieldValue = function(successful) {
		for (var val=[], i=0, max=this.length; i < max; i++) {
			var el = this[i];
			var v = $.fieldValue(el, successful);
			if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
				continue;
			}
			if (v.constructor == Array)
				$.merge(val, v);
			else
				val.push(v);
		}
		return val;
	};

	/**
	 * Returns the value of the field element.
	 */
	$.fieldValue = function(el, successful) {
		var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
		if (successful === undefined) {
			successful = true;
		}

		if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
			(t == 'checkbox' || t == 'radio') && !el.checked ||
			(t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
			tag == 'select' && el.selectedIndex == -1)) {
				return null;
		}

		if (tag == 'select') {
			var index = el.selectedIndex;
			if (index < 0) {
				return null;
			}
			var a = [], ops = el.options;
			var one = (t == 'select-one');
			var max = (one ? index+1 : ops.length);
			for(var i=(one ? index : 0); i < max; i++) {
				var op = ops[i];
				if (op.selected) {
					var v = op.value;
					if (!v) { // extra pain for IE...
						v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
					}
					if (one) {
						return v;
					}
					a.push(v);
				}
			}
			return a;
		}
		return $(el).val();
	};

	/**
	 * Clears the form data.  Takes the following actions on the form's input fields:
	 *  - input text fields will have their 'value' property set to the empty string
	 *  - select elements will have their 'selectedIndex' property set to -1
	 *  - checkbox and radio inputs will have their 'checked' property set to false
	 *  - inputs of type submit, button, reset, and hidden will *not* be effected
	 *  - button elements will *not* be effected
	 */
	$.fn.clearForm = function(includeHidden) {
		return this.each(function() {
			$('input,select,textarea', this).clearFields(includeHidden);
		});
	};

	/**
	 * Clears the selected form elements.
	 */
	$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
		var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
		return this.each(function() {
			var t = this.type, tag = this.tagName.toLowerCase();
			if (re.test(t) || tag == 'textarea') {
				this.value = '';
			}
			else if (t == 'checkbox' || t == 'radio') {
				this.checked = false;
			}
			else if (tag == 'select') {
				this.selectedIndex = -1;
			}
			else if (t == "file") {
				if (/MSIE/.test(navigator.userAgent)) {
					$(this).replaceWith($(this).clone(true));
				} else {
					$(this).val('');
				}
			}
			else if (includeHidden) {
				// includeHidden can be the value true, or it can be a selector string
				// indicating a special test; for example:
				//  $('#myForm').clearForm('.special:hidden')
				// the above would clean hidden inputs that have the class of 'special'
				if ( (includeHidden === true && /hidden/.test(t)) ||
					 (typeof includeHidden == 'string' && $(this).is(includeHidden)) )
					this.value = '';
			}
		});
	};

	/**
	 * Resets the form data.  Causes all form elements to be reset to their original value.
	 */
	$.fn.resetForm = function() {
		return this.each(function() {
			// guard against an input with the name of 'reset'
			// note that IE reports the reset function as an 'object'
			if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
				this.reset();
			}
		});
	};

	/**
	 * Enables or disables any matching elements.
	 */
	$.fn.enable = function(b) {
		if (b === undefined) {
			b = true;
		}
		return this.each(function() {
			this.disabled = !b;
		});
	};

	/**
	 * Checks/unchecks any matching checkboxes or radio buttons and
	 * selects/deselects and matching option elements.
	 */
	$.fn.selected = function(select) {
		if (select === undefined) {
			select = true;
		}
		return this.each(function() {
			var t = this.type;
			if (t == 'checkbox' || t == 'radio') {
				this.checked = select;
			}
			else if (this.tagName.toLowerCase() == 'option') {
				var $sel = $(this).parent('select');
				if (select && $sel[0] && $sel[0].type == 'select-one') {
					// deselect all other options
					$sel.find('option').selected(false);
				}
				this.selected = select;
			}
		});
	};

	// expose debug var
	$.fn.ajaxSubmit.debug = false;

	// helper fn for console logging
	function log() {
		if (!$.fn.ajaxSubmit.debug)
			return;
		var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
		if (window.console && window.console.log) {
			window.console.log(msg);
		}
		else if (window.opera && window.opera.postError) {
			window.opera.postError(msg);
		}
	}

	})( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],13:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

	$.fn.autocompleteEmail = function (options) {
		var me = this,
		$input = $(this);
		var selector = $input['selector'];
		var defaults = {
			resultsClass : "mailInstant",
			resultsid : "resultsEmail",
			overClass : "over",
			minChars : 1,
			zIndex : 1000000003,
			width : 2,
			delay : 50,
			esc : false,
			data : []};
		var options = $.extend(defaults, options);
		var timeout = null;
		var active = -1;
		var hasFocus = false;
		var prev = "";
		var emailList = pageData.emailList || '';
		var lastKeyPressCode = null;
		var _url = webData.WEB_ROOT + 'ajax.php?act=get_email_domains&language=' + webData.lang;
		this.init = function () {
			var results = document.createElement("div");
			var $results = $(results);
			$results.css("z-index", options.zIndex);
			$results.attr("id", options.resultsid);
			$results.hide().addClass(options.resultsClass).css("position", "absolute");
			if (!$('#' + options.resultsid)[0])
				$("body").prepend(results)
		};
		$(document).ready(function () {
			if (emailList == '') {
				$.ajax({
					type : 'post',
					url : _url,
					success : function (data) {
						data = eval('[' + data + ']')[0];
						if (data != '') {
							emailList = data;
							pageData.emailList = data;
						}
					}
				})
			}
		});
		function hidePP(e) {
			var unicode = e.keyCode ? e.keyCode : e.charCode;
			if (unicode == 27) {
				$('#' + options.resultsid).hide();
				options.esc = true;
				$(document).unbind('keydown', hidePP)
			}
		};
		$(document).keydown(hidePP);
		this.showResult = function () {
			if (!$input.val())
				return;
			me.requestData()
		};
		this.showHtml = function (data, _len, _val, __val, ul) {
			for (var i = 0; i < data.length; i++) {
				var li = document.createElement("li");
				li.innerHTML = '<span>' + __val + '</span>@' + data[i];
				ul.appendChild(li);
				if (_len != -1 && data[i].indexOf(_val) != 0) {
					$(li).remove()
				} else {
					$(li).show()
				}
			}
			$('li', ul).each(function (n) {
				if (n > 11) {
					$(this).remove()
				} else if (n > 0 && $(this).text() == $input.val()) {
					$(this).remove()
				} else {
					$(this).hover(function () {
						$(this).addClass(options.overClass);
						active = n
					}, function () {
						$(this).removeClass(options.overClass)
					}).click(function (e) {
						me.selectItem(this);
						e.preventDefault();
						e.stopPropagation()
					})
				}
				$(this).attr({
					title : $(this).text(),
					alt : $(this).text()
				})
			});
			if(selector == "#your_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : 1.5*$input.width() + options.width + 22
				}).html(ul).show()
			}else if(selector == "#newuser_register_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : $input.width() + options.width + 22,
					position:'fixed'
				}).html(ul).show()
			}else if(selector == "#newuser_popup_register_email"){
				$("#" + options.resultsid).css({
					top : ($input.offset().top + $input.outerHeight() - 1) + "px",
					left : $input.offset().left + "px",
					width : $input.width() + options.width + 22,
					position:'fixed'
				}).html(ul).show()
			}else{
				$("#" + options.resultsid).css({
					top: ($input.offset().top + $input.outerHeight() - 1) + "px",
					left: $input.offset().left + "px",
					width: $input.width() + options.width
				}).html(ul).show()
			}
		};
		this.requestData = function () {
			var ul = document.createElement("ul");
			var _title = document.createElement("h4");
			_title.setAttribute("style","white-space:nowrap;overflow:hidden;width:100%;");
			$(_title).html(_lang.page_login_select_email_type);
			ul.appendChild(_title);
			var _val = $input.val(),
			__val = $input.val();
			var _len = _val.indexOf('@');
			if (_len != -1) {
				_val = _val.substring(_len + 1, _val.length);
				__val = $input.val().substring(0, _len)
			}
			if (emailList == '') {
				$.ajax({
					type : 'post',
					url : _url,
					data : '',
					complete : function () {},
					success : function (data) {
						data = eval('[' + data + ']')[0];
						if (data != '') {
							me.showHtml(data, _len, _val, __val, ul);
							emailList = data
						}
					},
					error : function () {}

				})
			} else {
				me.showHtml(emailList, _len, _val, __val, ul)
			}
		};
		this.selectItem = function (li) {
			var v = $.trim($(li).text());
			$input.val(v);
			me.hideResultsNow()
		};
		this.hideResultsNow = function () {
			if (timeout)
				clearTimeout(timeout);
			timeout = setTimeout(function () {
					if ($("#" + options.resultsid).is(":visible")) {
						$("#" + options.resultsid).hide()
					}
				}, 200)
		};
		this.onChange = function () {
			if ((lastKeyPressCode >= 33 && lastKeyPressCode <= 45) || lastKeyPressCode == 144 || lastKeyPressCode == 145 || lastKeyPressCode == 9 || (lastKeyPressCode >= 112 && lastKeyPressCode <= 135))
				return;
			var v = $input.val();
			if (v.length >= options.minChars && !options.esc) {
				me.showResult()
			} else {
				$("#" + options.resultsid).hide()
			};
			options.esc = false
		};
		this.moveSelect = function (step) {
			var lis = $("li", $("#" + options.resultsid));
			active += step;
			if (active < 0) {
				active = lis.size() - 1
			} else if (active >= lis.size()) {
				active = 0
			};
			$(lis).removeClass(options.overClass);
			$(lis).eq(active).addClass(options.overClass);
			$input.val($(lis).eq(active).text())
		};
		$input.keyup(function (e) {
			if (lastKeyPressCode == 13)
				return;
			hasFocus = true;
			lastKeyPressCode = e.keyCode;
			if (lastKeyPressCode < 37 || lastKeyPressCode > 40) {
				active = -1;
				if (timeout)
					clearTimeout(timeout);
				timeout = setTimeout(function () {
						me.onChange()
					}, options.delay)
			}
		}).keydown(function (e) {
			hasFocus = true;
			lastKeyPressCode = e.keyCode;
			switch (e.keyCode) {
			case 13:
				if ($input.val() == "") {};
				me.hideResultsNow();
				if ($('#resultsEmail')[0].style.display == "block") {
					e.keyCode = 0;
					return false
				}
				break;
			case 38:
				e.preventDefault();
				if ($("#" + options.resultsid).is(":visible"))
					me.moveSelect(-1);
				break;
			case 40:
				e.preventDefault();
				if ($("#" + options.resultsid).is(":visible"))
					me.moveSelect(1);
				break;
			default:
				break
			}
		}).blur(function () {
			hasFocus = false;
			me.hideResultsNow()
		});
		this.init()
	};

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],14:[function(require,module,exports){
//define(function (require, exports, module) {

	function Cookie() {}
	module.exports = Cookie;
	var cookie_domain = webData.cookie_domain
	
	Cookie.prototype.setCookie = function (NameOfCookie, value, expiredays, domain) {
		if (expiredays == null || expiredays == undefined || expiredays == '' || isNaN(expiredays)) {
			expiredays = 365;
		}
		var ExpireDate = new Date();
		ExpireDate.setTime(ExpireDate.getTime() + (expiredays * 24 * 3600 * 1000));
		domain = domain ? domain : cookie_domain
        var _domain = domain ? ";domain=" + domain : ""
		document.cookie = NameOfCookie + "=" + escape(value) + _domain + ((expiredays == null) ? "": ";path=/; expires=" + ExpireDate.toGMTString());
	}

	Cookie.prototype.getCookie = function (NameOfCookie) {
		if (document.cookie.length > 0) {
			begin = document.cookie.indexOf(NameOfCookie + "=");
			if (begin != -1) {
				begin += NameOfCookie.length + 1;
				end = document.cookie.indexOf(";", begin);
				if (end == -1) end = document.cookie.length;
				return unescape(document.cookie.substring(begin, end));
			}
		}
		return null;
	}
	
//});

},{}],15:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

function Countdown(container, time, format, isWrap, isWeeklyDeal, isSpecialOffer) {
    this.container = $(container);
    this.time = time;
    this.format = (typeof(format) == 'undefined') ? '' : format;
    this.isWrap = isWrap || false;
    this.isWeeklyDeal = isWeeklyDeal || false;
    this.isSpecialOffer = isSpecialOffer || false;
}
module.exports = Countdown;

Countdown.prototype.run = function () {
    if (this.container[0]) {
        this.init(this.time);
    } else {
        return false;
    }
};

Countdown.prototype.init = function (time) {
    var me = this;
    var container = me.container;
    var next_time = time = time - 1 > 0 ? time - 1 : 0;
    var _day = '', _dayTxt = '', isDays = false;
    if (this.format == 'days') {
        _day = Math.floor(time / (24 * 60 * 60));
        time = time - _day * 24 * 60 * 60;
        _dayTxt = _lang.page_common_day;
        if (_day >= 2) {
            _dayTxt = _lang.page_common_days;
            isDays = true;
        }
        if (!this.isWeeklyDeal) {
            _dayTxt = '<span class="day_txt">' + _dayTxt + '</span>';
        }
    }

    var _hour = Math.floor(time / (60 * 60));
    time = time - _hour * 60 * 60;
    var _minute = Math.floor(time / 60);
    var _second = time - _minute * 60;
    if (_hour < 10) {
        _hour = "0" + _hour;
    }
    if (_minute < 10) {
        _minute = '0' + _minute;
    }
    if (_second < 10) {
        _second = '0' + _second;
    }

    //wrap date time format
    var time_str = _hour + ':' + _minute + ':' + _second;
    if (this.isWrap) {
        _day = '<span class="day">' + _day + '</span>';
        time_str = '<span class="hour">' + time_str + '</span>';
    }

    txt = _day + ' ' + _dayTxt + ' ' + time_str;
    if (this.isWeeklyDeal) {
        var dayTxtClass = "weekly_day_txt";
        if (isDays) {
            dayTxtClass = "weekly_days_txt";
        }
        var dayTxtLangId = dayTxtClass + "_" + webData.lang;
        _day = '<span class="weekly_day">' + _day + '</span>';
        _dayTxt = '<span class= ' + dayTxtClass + ' id=' + dayTxtLangId + ' >' + _dayTxt + '</span>';
        _hour = '<span class="weekly_hour">' + _hour + '</span>';
        _minute = '<span class="weekly_minute">' + _minute + '</span>';
        _second = '<span class="weekly_second">' + _second + '</span>';

        var txt = _day + _dayTxt + _hour + _minute + _second;
    }
    if(this.isSpecialOffer) {
        if (_day < 10) {
            _day = "0" + _day;
        }
        _dayTxt = '<em class="special-offer-day-txt">D</em>';
        var colon = '<em class="special-offer-colon">:</em>';
        _day = '<span class="special-offer-day">' + _day + _dayTxt + '</span>';
        _hour = '<span class="special-offer-hour">' + _hour + colon + '</span>';
        _minute = '<span class="special-offer-minute">' + _minute + colon + '</span>';
        _second = '<span class="special-offer-second">' + _second + '</span>';

        txt = _day + _hour + _minute + _second;
    }
    container.html(txt);

    setTimeout(function () {
        me.init(next_time);
    }, 1000);
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2NvdW50ZG93bi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHJcbmZ1bmN0aW9uIENvdW50ZG93bihjb250YWluZXIsIHRpbWUsIGZvcm1hdCwgaXNXcmFwLCBpc1dlZWtseURlYWwsIGlzU3BlY2lhbE9mZmVyKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9ICQoY29udGFpbmVyKTtcclxuICAgIHRoaXMudGltZSA9IHRpbWU7XHJcbiAgICB0aGlzLmZvcm1hdCA9ICh0eXBlb2YoZm9ybWF0KSA9PSAndW5kZWZpbmVkJykgPyAnJyA6IGZvcm1hdDtcclxuICAgIHRoaXMuaXNXcmFwID0gaXNXcmFwIHx8IGZhbHNlO1xyXG4gICAgdGhpcy5pc1dlZWtseURlYWwgPSBpc1dlZWtseURlYWwgfHwgZmFsc2U7XHJcbiAgICB0aGlzLmlzU3BlY2lhbE9mZmVyID0gaXNTcGVjaWFsT2ZmZXIgfHwgZmFsc2U7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBDb3VudGRvd247XHJcblxyXG5Db3VudGRvd24ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmNvbnRhaW5lclswXSkge1xyXG4gICAgICAgIHRoaXMuaW5pdCh0aGlzLnRpbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcblxyXG5Db3VudGRvd24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIHZhciBjb250YWluZXIgPSBtZS5jb250YWluZXI7XHJcbiAgICB2YXIgbmV4dF90aW1lID0gdGltZSA9IHRpbWUgLSAxID4gMCA/IHRpbWUgLSAxIDogMDtcclxuICAgIHZhciBfZGF5ID0gJycsIF9kYXlUeHQgPSAnJywgaXNEYXlzID0gZmFsc2U7XHJcbiAgICBpZiAodGhpcy5mb3JtYXQgPT0gJ2RheXMnKSB7XHJcbiAgICAgICAgX2RheSA9IE1hdGguZmxvb3IodGltZSAvICgyNCAqIDYwICogNjApKTtcclxuICAgICAgICB0aW1lID0gdGltZSAtIF9kYXkgKiAyNCAqIDYwICogNjA7XHJcbiAgICAgICAgX2RheVR4dCA9IF9sYW5nLnBhZ2VfY29tbW9uX2RheTtcclxuICAgICAgICBpZiAoX2RheSA+PSAyKSB7XHJcbiAgICAgICAgICAgIF9kYXlUeHQgPSBfbGFuZy5wYWdlX2NvbW1vbl9kYXlzO1xyXG4gICAgICAgICAgICBpc0RheXMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNXZWVrbHlEZWFsKSB7XHJcbiAgICAgICAgICAgIF9kYXlUeHQgPSAnPHNwYW4gY2xhc3M9XCJkYXlfdHh0XCI+JyArIF9kYXlUeHQgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaG91ciA9IE1hdGguZmxvb3IodGltZSAvICg2MCAqIDYwKSk7XHJcbiAgICB0aW1lID0gdGltZSAtIF9ob3VyICogNjAgKiA2MDtcclxuICAgIHZhciBfbWludXRlID0gTWF0aC5mbG9vcih0aW1lIC8gNjApO1xyXG4gICAgdmFyIF9zZWNvbmQgPSB0aW1lIC0gX21pbnV0ZSAqIDYwO1xyXG4gICAgaWYgKF9ob3VyIDwgMTApIHtcclxuICAgICAgICBfaG91ciA9IFwiMFwiICsgX2hvdXI7XHJcbiAgICB9XHJcbiAgICBpZiAoX21pbnV0ZSA8IDEwKSB7XHJcbiAgICAgICAgX21pbnV0ZSA9ICcwJyArIF9taW51dGU7XHJcbiAgICB9XHJcbiAgICBpZiAoX3NlY29uZCA8IDEwKSB7XHJcbiAgICAgICAgX3NlY29uZCA9ICcwJyArIF9zZWNvbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy93cmFwIGRhdGUgdGltZSBmb3JtYXRcclxuICAgIHZhciB0aW1lX3N0ciA9IF9ob3VyICsgJzonICsgX21pbnV0ZSArICc6JyArIF9zZWNvbmQ7XHJcbiAgICBpZiAodGhpcy5pc1dyYXApIHtcclxuICAgICAgICBfZGF5ID0gJzxzcGFuIGNsYXNzPVwiZGF5XCI+JyArIF9kYXkgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgdGltZV9zdHIgPSAnPHNwYW4gY2xhc3M9XCJob3VyXCI+JyArIHRpbWVfc3RyICsgJzwvc3Bhbj4nO1xyXG4gICAgfVxyXG5cclxuICAgIHR4dCA9IF9kYXkgKyAnICcgKyBfZGF5VHh0ICsgJyAnICsgdGltZV9zdHI7XHJcbiAgICBpZiAodGhpcy5pc1dlZWtseURlYWwpIHtcclxuICAgICAgICB2YXIgZGF5VHh0Q2xhc3MgPSBcIndlZWtseV9kYXlfdHh0XCI7XHJcbiAgICAgICAgaWYgKGlzRGF5cykge1xyXG4gICAgICAgICAgICBkYXlUeHRDbGFzcyA9IFwid2Vla2x5X2RheXNfdHh0XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkYXlUeHRMYW5nSWQgPSBkYXlUeHRDbGFzcyArIFwiX1wiICsgd2ViRGF0YS5sYW5nO1xyXG4gICAgICAgIF9kYXkgPSAnPHNwYW4gY2xhc3M9XCJ3ZWVrbHlfZGF5XCI+JyArIF9kYXkgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgX2RheVR4dCA9ICc8c3BhbiBjbGFzcz0gJyArIGRheVR4dENsYXNzICsgJyBpZD0nICsgZGF5VHh0TGFuZ0lkICsgJyA+JyArIF9kYXlUeHQgKyAnPC9zcGFuPic7XHJcbiAgICAgICAgX2hvdXIgPSAnPHNwYW4gY2xhc3M9XCJ3ZWVrbHlfaG91clwiPicgKyBfaG91ciArICc8L3NwYW4+JztcclxuICAgICAgICBfbWludXRlID0gJzxzcGFuIGNsYXNzPVwid2Vla2x5X21pbnV0ZVwiPicgKyBfbWludXRlICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgIF9zZWNvbmQgPSAnPHNwYW4gY2xhc3M9XCJ3ZWVrbHlfc2Vjb25kXCI+JyArIF9zZWNvbmQgKyAnPC9zcGFuPic7XHJcblxyXG4gICAgICAgIHZhciB0eHQgPSBfZGF5ICsgX2RheVR4dCArIF9ob3VyICsgX21pbnV0ZSArIF9zZWNvbmQ7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmlzU3BlY2lhbE9mZmVyKSB7XHJcbiAgICAgICAgaWYgKF9kYXkgPCAxMCkge1xyXG4gICAgICAgICAgICBfZGF5ID0gXCIwXCIgKyBfZGF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBfZGF5VHh0ID0gJzxlbSBjbGFzcz1cInNwZWNpYWwtb2ZmZXItZGF5LXR4dFwiPkQ8L2VtPic7XHJcbiAgICAgICAgdmFyIGNvbG9uID0gJzxlbSBjbGFzcz1cInNwZWNpYWwtb2ZmZXItY29sb25cIj46PC9lbT4nO1xyXG4gICAgICAgIF9kYXkgPSAnPHNwYW4gY2xhc3M9XCJzcGVjaWFsLW9mZmVyLWRheVwiPicgKyBfZGF5ICsgX2RheVR4dCArICc8L3NwYW4+JztcclxuICAgICAgICBfaG91ciA9ICc8c3BhbiBjbGFzcz1cInNwZWNpYWwtb2ZmZXItaG91clwiPicgKyBfaG91ciArIGNvbG9uICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgIF9taW51dGUgPSAnPHNwYW4gY2xhc3M9XCJzcGVjaWFsLW9mZmVyLW1pbnV0ZVwiPicgKyBfbWludXRlICsgY29sb24gKyAnPC9zcGFuPic7XHJcbiAgICAgICAgX3NlY29uZCA9ICc8c3BhbiBjbGFzcz1cInNwZWNpYWwtb2ZmZXItc2Vjb25kXCI+JyArIF9zZWNvbmQgKyAnPC9zcGFuPic7XHJcblxyXG4gICAgICAgIHR4dCA9IF9kYXkgKyBfaG91ciArIF9taW51dGUgKyBfc2Vjb25kO1xyXG4gICAgfVxyXG4gICAgY29udGFpbmVyLmh0bWwodHh0KTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtZS5pbml0KG5leHRfdGltZSk7XHJcbiAgICB9LCAxMDAwKTtcclxufTsiXX0=
},{}],16:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('../lib/jqueryForm');
require('../mod/autocompleteEmail');
require('../mod/formCheck');

var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var elem_mask = $('.register-dialog-mask');
var elem_coupon_dialog = $('#dialog_p');

//打开coupon code 展示弹窗
function open_coupon_dialog(couponCode,back) {
    var dh = $(document).height();
    handler_coupon_dialog(couponCode,back);
    elem_mask.height(dh).show();
    elem_coupon_dialog.show();
    $("body").css('overflow','hidden');
}

function handler_coupon_dialog(couponCode,back) {
    $("#coupon-code").html('<span style="color: #342F36">' + _lang.page_pop_dialog_register_coupon_tip + ': ' + '</span>' + couponCode);
    elem_coupon_dialog.on('click', '.close', function() {
        close_dialog(elem_mask, elem_coupon_dialog);
        location.href = back;
    });
    elem_coupon_dialog.on('click', '.button', function() {
        close_dialog(elem_mask, elem_coupon_dialog);
        location.href = back;
    });
    elem_mask.off('click');
}

function close_dialog(elem_mask, elem_dialog) {
    elem_mask.hide();
    elem_dialog.hide();
    $("body").css('overflow','auto');
    window.dataLayer.push({
        'category' : 'registerDialog',
        'action' : 'regDialogCloses',
        'event' : 'popRegisterDialog'
    });
}

exports.init = function(CouponCode,back) {
    if(elem_mask.length && elem_coupon_dialog.length) {
        if ((!elem_mask.is(":visible"))) {
            open_coupon_dialog(CouponCode,back);
            if($(".one_register_banner").length>0){
                $('#judge_register_banner').removeClass('two_register_banner');
            }else{
                $('#judge_register_banner').addClass('one_register_banner');
                $('#judge_register_banner').removeClass('two_register_banner');
            }
        }
    }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2NvdXBvbl9yZWdpc3Rlcl9kaWFsb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbnJlcXVpcmUoJy4uL2xpYi9qcXVlcnlGb3JtJyk7XHJcbnJlcXVpcmUoJy4uL21vZC9hdXRvY29tcGxldGVFbWFpbCcpO1xyXG5yZXF1aXJlKCcuLi9tb2QvZm9ybUNoZWNrJyk7XHJcblxyXG52YXIgQ29va2llID0gcmVxdWlyZSgnLi4vbW9kL2Nvb2tpZScpO1xyXG52YXIgY29va2llID0gbmV3IENvb2tpZSgpO1xyXG5cclxudmFyIGVsZW1fbWFzayA9ICQoJy5yZWdpc3Rlci1kaWFsb2ctbWFzaycpO1xyXG52YXIgZWxlbV9jb3Vwb25fZGlhbG9nID0gJCgnI2RpYWxvZ19wJyk7XHJcblxyXG4vL+aJk+W8gGNvdXBvbiBjb2RlIOWxleekuuW8ueeql1xyXG5mdW5jdGlvbiBvcGVuX2NvdXBvbl9kaWFsb2coY291cG9uQ29kZSxiYWNrKSB7XHJcbiAgICB2YXIgZGggPSAkKGRvY3VtZW50KS5oZWlnaHQoKTtcclxuICAgIGhhbmRsZXJfY291cG9uX2RpYWxvZyhjb3Vwb25Db2RlLGJhY2spO1xyXG4gICAgZWxlbV9tYXNrLmhlaWdodChkaCkuc2hvdygpO1xyXG4gICAgZWxlbV9jb3Vwb25fZGlhbG9nLnNob3coKTtcclxuICAgICQoXCJib2R5XCIpLmNzcygnb3ZlcmZsb3cnLCdoaWRkZW4nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlcl9jb3Vwb25fZGlhbG9nKGNvdXBvbkNvZGUsYmFjaykge1xyXG4gICAgJChcIiNjb3Vwb24tY29kZVwiKS5odG1sKCc8c3BhbiBzdHlsZT1cImNvbG9yOiAjMzQyRjM2XCI+JyArIF9sYW5nLnBhZ2VfcG9wX2RpYWxvZ19yZWdpc3Rlcl9jb3Vwb25fdGlwICsgJzogJyArICc8L3NwYW4+JyArIGNvdXBvbkNvZGUpO1xyXG4gICAgZWxlbV9jb3Vwb25fZGlhbG9nLm9uKCdjbGljaycsICcuY2xvc2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2NvdXBvbl9kaWFsb2cpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSBiYWNrO1xyXG4gICAgfSk7XHJcbiAgICBlbGVtX2NvdXBvbl9kaWFsb2cub24oJ2NsaWNrJywgJy5idXR0b24nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2NvdXBvbl9kaWFsb2cpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSBiYWNrO1xyXG4gICAgfSk7XHJcbiAgICBlbGVtX21hc2sub2ZmKCdjbGljaycpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZV9kaWFsb2coZWxlbV9tYXNrLCBlbGVtX2RpYWxvZykge1xyXG4gICAgZWxlbV9tYXNrLmhpZGUoKTtcclxuICAgIGVsZW1fZGlhbG9nLmhpZGUoKTtcclxuICAgICQoXCJib2R5XCIpLmNzcygnb3ZlcmZsb3cnLCdhdXRvJyk7XHJcbiAgICB3aW5kb3cuZGF0YUxheWVyLnB1c2goe1xyXG4gICAgICAgICdjYXRlZ29yeScgOiAncmVnaXN0ZXJEaWFsb2cnLFxyXG4gICAgICAgICdhY3Rpb24nIDogJ3JlZ0RpYWxvZ0Nsb3NlcycsXHJcbiAgICAgICAgJ2V2ZW50JyA6ICdwb3BSZWdpc3RlckRpYWxvZydcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbihDb3Vwb25Db2RlLGJhY2spIHtcclxuICAgIGlmKGVsZW1fbWFzay5sZW5ndGggJiYgZWxlbV9jb3Vwb25fZGlhbG9nLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICgoIWVsZW1fbWFzay5pcyhcIjp2aXNpYmxlXCIpKSkge1xyXG4gICAgICAgICAgICBvcGVuX2NvdXBvbl9kaWFsb2coQ291cG9uQ29kZSxiYWNrKTtcclxuICAgICAgICAgICAgaWYoJChcIi5vbmVfcmVnaXN0ZXJfYmFubmVyXCIpLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgICQoJyNqdWRnZV9yZWdpc3Rlcl9iYW5uZXInKS5yZW1vdmVDbGFzcygndHdvX3JlZ2lzdGVyX2Jhbm5lcicpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICQoJyNqdWRnZV9yZWdpc3Rlcl9iYW5uZXInKS5hZGRDbGFzcygnb25lX3JlZ2lzdGVyX2Jhbm5lcicpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2p1ZGdlX3JlZ2lzdGVyX2Jhbm5lcicpLnJlbW92ZUNsYXNzKCd0d29fcmVnaXN0ZXJfYmFubmVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07Il19
},{"../lib/jqueryForm":12,"../mod/autocompleteEmail":13,"../mod/cookie":14,"../mod/formCheck":19}],17:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();

	function Dialog() {}
	module.exports = new Dialog();

	Dialog.prototype.open = function(setting) {
		var me = this;
		var params = $.extend({
				modId : 'dialog',
				overlayOpacity : 0.5,
				overlayBgColor : '#000',
				width : Math.min(900, $(window).width() - 100),
				html : '',
			    canClose : true,
				closeWhenClickingBg : false,
                isUpdateHtml : false
			}, setting);

		//show overlayer
		if ($('#dialogOverlay').size() > 0) {
			var layer = $('#dialogOverlay');
		} else {
			var layer = $('<div id="dialogOverlay"><div style="background:' + params.overlayBgColor + ';"></div></div>').prependTo('body');
		};

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", params.overlayOpacity);

		//show dialog box
		if($('#' + params.modId).size() == 0) {
			var html = ['<div class="dialog" id="' + params.modId + '">', '<div class="dialog-wrapper">', '<div class="dialog-content" oncontextmenu="return false">', '<img src="' + webData.IMG_PATH + 'tran.gif" class="dialog-img">', '</div>', '<a href="javascript:void(0)" class="dialog-close"></a>', '</div>', '</div>'];
			if (!params.canClose) {
				html[5] = "";
			}
			layer.after(html.join(''));
		}
		var winbox = $('#' + params.modId);
		var mainShow = winbox.find('.dialog-content');
		var btnClose = winbox.find('.dialog-close');

		if((params.html != "" && mainShow.find('.dialog-img').size() > 0) || (params.html != "" && params.isUpdateHtml)) {
			mainShow.html(params.html);
		}

		winbox.show().css({
			"top" : Math.max(50, $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2),
			"left" : Math.max(0, $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2)
		});

		//click Esc key to hide all dialogs
		$(document).bind('keydown', enableEsc);

		//click overlayer
		layer.unbind();
		if (params.closeWhenClickingBg) {
			layer.bind('click', function () {
				me.close(winbox, true);
			});
		}

		//click close btn
		btnClose.unbind().bind('click', function () {
            if (!$.isEmptyObject(window.review) && window.review.status) {
                window.review = {
                    status: false,
                    url: webData.WEB_ROOT
                }
            }
            if (typeof cookie.getCookie('signInGoogle') != 'undefined' && cookie.getCookie('signInGoogle')) {
                cookie.setCookie('signInGoogle', false, 30);
            }
            cookie.setCookie('scrollTop', 0, -1);
            cookie.setCookie('scrollLeft', 0, -1);
			cookie.setCookie('favGoodsId', 0, -1);
			me.close(winbox, true);
			//return false
		});
		return winbox;
	};
	Dialog.prototype.openRegisterLogin = function(setting) {
		var me = this;
		var params = $.extend({
				modId : 'dialog',
				overlayOpacity : 0.5,
				overlayBgColor : '#000',
				width : Math.min(900, $(window).width() - 100),
				html : '',
			    canClose : true,
				closeWhenClickingBg : false,
                isUpdateHtml : false
			}, setting);

		//show overlayer
		if ($('#dialogOverlay').size() > 0) {
			var layer = $('#dialogOverlay');
		} else {
			var layer = $('<div id="dialogOverlay"><div style="background:' + params.overlayBgColor + ';"></div></div>').prependTo('body');
		};

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", params.overlayOpacity);

		//show dialog box
		if($('#' + params.modId).size() == 0) {
			var html = ['<div class="dialog showroom-login-dialog" id="' + params.modId + '">', '<div class="dialog-wrapper">', '<div class="dialog-content" oncontextmenu="return false">', '<img src="' + webData.IMG_PATH + 'tran.gif" class="dialog-img">', '</div>', '<a href="javascript:void(0)" class="dialog-close"></a>', '</div>', '</div>'];
			if (!params.canClose) {
				html[5] = "";
			}
			layer.after(html.join(''));
		}
		var winbox = $('#' + params.modId);
		var mainShow = winbox.find('.dialog-content');
		var btnClose = winbox.find('.dialog-close');

		if((params.html != "" && mainShow.find('.dialog-img').size() > 0) || (params.html != "" && params.isUpdateHtml)) {
			mainShow.html(params.html);
		}

		// winbox.show().css({
		// 	"top" : Math.max(50, $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2),
		// 	"left" : Math.max(0, $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2)
		// });
		winbox.css('display', 'flex')
		winbox.find('.dialog-close-icon').on('click', function () {
			layer.hide();
			winbox.hide();
		})
		//click Esc key to hide all dialogs
		$(document).bind('keydown', enableEsc);

		//click overlayer
		layer.unbind();
		if (params.closeWhenClickingBg) {
			layer.bind('click', function () {
				me.close(winbox, true);
			});
		}

		//click close btn
		btnClose.unbind().bind('click', function () {
            if (!$.isEmptyObject(window.review) && window.review.status) {
                window.review = {
                    status: false,
                    url: webData.WEB_ROOT
                }
            }
            if (typeof cookie.getCookie('signInGoogle') != 'undefined' && cookie.getCookie('signInGoogle')) {
                cookie.setCookie('signInGoogle', false, 30);
            }
            cookie.setCookie('scrollTop', 0, -1);
            cookie.setCookie('scrollLeft', 0, -1);
			cookie.setCookie('favGoodsId', 0, -1);
			me.close(winbox, true);
			//return false
		});
		return winbox;
	};

	Dialog.prototype.close = function(winbox, isHideOverlay) {
		$(winbox).hide();
		if(isHideOverlay) {
			var layer = $('#dialogOverlay');
			layer.children('div').stop().fadeTo("fast", 0.1, function () {
				layer.hide();
				layer.unbind();
			});
		}
		$(document).unbind('keydown', enableEsc);
	};

	function enableEsc(e) {
		var unicode = e.keyCode ? e.keyCode : e.charCode;
		if (unicode == 27) {
			$('.dialog:visible').hide();
			var layer = $('#dialogOverlay');
			layer.children('div').stop().fadeTo("fast", 0.1, function () {
				layer.hide()
			})
			$(document).unbind('keydown', enableEsc)
		}
	}

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":14}],18:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

function downloadAppSus(container) {
    this.container = $(container);
}
module.exports = downloadAppSus;

downloadAppSus.prototype.init = function () {
    //异步初始化下载app获取积分数
    $.ajax({
        "type": "GET",
        "url": "/ajax.php",
        "data": "act=points/getAppPoints",
        "cache": false,
        "dataType": "json",
        "success": function (res) {
            if (res && res.code == 0) {
                var points = res.points;

                var html = $('.page_common_download_get_points').html();
                $('.page_common_download_get_points').html(html.replace('{$points}', '<span class="page_common_download_get_points_number">' + points + '</span>'))
            }
        },
    });
    var me = this;
    var target = $('#btop');

    $(window).resize(function(){
        me.setPos();
    });

    $(window).scroll(function(){
        me.setPos();

        var sTop = $(window).scrollTop();
        if (sTop <= (target.offset().top + 150)) {
            $('.download_app_sus').hide();
        } else {
            $('.download_app_sus').show();
        }
    });

    $(document).on('mouseover', '#download_app_sus_img', function () {
        $('.download_app_sus').addClass('over');
    }).on('mouseout', '#download_app_sus_img', function () {
        $('.download_app_sus').removeClass('over');
    });

    $(document).on('mouseover', '.download_app_block', function () {
        $('.download_app_sus').addClass('over');
    }).on('mouseout', '.download_app_block', function () {
        $('.download_app_sus').removeClass('over');
    });
}

downloadAppSus.prototype.setPos = function () {
    var w = document.documentElement.clientWidth;

    if ($('.header').css('min-width') == '990px') {
        var left = 990 + (w-990)/2;
    }
    else {
        var left = 1366 + (w-1366)/2;
    }

    this.container.css('left', left + 'px');
}

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Rvd25sb2FkQXBwU3VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcbnZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuZnVuY3Rpb24gZG93bmxvYWRBcHBTdXMoY29udGFpbmVyKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9ICQoY29udGFpbmVyKTtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IGRvd25sb2FkQXBwU3VzO1xyXG5cclxuZG93bmxvYWRBcHBTdXMucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvL+W8guatpeWIneWni+WMluS4i+i9vWFwcOiOt+WPluenr+WIhuaVsFxyXG4gICAgJC5hamF4KHtcclxuICAgICAgICBcInR5cGVcIjogXCJHRVRcIixcclxuICAgICAgICBcInVybFwiOiBcIi9hamF4LnBocFwiLFxyXG4gICAgICAgIFwiZGF0YVwiOiBcImFjdD1wb2ludHMvZ2V0QXBwUG9pbnRzXCIsXHJcbiAgICAgICAgXCJjYWNoZVwiOiBmYWxzZSxcclxuICAgICAgICBcImRhdGFUeXBlXCI6IFwianNvblwiLFxyXG4gICAgICAgIFwic3VjY2Vzc1wiOiBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXMgJiYgcmVzLmNvZGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IHJlcy5wb2ludHM7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAkKCcucGFnZV9jb21tb25fZG93bmxvYWRfZ2V0X3BvaW50cycpLmh0bWwoKTtcclxuICAgICAgICAgICAgICAgICQoJy5wYWdlX2NvbW1vbl9kb3dubG9hZF9nZXRfcG9pbnRzJykuaHRtbChodG1sLnJlcGxhY2UoJ3skcG9pbnRzfScsICc8c3BhbiBjbGFzcz1cInBhZ2VfY29tbW9uX2Rvd25sb2FkX2dldF9wb2ludHNfbnVtYmVyXCI+JyArIHBvaW50cyArICc8L3NwYW4+JykpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIHRhcmdldCA9ICQoJyNidG9wJyk7XHJcblxyXG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpe1xyXG4gICAgICAgIG1lLnNldFBvcygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpe1xyXG4gICAgICAgIG1lLnNldFBvcygpO1xyXG5cclxuICAgICAgICB2YXIgc1RvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICAgICAgICBpZiAoc1RvcCA8PSAodGFyZ2V0Lm9mZnNldCgpLnRvcCArIDE1MCkpIHtcclxuICAgICAgICAgICAgJCgnLmRvd25sb2FkX2FwcF9zdXMnKS5oaWRlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmRvd25sb2FkX2FwcF9zdXMnKS5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ21vdXNlb3ZlcicsICcjZG93bmxvYWRfYXBwX3N1c19pbWcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLmRvd25sb2FkX2FwcF9zdXMnKS5hZGRDbGFzcygnb3ZlcicpO1xyXG4gICAgfSkub24oJ21vdXNlb3V0JywgJyNkb3dubG9hZF9hcHBfc3VzX2ltZycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCcuZG93bmxvYWRfYXBwX3N1cycpLnJlbW92ZUNsYXNzKCdvdmVyJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2VvdmVyJywgJy5kb3dubG9hZF9hcHBfYmxvY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLmRvd25sb2FkX2FwcF9zdXMnKS5hZGRDbGFzcygnb3ZlcicpO1xyXG4gICAgfSkub24oJ21vdXNlb3V0JywgJy5kb3dubG9hZF9hcHBfYmxvY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLmRvd25sb2FkX2FwcF9zdXMnKS5yZW1vdmVDbGFzcygnb3ZlcicpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmRvd25sb2FkQXBwU3VzLnByb3RvdHlwZS5zZXRQb3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcclxuXHJcbiAgICBpZiAoJCgnLmhlYWRlcicpLmNzcygnbWluLXdpZHRoJykgPT0gJzk5MHB4Jykge1xyXG4gICAgICAgIHZhciBsZWZ0ID0gOTkwICsgKHctOTkwKS8yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGxlZnQgPSAxMzY2ICsgKHctMTM2NikvMjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbnRhaW5lci5jc3MoJ2xlZnQnLCBsZWZ0ICsgJ3B4Jyk7XHJcbn1cclxuXHJcbi8vfSk7XHJcbiJdfQ==
},{}],19:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	$.fn.formCheck = function (items, params) {
		if (!params)
			params = {};
		params.rules = $.extend({
				'null' : function (obj, checks) {
					return $.trim($(obj).val()).length > 0
				},
				'maxlength' : function (obj, checks) {
					return $.trim($(obj).val()).length <= checks.maxlength
				},
				'minlength' : function (obj, checks) {
					return $.trim($(obj).val()).length >= checks.minlength
				},
				'digitMinlength' : function (obj, checks) {
					return $.trim($(obj).val().replace(/[^0-9]/g, '')).length >= checks.minlength
				},
				'email' : function (obj, checks) {
					return /(\,|^)([\w+._]+@\w+\.(\w+\.){0,3}\w{2,4})/.test($(obj).val().replace(/-|\//g, ''))
				},
				'checked' : function (obj, checks) {
					return obj.checked
				},
				'phone' : function (obj, checks) {
					return /^[\d-\s]{1,20}$/.test($(obj).val()) && $.trim($(obj).val()).replace(/[\s]+/g, ' ').length <= checks.maxlength
				},
				'number' : function (obj, checks) {
					return /^[0-9]+$/.test($.trim($(obj).val()))
				},
				'min' : function (obj, checks) {
					return parseInt($(obj).val()) >= checks.min
				},
				"regexp" : function (obj, checks) {
					return checks.pattern.test($.trim($(obj).val()))
				},
				'select' : function (obj, checks) {
					return $(obj).val() != checks.value
				},
				'user' : function (obj, checks) {
					return /^(?!\d)[a-zA-Z0-9\u4e00-\u9fa5_]{5,18}$/.test($.trim($(obj).val()))
				}
			}, params.rules);
		var result = true,
		focused = false;
		function checkItem(item, checks) {
			for (j in checks) {
				if (params.rules[checks[j].type])
					if (params.rules[checks[j].type](item, checks[j]))
						continue;
                /*
				if (!focused && !checks[j].noFocus) {
					if ($(item).offset().top < $(window).scrollTop()) {
						$('html, body').animate({
							scrollTop : $(item).offset().top
						}, 'fast')
					}
					focused = true
				};
                 */
				if (checks[j].showError) {
					checks[j].showError();
					result = false;
					break
				} else if (params.showError) {
					params.showError($(item), checks[j].errMsg, checks[j].errEvent);
					result = false;
					break
				} else if (params.errinfoFinder) {
					params.errinfoFinder($(item)).text(checks[j].errMsg);
					$(item).focus(function () {
						params.errinfoFinder($(item)).text('');
					});
					if ($(item).attr('type') != null && $(item).attr('type').toLowerCase() == 'checkbox') {
						$(item).click(function () {
							$(item).focus()
						})
					};
					result = false;
					break
				} else if (checks[j].errMsg) {
					alert(checks[j].errMsg);
					return false
				}
			};
			return true
		};
		for (i = 0; i < this[0].length; i++) {
			if ($(this[0][i]).attr('name') && $(this[0][i]).attr('name').length == 0 || $(this[0][i]).prop('disabled'))
				continue;
			var checks = items[$(this[0][i]).attr('name')];
			if (!checks)
				continue;
			if (!checkItem(this[0][i], checks))
				return false
		};
		return result
	};
	
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1DaGVjay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cdHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cdFxyXG5cdCQuZm4uZm9ybUNoZWNrID0gZnVuY3Rpb24gKGl0ZW1zLCBwYXJhbXMpIHtcclxuXHRcdGlmICghcGFyYW1zKVxyXG5cdFx0XHRwYXJhbXMgPSB7fTtcclxuXHRcdHBhcmFtcy5ydWxlcyA9ICQuZXh0ZW5kKHtcclxuXHRcdFx0XHQnbnVsbCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkLnRyaW0oJChvYmopLnZhbCgpKS5sZW5ndGggPiAwXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWF4bGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA8PSBjaGVja3MubWF4bGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWlubGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA+PSBjaGVja3MubWlubGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnZGlnaXRNaW5sZW5ndGgnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJC50cmltKCQob2JqKS52YWwoKS5yZXBsYWNlKC9bXjAtOV0vZywgJycpKS5sZW5ndGggPj0gY2hlY2tzLm1pbmxlbmd0aFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J2VtYWlsJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIC8oXFwsfF4pKFtcXHcrLl9dK0BcXHcrXFwuKFxcdytcXC4pezAsM31cXHd7Miw0fSkvLnRlc3QoJChvYmopLnZhbCgpLnJlcGxhY2UoLy18XFwvL2csICcnKSlcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdjaGVja2VkJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iai5jaGVja2VkXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQncGhvbmUnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bXFxkLVxcc117MSwyMH0kLy50ZXN0KCQob2JqKS52YWwoKSkgJiYgJC50cmltKCQob2JqKS52YWwoKSkucmVwbGFjZSgvW1xcc10rL2csICcgJykubGVuZ3RoIDw9IGNoZWNrcy5tYXhsZW5ndGhcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdudW1iZXInIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bMC05XSskLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J21pbicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCgkKG9iaikudmFsKCkpID49IGNoZWNrcy5taW5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFwicmVnZXhwXCIgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBjaGVja3MucGF0dGVybi50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J3NlbGVjdCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkKG9iaikudmFsKCkgIT0gY2hlY2tzLnZhbHVlXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQndXNlcicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAvXig/IVxcZClbYS16QS1aMC05XFx1NGUwMC1cXHU5ZmE1X117NSwxOH0kLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgcGFyYW1zLnJ1bGVzKTtcclxuXHRcdHZhciByZXN1bHQgPSB0cnVlLFxyXG5cdFx0Zm9jdXNlZCA9IGZhbHNlO1xyXG5cdFx0ZnVuY3Rpb24gY2hlY2tJdGVtKGl0ZW0sIGNoZWNrcykge1xyXG5cdFx0XHRmb3IgKGogaW4gY2hlY2tzKSB7XHJcblx0XHRcdFx0aWYgKHBhcmFtcy5ydWxlc1tjaGVja3Nbal0udHlwZV0pXHJcblx0XHRcdFx0XHRpZiAocGFyYW1zLnJ1bGVzW2NoZWNrc1tqXS50eXBlXShpdGVtLCBjaGVja3Nbal0pKVxyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIC8qXHJcblx0XHRcdFx0aWYgKCFmb2N1c2VkICYmICFjaGVja3Nbal0ubm9Gb2N1cykge1xyXG5cdFx0XHRcdFx0aWYgKCQoaXRlbSkub2Zmc2V0KCkudG9wIDwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XHJcblx0XHRcdFx0XHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxUb3AgOiAkKGl0ZW0pLm9mZnNldCgpLnRvcFxyXG5cdFx0XHRcdFx0XHR9LCAnZmFzdCcpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmb2N1c2VkID0gdHJ1ZVxyXG5cdFx0XHRcdH07XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuXHRcdFx0XHRpZiAoY2hlY2tzW2pdLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0Y2hlY2tzW2pdLnNob3dFcnJvcigpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0cGFyYW1zLnNob3dFcnJvcigkKGl0ZW0pLCBjaGVja3Nbal0uZXJyTXNnLCBjaGVja3Nbal0uZXJyRXZlbnQpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLmVycmluZm9GaW5kZXIpIHtcclxuXHRcdFx0XHRcdHBhcmFtcy5lcnJpbmZvRmluZGVyKCQoaXRlbSkpLnRleHQoY2hlY2tzW2pdLmVyck1zZyk7XHJcblx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cGFyYW1zLmVycmluZm9GaW5kZXIoJChpdGVtKSkudGV4dCgnJyk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGlmICgkKGl0ZW0pLmF0dHIoJ3R5cGUnKSAhPSBudWxsICYmICQoaXRlbSkuYXR0cigndHlwZScpLnRvTG93ZXJDYXNlKCkgPT0gJ2NoZWNrYm94Jykge1xyXG5cdFx0XHRcdFx0XHQkKGl0ZW0pLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKClcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fSBlbHNlIGlmIChjaGVja3Nbal0uZXJyTXNnKSB7XHJcblx0XHRcdFx0XHRhbGVydChjaGVja3Nbal0uZXJyTXNnKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH07XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpc1swXS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykgJiYgJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykubGVuZ3RoID09IDAgfHwgJCh0aGlzWzBdW2ldKS5wcm9wKCdkaXNhYmxlZCcpKVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR2YXIgY2hlY2tzID0gaXRlbXNbJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJyldO1xyXG5cdFx0XHRpZiAoIWNoZWNrcylcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0aWYgKCFjaGVja0l0ZW0odGhpc1swXVtpXSwgY2hlY2tzKSlcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblx0fTtcclxuXHRcclxuLy99KTsiXX0=
},{}],20:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

function formFieldsHandle() {}
module.exports = new formFieldsHandle();

formFieldsHandle.prototype.getBtnText = function (btn) {
    btn = $(btn).get(0);
    if((btn.tagName).toLowerCase() == 'button') {
        return $(btn).text();
    } else {
        return btn.value;
    }
};

formFieldsHandle.prototype.setBtnText = function (btn, text) {
    btn = $(btn).get(0);
    if((btn.tagName).toLowerCase() == 'button') {
        $(btn).text(text);
    } else {
        btn.value = text;
    }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1GaWVsZHNIYW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHJcbmZ1bmN0aW9uIGZvcm1GaWVsZHNIYW5kbGUoKSB7fVxyXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBmb3JtRmllbGRzSGFuZGxlKCk7XHJcblxyXG5mb3JtRmllbGRzSGFuZGxlLnByb3RvdHlwZS5nZXRCdG5UZXh0ID0gZnVuY3Rpb24gKGJ0bikge1xyXG4gICAgYnRuID0gJChidG4pLmdldCgwKTtcclxuICAgIGlmKChidG4udGFnTmFtZSkudG9Mb3dlckNhc2UoKSA9PSAnYnV0dG9uJykge1xyXG4gICAgICAgIHJldHVybiAkKGJ0bikudGV4dCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYnRuLnZhbHVlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZm9ybUZpZWxkc0hhbmRsZS5wcm90b3R5cGUuc2V0QnRuVGV4dCA9IGZ1bmN0aW9uIChidG4sIHRleHQpIHtcclxuICAgIGJ0biA9ICQoYnRuKS5nZXQoMCk7XHJcbiAgICBpZigoYnRuLnRhZ05hbWUpLnRvTG93ZXJDYXNlKCkgPT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAkKGJ0bikudGV4dCh0ZXh0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnRuLnZhbHVlID0gdGV4dDtcclxuICAgIH1cclxufTsiXX0=
},{}],21:[function(require,module,exports){
//define(function (require, exports, module) {
	
    var loadJS = function (id, src) {
        if (document.getElementById(id)) return;
        var container = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.id = id;
        script.src = src;
        script.async = true;
        container.appendChild(script);
    };

    var loadSocialJS = function (id) {
        var config = {
            "facebook" : "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=" + webData.fb_app,
            "twitter" : "https://platform.twitter.com/widgets.js",
            "pinit" : "//assets.pinterest.com/js/pinit.js",
            "gplusone" : "https://apis.google.com/js/plusone.js",
            "livechat" : ('https:' == document.location.protocol ? 'https://' : 'http://') + 'cdn.livechatinc.com/tracking.js',
            "gmail" : "https://apis.google.com/js/platform.js?onload=gmailLoadCallback"
        };
        for(var key in config) {
            if(key == id) {
                loadJS(id + '-sdk', config[key]);
                break;
            }
        }
    };

    module.exports = {
        "loadJS": loadJS,
        "loadSocialJS": loadSocialJS
    };

//});
},{}],22:[function(require,module,exports){
var openInPopup =  function (open) {
    return function (url, name, w, h) {
        var w = parseInt(w) || 475;
        var h = parseInt(h) || 183;
        // Fixes dual-screen position                         Most browsers      Firefox
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;

        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var override_features = 'width=' + w + ',height=' + h + ',left=' + left + ',top=' + top + ',scrollbars=1,location=1,toolbar=0';

        // set name if missing here
        //name = name || "default_window_name";
        return open.call(window, url, name, override_features);
    };
}(window.open);

module.exports = openInPopup;

},{}],23:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var dialog = require('../mod/dialog');
    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();

    function PopLogin() {
    }

    module.exports = PopLogin;

    PopLogin.prototype.requestFloatingSign = function (signSuccessCb, source, is_callback) {
        // var tab = arguments[2] && arguments[2] === "register" ? "register" : "login";
        //已登录
        if ($('#myAccount').find('dropdown').length > 0 || window.login_status == true) {
            signSuccessCb.call();
            return true;
        }

        function openLoginDialog() {
            var logUrl = webData.WEB_ROOT + "ajax.php?act=login&back=" + encodeURIComponent(source);
            var use_coupon_register = webData.use_coupon_register;
            var pageLoginByClickingRegister = _lang.page_register_webroot_agree_terms_privacy.replace(/{\$WEB_ROOT}/g, webData.WEB_ROOT);
            var fromEmail = "notice@" + webData.SITE_DOMAIN;
            var pageRemindRegisterEmail=_lang.page_remind_register_email.replace(/{\$from_email}/g, fromEmail);
            if(use_coupon_register) {
                var regUrl = webData.WEB_ROOT + "ajax.php?act=coupon_register&back=" + encodeURIComponent(source);
            }else{
                var regUrl = webData.WEB_ROOT + "ajax.php?act=register&back=" + encodeURIComponent(source);
            }
            var stylePreferenceHtml = "";
            for (var key in webData.stylePreference) {
                stylePreferenceHtml +=
                '<div class="style_preference">' +
                '<input type="checkbox" name="reg[style_preference][]" value="'+key+'" />' +
                '<label> '+ webData.stylePreference[key]+'</label>' +
                '</div>';
            }
            var couponUpper = _lang.page_checkout_coupon.toUpperCase()
            var loginDialogHtml =
                '<div class="login-register clearfix">'+
                '<div id="wrapper-r">' +
                    '<div class="widget w-scCreatNewAccount">' +
                    '<div class="w-rHeadingV2">' +
                    '<h2><span>' + _lang.page_common_register + '</span></h2>' +
                '<p class="register-coupon-tip">' + _lang.page_common_get + ' <b class="strong-bold">5% ' + _lang.page_common_price_off + ' </b>' + couponUpper + '</p>' +
                '</div>' +
                '<div class="mainbox">' +
                    '<p class="alert hide" id="_msgx"></p>' +
                    '<form action="'+regUrl+'" method="post" name="form_reg" id="form_reg" autocomplete="off" style="display: block;">' +
                    '<input type="hidden" name="act" value="register">' +
                    '<table cellspacing="0">' +
                    '<tbody>' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_email + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol relative"><input type="text" id="email" name="reg[email]" class="text elmbBlur" maxlength="60" autocomplete="off">' +
                                '<span id="regEmailValWait"></span>' +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_password + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol"><input type="password" id="password" name="reg[password]" class="text elmbBlur" maxlength="32">' +
                        '<tr>' +
                            '<td><span class="required">*</span>' + _lang.page_login_repeat_the_password + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol" style="padding-top: 1px"><input type="password" id="password_again" name="reg[password_again]" class="text elmbBlur" maxlength="32"></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td><span class="required"></span>' + _lang.page_common_event_day + ':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="inputcol datepicker" style="padding-top: 1px"><input type="text" id="datepicker_pop" name="event_day" class="text elmbBlur" readonly="readonly" maxlength="32"></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td>'+_lang.page_style_preference+':</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td>' +
                                stylePreferenceHtml +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="newsletter"><input type="checkbox" checked="checked" id="agreeNewsLetter" name="reg[agreeNewsLetter]">' +
                            '<label> ' + _lang.page_register_agree_newsletter + '</label></td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="sign-up-btn-td">' +
                                '<a href="javascript:void(0);" class="sign-up-btn" tabindex="3">' +
                                    '<input type="submit" value="' + _lang.page_register_reg_submit + '" alt="' + _lang.page_register_reg_submit + '" title="' + _lang.page_register_reg_submit + '" src="' + webData.IMG_PATH + 'tran.gif"  class="signUpBtn">' +
                                '</a>' +
                            '</td>' +
                        '</tr>' +
                        '<tr>' +
                            '<td class="privacy"><p>' + pageLoginByClickingRegister +'</p>' +
                            '<p>' + pageRemindRegisterEmail + '</p>' +
                            '</td>' +
                        '</tr>' +
                    '</tbody>' +
                '</table>';
            if(use_coupon_register){
                 loginDialogHtml = loginDialogHtml + '<input type="hidden" name="act" value="coupon_register" />';
            }else{
                 loginDialogHtml = loginDialogHtml + '<input type="hidden" name="act" value="register" />';
            }
                loginDialogHtml +=  '</form>' +
                '</div></div></div>'

                + '<div id="wrapper-l">' +
                '<div class="widget w-signInGuide">' +
                '<div class="w-rHeadingV2">' +
                '<h2><span>'+ _lang.page_login_sign_in +'</span></h2>' +
                '</div>' +
                '<div class="mainboxV2">' +
                '<form action="'+ logUrl +'" method="post" name="form_login" id="form_login" autocomplete="off">' +
                '<input type="hidden" value="login" name="act">' +
                '<table cellspacing="0"><tbody><tr><td>' +
                '<span class="required">* </span>'+ _lang.page_login_email +':</td></tr>' +
                '<tr><td class="inputcol">' +
                '<input type="text" id="_email" name="login[email]" value="" class="text elmbBlur" maxlength="96" autocomplete="off"></td></tr>' +
                '<tr><td><span class="required">* </span>'+ _lang.page_login_password +':</td></tr><tr>' +
                '<td class="inputcol"><input type="password" id="_password" name="login[password]" class="text elmbBlur" maxlength="40"></td></tr>' +
                '<tr><td class="inputcol"><p id="_msg" class="hide"></p></td></tr>' +
                '<tr><td class="sign-in-btn-td">' +
                '<a href="javascript:void(0);" class="sign-btn" tabindex="3">' +
                '<input type="submit" value="'+ _lang.page_login_sign_in +'" alt="'+ _lang.page_login_sign_in +'" title="'+ _lang.page_login_sign_in +'" src="' + webData.IMG_PATH + 'tran.gif" class="signInBtn">' +
                '</a>' +
                '</td></tr>' +
                '<tr><td class="inputcol">' +
                '<p class="forgotTip">' +
                '<a href="' + webData.WEB_ROOT + 'forgotpassword.php" target="_blank" title="' + _lang.page_login_forgot_tip + '" class="u">' + _lang.page_login_forgot_tip + '</a></p>' +
                '</p></td></tr></tbody></table></form>' +
                '<div class="login-dividing-line"><span>' + _lang.page_common_or + '</span></div>' +
                '<div class="sns-login"><div class="facebook_login">' +
                '<div id="fbSignBtn" onclick="pageData.loginModule.get_facebook_login()">' + _lang.page_login_login_with_facebook + '</div>' +
                '</div>' +
                '<div class="gmail_login"><div id="gmailSignBtn">' + _lang.page_sns_google_sign + '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</div>'
            + '</div>'
            dialog.openRegisterLogin({modId: 'loginDialog', width: 560, html: loginDialogHtml, closeWhenClickingBg: false});
            return true;
        }

        function dialogHandler() {
            //登陆注册表单
            var login = require('../pages/login');
            login.init_login(is_callback);
            login.init_register(is_callback);
            login.init_calendar('#datepicker_pop');
            if (typeof (is_callback) == 'undefined' || is_callback) {
                login.init_callback(signSuccessCb);
            }
        }

        if ($('#loginDialog').length > 0) {
            openLoginDialog();
            // dialogHandler();
        } else {
            $.ajax({
                type: 'get',
                url: webData.WEB_ROOT + 'ajax.php?act=checkLoggedIn',
                data: '',
                dataType: 'json',
                complete: function () {
                },
                success: function (r) {
                    if (r.error == 1) {
                        var use_coupon_register = webData.use_coupon_register;
                        if(use_coupon_register){
                            $('#loginDialog').css("display","block");
                        }
                        openLoginDialog();
                        dialogHandler();
                    } else {
                        signSuccessCb();
                    }
                },
                error: function () {
                }
            });
        }
    }

    PopLogin.prototype.jumpToUrl = function (url) {
        if (location.href === url) {
            window.location.reload()
        } else {
            window.location.href = url
        }
    }

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":14,"../mod/dialog":17,"../pages/login":25}],24:[function(require,module,exports){
(function (global){
/**
 * user photo dialog
 */
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    function UserPhotoDialog(options, dataList) {
       this.setting = $.extend({
           modId : 'dialog',
           overlayId : 'dialogOverlay',
           overlayOpacity : 0.4,
           overlayBgColor : '#000',
           width : Math.min(900, $(window).width() - 100),
           html : '',
           closeWhenClickingBg : true,
           isUpdateHtml : false
       }, options);
       this.winActive = false;
       this.data = dataList;
    }

    UserPhotoDialog.prototype.show = function() {
        //show overlayer
        if ($('#dialogOverlay').size() > 0) {
            var layer = $('#' + this.setting.overlayId);
        } else {
            var layer = $('<div id="' + this.setting.overlayId + '"><div style="background:' + this.setting.overlayBgColor + ';"></div></div>');
            $('body').append(layer);
        };

        //show dialog box
        var winbox = this.create();

        if (winbox) {
          $('body').append(winbox);
          this.winActive = true;
          $("#" + this.setting.modId).find(".slideshow .big").attr("src", this.data.shareData.sd_picture);
          $("#" + this.setting.modId).find(".review-info .content").html(this.data.content);
          $("#" + this.setting.modId).find(".review-info .reviewer").text(this.data.reviewer);
          $("#" + this.setting.modId).find(".review-info .by").text(this.data.by);
          $("#" + this.setting.modId).find(".review-info .gray").text(this.data.date);
          $("#" + this.setting.modId).find(".goods-url").attr("href", this.data.goods_url);
          var goodsPhotos = this.data.photos
          var thumbbailImageHtml = '';
          var clsName = '';
          for(var gp in goodsPhotos) {
              if (gp == 0) {
                  clsName = 'current'
              } else {
                  clsName = '';
              }
              thumbbailImageHtml = thumbbailImageHtml + '<img class="' + clsName + '" src="'+ goodsPhotos[gp].s+'" data-index="' + goodsPhotos[gp].pos + '" />';
          }
          //thumbnail image list
          //$("#" + this.setting.modId).find(".thumbnail-content img").attr("src", this.data.images.src);
          $("#" + this.setting.modId).find(".thumbnail-content").html(thumbbailImageHtml);

          //put data
          $("#" + this.setting.modId).find(".thumbnail-content").data("photos", goodsPhotos);

          var switchPhotos = function(thumbnail, showId) {
              var data = null;
              if(thumbnail) {
                 data = thumbnail.data("photos") || null;
              }
              if (data) {
                 if (showId < 0) {
                     showId = data.length - 1;
                 }
                 if (showId >= data.length) {
                     showId = 0;
                 }
                 for(var d in data) {
                     if(data[d].pos == showId) {
                         thumbnail.closest(".modal-body").find(".slideshow .big").attr("src", data[d].m);
                         break;
                     }
                 }
                 thumbnail.find("img.current").toggleClass("current");
                 thumbnail.find("img").eq(showId).addClass("current");
              }
          };

          if (goodsPhotos.length > 1) {
              //bind event
              $("#" + this.setting.modId).find(".thumbnail-content img").each(function(){
                  $(this).click(function() {
                      var imgContiner = $(this).closest(".thumbnail-content");
                      var showId = parseInt($(this).attr("data-index"));
                      switchPhotos(imgContiner, showId);
                  });
              });
    
              //left photo
              $("#" + this.setting.modId).find(".reviewer-photo-pre").click(function(){
                  var imgContiner = $(this).closest(".modal-body").find(".thumbnail-content");
                  var showId = parseInt(imgContiner.find("img.current").attr("data-index"));
                  showId = showId - 1;
                  switchPhotos(imgContiner, showId);
              });
              //right photo
              $("#" + this.setting.modId).find(".reviewer-photo-next").click(function(){
                  var imgContiner = $(this).closest(".modal-body").find(".thumbnail-content");
                  var showId = parseInt(imgContiner.find("img.current").attr("data-index"));
                  showId = showId + 1;
                  switchPhotos(imgContiner, showId);
              });
          } else {
              //not display pre next
              $("#" + this.setting.modId).find(".reviewer-photo-pre").css("display", "none");
              $("#" + this.setting.modId).find(".reviewer-photo-next").css("display", "none");
          }
        } else {
             this.winActive = false;
        }

        //show dialog 
        this.display();

        return this.winActive;
    };

    UserPhotoDialog.prototype.display = function() {
        if (!this.winActive) {
            return false;
        }
        var me = this;
        var winbox = $("#" + this.setting.modId);
        var btnClose = winbox.find('button.close');
        var layer = $("#" + this.setting.overlayId);

        var ptop = $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2,
            pleft = $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2;
        /*winbox.css({
            "top" : Math.max(50, $(window).scrollTop() + $(window).height() / 2 - winbox.height() / 2),
            "left" : Math.max(0, $(window).scrollLeft() + $(window).width() / 2 - winbox.width() / 2)
        }).show();*/
        winbox.css({
            "top" : ptop,
            "left" : pleft
        }).fadeIn();

       layer.show().children('div').css("opacity", this.setting.overlayOpacity);

       //click Esc key to hide all dialogs
        $(document).bind('keydown', enableEsc);
        //click overlayer
        layer.unbind();
        if (this.setting.closeWhenClickingBg) {
            layer.bind('click', function () {
                me.close(winbox, true);
            });
        }

        //click close btn
        btnClose.unbind().bind('click', function () {
            me.close(winbox, true);
            //return false
        });

       return true;
    };

    UserPhotoDialog.prototype.resume = function() {
        this.display();
    }

    UserPhotoDialog.prototype.close = function(winbox, isHideOverlay) {
        $(winbox).hide();
        if(isHideOverlay) {
            var layer = $('#dialogOverlay');
            layer.children('div').stop().fadeTo("fast", 0.1, function () {
                layer.hide();
                layer.unbind();
            });
        }
        $(document).unbind('keydown', enableEsc);
    };
    
    UserPhotoDialog.prototype.create = function() {
        var html = $("#user-photo-dialog-tpl").html();
        var tpl = '<div id="' + this.setting.modId + '" class="user-photos-pop-images dialog">'
                  + html
                  +'</div>';
        return $(tpl);
};

    function enableEsc(e) {
        var unicode = e.keyCode ? e.keyCode : e.charCode;
        if (unicode == 27) {
            $('.dialog:visible').hide();
            var layer = $('#dialogOverlay');
            layer.children('div').stop().fadeTo("fast", 0.1, function () {
                layer.hide()
            })
            $(document).unbind('keydown', enableEsc)
        }
    }

    module.exports = UserPhotoDialog;
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL3VzZXJQaG90b0RpYWxvZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiB1c2VyIHBob3RvIGRpYWxvZ1xyXG4gKi9cclxuLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cclxuICAgIHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIFVzZXJQaG90b0RpYWxvZyhvcHRpb25zLCBkYXRhTGlzdCkge1xyXG4gICAgICAgdGhpcy5zZXR0aW5nID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgIG1vZElkIDogJ2RpYWxvZycsXHJcbiAgICAgICAgICAgb3ZlcmxheUlkIDogJ2RpYWxvZ092ZXJsYXknLFxyXG4gICAgICAgICAgIG92ZXJsYXlPcGFjaXR5IDogMC40LFxyXG4gICAgICAgICAgIG92ZXJsYXlCZ0NvbG9yIDogJyMwMDAnLFxyXG4gICAgICAgICAgIHdpZHRoIDogTWF0aC5taW4oOTAwLCAkKHdpbmRvdykud2lkdGgoKSAtIDEwMCksXHJcbiAgICAgICAgICAgaHRtbCA6ICcnLFxyXG4gICAgICAgICAgIGNsb3NlV2hlbkNsaWNraW5nQmcgOiB0cnVlLFxyXG4gICAgICAgICAgIGlzVXBkYXRlSHRtbCA6IGZhbHNlXHJcbiAgICAgICB9LCBvcHRpb25zKTtcclxuICAgICAgIHRoaXMud2luQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICB0aGlzLmRhdGEgPSBkYXRhTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBVc2VyUGhvdG9EaWFsb2cucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvL3Nob3cgb3ZlcmxheWVyXHJcbiAgICAgICAgaWYgKCQoJyNkaWFsb2dPdmVybGF5Jykuc2l6ZSgpID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSAkKCcjJyArIHRoaXMuc2V0dGluZy5vdmVybGF5SWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9ICQoJzxkaXYgaWQ9XCInICsgdGhpcy5zZXR0aW5nLm92ZXJsYXlJZCArICdcIj48ZGl2IHN0eWxlPVwiYmFja2dyb3VuZDonICsgdGhpcy5zZXR0aW5nLm92ZXJsYXlCZ0NvbG9yICsgJztcIj48L2Rpdj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChsYXllcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9zaG93IGRpYWxvZyBib3hcclxuICAgICAgICB2YXIgd2luYm94ID0gdGhpcy5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHdpbmJveCkge1xyXG4gICAgICAgICAgJCgnYm9keScpLmFwcGVuZCh3aW5ib3gpO1xyXG4gICAgICAgICAgdGhpcy53aW5BY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5zbGlkZXNob3cgLmJpZ1wiKS5hdHRyKFwic3JjXCIsIHRoaXMuZGF0YS5zaGFyZURhdGEuc2RfcGljdHVyZSk7XHJcbiAgICAgICAgICAkKFwiI1wiICsgdGhpcy5zZXR0aW5nLm1vZElkKS5maW5kKFwiLnJldmlldy1pbmZvIC5jb250ZW50XCIpLmh0bWwodGhpcy5kYXRhLmNvbnRlbnQpO1xyXG4gICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5yZXZpZXctaW5mbyAucmV2aWV3ZXJcIikudGV4dCh0aGlzLmRhdGEucmV2aWV3ZXIpO1xyXG4gICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5yZXZpZXctaW5mbyAuYnlcIikudGV4dCh0aGlzLmRhdGEuYnkpO1xyXG4gICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5yZXZpZXctaW5mbyAuZ3JheVwiKS50ZXh0KHRoaXMuZGF0YS5kYXRlKTtcclxuICAgICAgICAgICQoXCIjXCIgKyB0aGlzLnNldHRpbmcubW9kSWQpLmZpbmQoXCIuZ29vZHMtdXJsXCIpLmF0dHIoXCJocmVmXCIsIHRoaXMuZGF0YS5nb29kc191cmwpO1xyXG4gICAgICAgICAgdmFyIGdvb2RzUGhvdG9zID0gdGhpcy5kYXRhLnBob3Rvc1xyXG4gICAgICAgICAgdmFyIHRodW1iYmFpbEltYWdlSHRtbCA9ICcnO1xyXG4gICAgICAgICAgdmFyIGNsc05hbWUgPSAnJztcclxuICAgICAgICAgIGZvcih2YXIgZ3AgaW4gZ29vZHNQaG90b3MpIHtcclxuICAgICAgICAgICAgICBpZiAoZ3AgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICBjbHNOYW1lID0gJ2N1cnJlbnQnXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgY2xzTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB0aHVtYmJhaWxJbWFnZUh0bWwgPSB0aHVtYmJhaWxJbWFnZUh0bWwgKyAnPGltZyBjbGFzcz1cIicgKyBjbHNOYW1lICsgJ1wiIHNyYz1cIicrIGdvb2RzUGhvdG9zW2dwXS5zKydcIiBkYXRhLWluZGV4PVwiJyArIGdvb2RzUGhvdG9zW2dwXS5wb3MgKyAnXCIgLz4nO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy90aHVtYm5haWwgaW1hZ2UgbGlzdFxyXG4gICAgICAgICAgLy8kKFwiI1wiICsgdGhpcy5zZXR0aW5nLm1vZElkKS5maW5kKFwiLnRodW1ibmFpbC1jb250ZW50IGltZ1wiKS5hdHRyKFwic3JjXCIsIHRoaXMuZGF0YS5pbWFnZXMuc3JjKTtcclxuICAgICAgICAgICQoXCIjXCIgKyB0aGlzLnNldHRpbmcubW9kSWQpLmZpbmQoXCIudGh1bWJuYWlsLWNvbnRlbnRcIikuaHRtbCh0aHVtYmJhaWxJbWFnZUh0bWwpO1xyXG5cclxuICAgICAgICAgIC8vcHV0IGRhdGFcclxuICAgICAgICAgICQoXCIjXCIgKyB0aGlzLnNldHRpbmcubW9kSWQpLmZpbmQoXCIudGh1bWJuYWlsLWNvbnRlbnRcIikuZGF0YShcInBob3Rvc1wiLCBnb29kc1Bob3Rvcyk7XHJcblxyXG4gICAgICAgICAgdmFyIHN3aXRjaFBob3RvcyA9IGZ1bmN0aW9uKHRodW1ibmFpbCwgc2hvd0lkKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICAgIGlmKHRodW1ibmFpbCkge1xyXG4gICAgICAgICAgICAgICAgIGRhdGEgPSB0aHVtYm5haWwuZGF0YShcInBob3Rvc1wiKSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgIGlmIChzaG93SWQgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIHNob3dJZCA9IGRhdGEubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgaWYgKHNob3dJZCA+PSBkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICBzaG93SWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBmb3IodmFyIGQgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICBpZihkYXRhW2RdLnBvcyA9PSBzaG93SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbC5jbG9zZXN0KFwiLm1vZGFsLWJvZHlcIikuZmluZChcIi5zbGlkZXNob3cgLmJpZ1wiKS5hdHRyKFwic3JjXCIsIGRhdGFbZF0ubSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB0aHVtYm5haWwuZmluZChcImltZy5jdXJyZW50XCIpLnRvZ2dsZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgICAgICAgICAgICAgICB0aHVtYm5haWwuZmluZChcImltZ1wiKS5lcShzaG93SWQpLmFkZENsYXNzKFwiY3VycmVudFwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGlmIChnb29kc1Bob3Rvcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgLy9iaW5kIGV2ZW50XHJcbiAgICAgICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi50aHVtYm5haWwtY29udGVudCBpbWdcIikuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ0NvbnRpbmVyID0gJCh0aGlzKS5jbG9zZXN0KFwiLnRodW1ibmFpbC1jb250ZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHNob3dJZCA9IHBhcnNlSW50KCQodGhpcykuYXR0cihcImRhdGEtaW5kZXhcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc3dpdGNoUGhvdG9zKGltZ0NvbnRpbmVyLCBzaG93SWQpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgIC8vbGVmdCBwaG90b1xyXG4gICAgICAgICAgICAgICQoXCIjXCIgKyB0aGlzLnNldHRpbmcubW9kSWQpLmZpbmQoXCIucmV2aWV3ZXItcGhvdG8tcHJlXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBpbWdDb250aW5lciA9ICQodGhpcykuY2xvc2VzdChcIi5tb2RhbC1ib2R5XCIpLmZpbmQoXCIudGh1bWJuYWlsLWNvbnRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBzaG93SWQgPSBwYXJzZUludChpbWdDb250aW5lci5maW5kKFwiaW1nLmN1cnJlbnRcIikuYXR0cihcImRhdGEtaW5kZXhcIikpO1xyXG4gICAgICAgICAgICAgICAgICBzaG93SWQgPSBzaG93SWQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICBzd2l0Y2hQaG90b3MoaW1nQ29udGluZXIsIHNob3dJZCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgLy9yaWdodCBwaG90b1xyXG4gICAgICAgICAgICAgICQoXCIjXCIgKyB0aGlzLnNldHRpbmcubW9kSWQpLmZpbmQoXCIucmV2aWV3ZXItcGhvdG8tbmV4dFwiKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICB2YXIgaW1nQ29udGluZXIgPSAkKHRoaXMpLmNsb3Nlc3QoXCIubW9kYWwtYm9keVwiKS5maW5kKFwiLnRodW1ibmFpbC1jb250ZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgc2hvd0lkID0gcGFyc2VJbnQoaW1nQ29udGluZXIuZmluZChcImltZy5jdXJyZW50XCIpLmF0dHIoXCJkYXRhLWluZGV4XCIpKTtcclxuICAgICAgICAgICAgICAgICAgc2hvd0lkID0gc2hvd0lkICsgMTtcclxuICAgICAgICAgICAgICAgICAgc3dpdGNoUGhvdG9zKGltZ0NvbnRpbmVyLCBzaG93SWQpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvL25vdCBkaXNwbGF5IHByZSBuZXh0XHJcbiAgICAgICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5yZXZpZXdlci1waG90by1wcmVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgICAgICAgJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCkuZmluZChcIi5yZXZpZXdlci1waG90by1uZXh0XCIpLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICB0aGlzLndpbkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9zaG93IGRpYWxvZyBcclxuICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luQWN0aXZlO1xyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyUGhvdG9EaWFsb2cucHJvdG90eXBlLmRpc3BsYXkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMud2luQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICB2YXIgd2luYm94ID0gJChcIiNcIiArIHRoaXMuc2V0dGluZy5tb2RJZCk7XHJcbiAgICAgICAgdmFyIGJ0bkNsb3NlID0gd2luYm94LmZpbmQoJ2J1dHRvbi5jbG9zZScpO1xyXG4gICAgICAgIHZhciBsYXllciA9ICQoXCIjXCIgKyB0aGlzLnNldHRpbmcub3ZlcmxheUlkKTtcclxuXHJcbiAgICAgICAgdmFyIHB0b3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKHdpbmRvdykuaGVpZ2h0KCkgLyAyIC0gd2luYm94LmhlaWdodCgpIC8gMixcclxuICAgICAgICAgICAgcGxlZnQgPSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpICsgJCh3aW5kb3cpLndpZHRoKCkgLyAyIC0gd2luYm94LndpZHRoKCkgLyAyO1xyXG4gICAgICAgIC8qd2luYm94LmNzcyh7XHJcbiAgICAgICAgICAgIFwidG9wXCIgOiBNYXRoLm1heCg1MCwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgJCh3aW5kb3cpLmhlaWdodCgpIC8gMiAtIHdpbmJveC5oZWlnaHQoKSAvIDIpLFxyXG4gICAgICAgICAgICBcImxlZnRcIiA6IE1hdGgubWF4KDAsICQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyAkKHdpbmRvdykud2lkdGgoKSAvIDIgLSB3aW5ib3gud2lkdGgoKSAvIDIpXHJcbiAgICAgICAgfSkuc2hvdygpOyovXHJcbiAgICAgICAgd2luYm94LmNzcyh7XHJcbiAgICAgICAgICAgIFwidG9wXCIgOiBwdG9wLFxyXG4gICAgICAgICAgICBcImxlZnRcIiA6IHBsZWZ0XHJcbiAgICAgICAgfSkuZmFkZUluKCk7XHJcblxyXG4gICAgICAgbGF5ZXIuc2hvdygpLmNoaWxkcmVuKCdkaXYnKS5jc3MoXCJvcGFjaXR5XCIsIHRoaXMuc2V0dGluZy5vdmVybGF5T3BhY2l0eSk7XHJcblxyXG4gICAgICAgLy9jbGljayBFc2Mga2V5IHRvIGhpZGUgYWxsIGRpYWxvZ3NcclxuICAgICAgICAkKGRvY3VtZW50KS5iaW5kKCdrZXlkb3duJywgZW5hYmxlRXNjKTtcclxuICAgICAgICAvL2NsaWNrIG92ZXJsYXllclxyXG4gICAgICAgIGxheWVyLnVuYmluZCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmcuY2xvc2VXaGVuQ2xpY2tpbmdCZykge1xyXG4gICAgICAgICAgICBsYXllci5iaW5kKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG1lLmNsb3NlKHdpbmJveCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jbGljayBjbG9zZSBidG5cclxuICAgICAgICBidG5DbG9zZS51bmJpbmQoKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbWUuY2xvc2Uod2luYm94LCB0cnVlKTtcclxuICAgICAgICAgICAgLy9yZXR1cm4gZmFsc2VcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlclBob3RvRGlhbG9nLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBVc2VyUGhvdG9EaWFsb2cucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24od2luYm94LCBpc0hpZGVPdmVybGF5KSB7XHJcbiAgICAgICAgJCh3aW5ib3gpLmhpZGUoKTtcclxuICAgICAgICBpZihpc0hpZGVPdmVybGF5KSB7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9ICQoJyNkaWFsb2dPdmVybGF5Jyk7XHJcbiAgICAgICAgICAgIGxheWVyLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKFwiZmFzdFwiLCAwLjEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGxheWVyLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIGxheWVyLnVuYmluZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKCdrZXlkb3duJywgZW5hYmxlRXNjKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIFVzZXJQaG90b0RpYWxvZy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSAkKFwiI3VzZXItcGhvdG8tZGlhbG9nLXRwbFwiKS5odG1sKCk7XHJcbiAgICAgICAgdmFyIHRwbCA9ICc8ZGl2IGlkPVwiJyArIHRoaXMuc2V0dGluZy5tb2RJZCArICdcIiBjbGFzcz1cInVzZXItcGhvdG9zLXBvcC1pbWFnZXMgZGlhbG9nXCI+J1xyXG4gICAgICAgICAgICAgICAgICArIGh0bWxcclxuICAgICAgICAgICAgICAgICAgKyc8L2Rpdj4nO1xyXG4gICAgICAgIHJldHVybiAkKHRwbCk7XHJcbn07XHJcblxyXG4gICAgZnVuY3Rpb24gZW5hYmxlRXNjKGUpIHtcclxuICAgICAgICB2YXIgdW5pY29kZSA9IGUua2V5Q29kZSA/IGUua2V5Q29kZSA6IGUuY2hhckNvZGU7XHJcbiAgICAgICAgaWYgKHVuaWNvZGUgPT0gMjcpIHtcclxuICAgICAgICAgICAgJCgnLmRpYWxvZzp2aXNpYmxlJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSAkKCcjZGlhbG9nT3ZlcmxheScpO1xyXG4gICAgICAgICAgICBsYXllci5jaGlsZHJlbignZGl2Jykuc3RvcCgpLmZhZGVUbyhcImZhc3RcIiwgMC4xLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsYXllci5oaWRlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKCdrZXlkb3duJywgZW5hYmxlRXNjKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFVzZXJQaG90b0RpYWxvZztcclxuLy99KTsiXX0=
},{}],25:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    require('../lib/jqueryForm');
    require('../lib/jmodal');
    require('../mod/autocompleteEmail');
    require('../mod/formCheck');
    var openInPopup = require('../mod/openInPopup');
    var CouponRegisterDialog = require('../mod/coupon_register_dialog');
    var Cookie = require('../mod/cookie');
    require('../lib/jQueryDatePicker');
    require('../lib/jquery-ui-i18.min');
    var cookie = new Cookie();

    var back_url = (pageData && pageData.back) ? pageData.back : location.href;
    var anchorPos = back_url.indexOf('#');
    var back_url = back_url.substr(0, anchorPos > 0 ? anchorPos : back_url.length);
    var google_auth_url = pageData.google_auth_url;

    window.dataLayer = window.dataLayer || [];

    if (pageData && pageData.isCheckoutLogin) {
        back_url += '?isLoginBack=1';
    }
    function changeWriteReviewUrl() {
        if (!$.isEmptyObject(window.review) && window.review.status) {
            return window.review.status ? window.review.url : back_url;
        }
        return back_url;
    }

    function revertWriteReviewUrl() {
        window.review = {
            status: false,
            url: webData.WEB_ROOT
        }
    }

    //显示/清除错误提示
    var showError = function(obj, errMsg) {
        var obj = $(obj);
        if (obj.parent().hasClass('inputcol')) {
            obj.parent().addClass('error').find('.error-tip').text(errMsg);
            var error_tip = obj.parent().find('.error-tip');
            if(error_tip.length > 0) {
                error_tip.text(errMsg);
            } else {
                obj.parent().append(' <p class="error-tip">' + errMsg + '</p>');
            }
        } else {
            obj.wrap('<div class="inputcol error"></div>').parent().append(' <p class="error-tip">' + errMsg + '</p>');
        }
        obj.focus(function() {
            clearError($(this));
        });
    }
    function clearError(obj) {
        $(obj).parent('.inputcol').removeClass('error').children('.error-tip').text('');
    }

    //鼠标焦点
    var init_focus = function (focus_key) {
        if (focus_key == 'register') {
            $('#email').focus();
        } else if (focus_key == 'order_status') {
            $('#order_sn').focus();
        } else {
            $('#_email').focus();
        }
    };
    var header_init_focus = function (focus_key) {
        if (focus_key == 'register') {
            $('#header_register_email').focus();
        } else if (focus_key == 'order_status') {
            $('#order_sn').focus();
        } else if(focus_key == 'login') {
            $('#header_login_email').focus();
        } else {
            $('#header_login_email').focus();
        }
    };
    //获取提示邮箱
    var init_email = function () {
        var _url = webData.WEB_ROOT + 'ajax.php?act=get_email_domains&language=' + webData.lang;
        $.ajax({
            type : 'post',
            url : _url,
            success : function (data) {
                data = eval('[' + data + ']')[0];
                if (data != '') {
                    pageData.emailList = data;
                    init_login();
                    header_init_login();
                    init_register();
                    header_init_register();
                }
            }
        })
    }

    var check_is_https = function () {
        var targetProtocol = "https:";
        if (window.location.protocol != targetProtocol) {
            window.location.href = targetProtocol +
                window.location.href.substring(window.location.protocol.length);
            return false
        }
        return true;
    }

    function initCalendar(selector) {
        var options = $.extend(
            {},                                 
            $.datepicker.regional[webData.lang],
            { 
                dateFormat: "yy-mm-dd",
                minDate: '+1d',
                changeYear: false,
            
            } // your custom options
        );
        $(selector).datepicker(options);
    $(selector).wrap('<div style="position: relative; height:100%;"></div>')
        .after('<span class="ui-icon-calendar-register"></span>');
        initCalendarClick(selector);
}

function initCalendarClick(select) {
        $('.ui-icon-calendar-register').bind('click',function () {
            console.log(2020)
            $(select).focus();
        })
}

$(function () {
    if(window.initedDatepicker) {
        return
    }
    window.initedDatepicker = true
    // initCalendar('#datepicker_header');
    initCalendar('#datepicker_page');
    // initCalendar('#datepicker_pop');
})

    //登陆
    var init_login = function (is_callback) {
        //邮件提示
        $('#_email').autocompleteEmail();

        $('#fbSignBtn').bind('click', function () {
            window.dataLayer.push({'event' : 'pcFbLoginBtnTotalClicks'});
        })

        $('#gmailSignBtn, #showroomGmailSignBtn').bind('click', function () {
            gmailSignin();
            cookie.setCookie('signInGoogle', true, 30);
            window.dataLayer.push({'event' : 'pcgPlusLoginBtnTotalClicks'});
        })

        $.ajax({
            method: "POST",
            url: "/ajax.php",
            dataType: 'json',
            data: {
                act: "initLogin",
                back: pageData.back
            },
            success: function(r) {
                if (r.error == 0) {
                    google_auth_url = r.googleUrl;
                }
            }
        });

        //验证表单及提交
        var elem_form = $('#form_login');
        var items = {
            'login[password]': [
                {type: 'null', errMsg: _lang.page_login_enter_password}
            ]
        };
        var itemsEmail = {
            'login[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };
        var opt = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                                location.href = r.back
                        }, 500);
                    }else {
                            location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msg');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                    });
                }
            }
        }
        $('.login-register #_email').focus(function () {
            var emailObj = $('.login-register #_email');
            emailObj.css('color','#333');
            emailObj.css('border','');
        });

        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msg').html('').hide();
            var httpsRs = check_is_https();
            if (!httpsRs) {
                return false;
            }
            var isChecked = $(this).formCheck(items, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            var isCheckedEmail = $(this).formCheck(itemsEmail, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });

            if (isChecked && isCheckedEmail) {
                elem_form.ajaxSubmit(opt);
            } else if(!isCheckedEmail) {
                var emailObj = $('.login-register .inputcol #_email');
                emailObj.css('color','#fb5058');
                emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
            }
            return false;
        });

        //fackbook登陆
        if(webData.fb_app == '' && webData.gmail_app == '') {
            return;
        }
        window.fbAsyncInit = function() {
            FB.init({
                appId : webData.fb_app,
                status : false,
                cookie : true,
                xfbml : true,
                oauth : true,
                version : 'v2.3'
            });
//            FB.Event.subscribe('auth.statusChange', get_facebook_login);
        };
        if(typeof(FB) == 'undefined') {
            require('../mod/loader').loadSocialJS('facebook');
        }else {
            window.fbAsyncInit();
        }
    };

    //general login
var header_init_login = function (is_callback) {

    //邮件提示
    $('#header_login_email').autocompleteEmail();

    $('#header_login_fbSignBtn').bind('click', function () {
        window.dataLayer.push({'event' : 'pcFbLoginBtnTotalClicks'});
    })

    $('#header_login_gmailSignBtn, #header_login_showroomGmailSignBtn').bind('click', function () {
        gmailSignin();
        cookie.setCookie('signInGoogle', true, 30);
        window.dataLayer.push({'event' : 'pcgPlusLoginBtnTotalClicks'});
    })

    $.ajax({
        method: "POST",
        url: "/ajax.php",
        dataType: 'json',
        data: {
            act: "initLogin",
            back: pageData.back
        },
        success: function(r) {
            if (r.error == 0) {
                google_auth_url = r.googleUrl;
            }
        }
    });

    //验证表单及提交
    var elem_form = $('#header_form_login');
    var items = {
        'login[password]': [
            {type: 'null', errMsg: _lang.page_login_enter_password}
        ]
    };
    var itemsEmail = {
        'login[email]': [
            {type: 'null', errMsg: _lang.page_login_enter_email},
            {type: 'email', errMsg: _lang.page_login_check_email_format}
        ]
    };
    var opt = {
        dataType: 'json',
        success: function (r) {
            if (r.error == 0) {
                if(typeof(callback_func) == 'function') {
                    callback_func.call();
                    // add setTimeout to async the ajax, make the location.href run after the callback function.
                    setTimeout(function() {
                        location.href = r.back
                    }, 500);
                }else {
                    location.href = r.back;
                }
            } else {
                var _msg = $('#header_login_msg');
                _msg.html(r.msg).show();
                elem_form.find(':input').focus(function () {
                    _msg.hide();
                });
            }
        }
    }

    $('#header_login_email').focus(function () {
        var emailObj = $('#header_login_email');
        emailObj.css('color','#333');
        emailObj.css('border','');
    });
    elem_form.submit(function () {
        elem_form.find('.error-tip').html('');
        elem_form.find('#header_login_msg').html('').hide();
        var httpsRs = check_is_https();
        if (!httpsRs) {
            return false;
        }
        var isChecked = $(this).formCheck(items, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            }
        });
        var isCheckedEmail = $(this).formCheck(itemsEmail, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            }
        });

        if (isChecked && isCheckedEmail) {
            elem_form.ajaxSubmit(opt);
        } else if(!isCheckedEmail) {
            var emailObj = $('.login-register .inputcol #header_login_email');
            emailObj.css('color','#fb5058');
            emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
        }
        return false;
    });

    //fackbook登陆
    if(webData.fb_app == '' && webData.gmail_app == '') {
        return;
    }
    window.fbAsyncInit = function() {
        FB.init({
            appId : webData.fb_app,
            status : false,
            cookie : true,
            xfbml : true,
            oauth : true,
            version : 'v2.3'
        });
    //FB.Event.subscribe('auth.statusChange', get_facebook_login);
    };
    if(typeof(FB) == 'undefined') {
        require('../mod/loader').loadSocialJS('facebook');
    }else {
        window.fbAsyncInit();
    }
};

    function gmailSignin() {
        openInPopup(google_auth_url, 'google_auth', 600, 500);
    }

    var facebook_login_email_registered = function () {
        var email = $('#_email').val();
        var password = $('#_password').val();
        if (!email) {
            alert(_lang.page_login_enter_email);
        } else if (!password) {
            alert(_lang.page_login_enter_password);
        } else {
            var login = {
                'email': email,
                'password': password
            };
            $.ajax({
                'type': 'POST',
                'url': webData.WEB_ROOT + 'ajax.php',
                'data': 'act=login&login[email]=' + login.email + '&login[password]=' + login.password + '&from=facebook' + '&back=' + back_url,
                'dataType': 'json',
                'success': function(r) {
                    if (r.error == 0) {
                        setTimeout(function () {
                            location.href = changeWriteReviewUrl();
                        }, 500);
                    } else {
                        alert(r.msg);
                        revertWriteReviewUrl();
                    }
                }
            });
        }
    }

    //注册
    var init_register = function (is_callback) {
        var elem_form = $('#form_reg');
        var ipt_email = $('#email');
        var btnContinue = $('#continue-btn');

        //绑定continue显示注册窗口
        btnContinue.bind('click',function () {
            elem_form.show();
            btnContinue.hide();
        });

        //邮件提示
        ipt_email.autocompleteEmail();

        //验证邮箱是否被占用
        var email_wait =  $('#regEmailValWait');
        var checkEmailExists = function () {
            elem_form.formCheck({
                'reg[email]': [
                    {type: 'null', showError: function () {}, noFocus: true},
                    {type: 'email', showError: function () {}, noFocus: true},
                    {type: 'availEmail', noFocus: true}
                ]
            }, {
                rules: {
                    availEmail: function (obj, checks) {
                        $.ajax({
                            type: 'POST',
                            url: webData.WEB_ROOT + 'ajax.php?act=register',
                            data: {'email': $(obj).val(), 'checkEmail': 1},
                            dataType: 'json',
                            beforeSend: function () {
                                // email_wait.show();
                            },
                            complete: function() {
                                // email_wait.hide();
                            },
                            success: function (r) {
                                if (r.error == 0) {
                                    clearError(obj);
                                } else {
                                    showError(obj, r.msg);
                                }
                            }
                        });
                    }
                }
            });
        };
        // ipt_email.change(checkEmailExists);
        ipt_email.blur(checkEmailExists);
        ipt_email.focus(function () {
            ipt_email.css('color','#333');
            ipt_email.css('border','');
        });
        //验证表单及提交
        var itemsx = {
            'reg[password]': [
                {type: 'null', errMsg: _lang.page_login_enter_password},
                {type: 'minlength', minlength: 5, errMsg: _lang.page_register_pwd_minimum_5}
            ],
            'reg[password_again]': [
                {type: 'null', errMsg: _lang.page_login_reenter_password},
                {type: 'matchPassword', errMsg: _lang.page_register_pwd_not_match}
            ],
            'terms': [
                {type: 'checked', value: -1, errMsg: _lang.page_register_please_agree}
            ]
        };
        //验证表单及提交
        var itemsEmail = {
            'reg[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };

        var optx = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    var use_coupon_register = webData.use_coupon_register;
                    if(use_coupon_register){
                        $('#loginDialog').css("display","none");
                        CouponRegisterDialog.init(r.data.couponCode,r.back);
                        return false;
                    }
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msgx');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                        return true;
                    });
                }
            }
        }
        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msgx').html('').hide();

            var isChecked = $(this).formCheck(itemsx, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                },
                rules: {
                    matchPassword: function (obj, checks) {
                        return $(obj).val() == elem_form.find('#password').val();
                    }
                }
            });
            var isCheckedEmail = $(this).formCheck(itemsEmail, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            if (isChecked && isCheckedEmail) {
                elem_form.ajaxSubmit(optx);
            } else if(!isCheckedEmail){
                var emailObj = $('.login-register .inputcol #email');
                emailObj.css('color','#fb5058');
                emailObj.val() !== '' && emailObj.css('border','1px solid #fb5058');
            }
            return false;
        });
        return true;
    };

    //general register
    var header_init_register = function (is_callback) {
    var elem_form = $('#header_form_reg');
    var ipt_email = $('#header_register_email');
    // var btnContinue = $('#header_continue-btn');

    //绑定continue显示注册窗口
    // btnContinue.bind('click',function () {
    //     elem_form.show();
    //     btnContinue.hide();
    // });

    //邮件提示
    ipt_email.autocompleteEmail();

    //验证邮箱是否被占用
    var email_wait =  $('#header_regEmailValWait');
    var checkEmailExists = function () {
        elem_form.formCheck({
            'reg[email]': [
                {type: 'null', showError: function () {}, noFocus: true},
                {type: 'email', showError: function () {}, noFocus: true},
                {type: 'availEmail', noFocus: true}
            ]
        }, {
            rules: {
                availEmail: function (obj, checks) {
                    $.ajax({
                        type: 'POST',
                        url: webData.WEB_ROOT + 'ajax.php?act=register',
                        data: {'email': $(obj).val(), 'checkEmail': 1},
                        dataType: 'json',
                        beforeSend: function () {
                            //email_wait.show();
                        },
                        complete: function() {
                            //email_wait.hide();
                        },
                        success: function (r) {
                            if (r.error == 0) {
                                clearError(obj);
                            } else {
                                showError(obj, r.msg);
                            }
                        }
                    });
                }
            }
        });
    };
    // ipt_email.change(checkEmailExists);
    ipt_email.blur(checkEmailExists);
    ipt_email.focus(function () {
        ipt_email.css('color','#333');
        ipt_email.css('border','');
    });
    //验证表单及提交
    var itemsx = {
        'reg[password]': [
            {type: 'null', errMsg: _lang.page_login_enter_password},
            {type: 'minlength', minlength: 5, errMsg: _lang.page_register_pwd_minimum_5}
        ],
        'reg[password_again]': [
            {type: 'null', errMsg: _lang.page_login_reenter_password},
            {type: 'matchPassword', errMsg: _lang.page_register_pwd_not_match}
        ],
        'terms': [
            {type: 'checked', value: -1, errMsg: _lang.page_register_please_agree}
        ]
    };
    var itemsEmail = {
        'reg[email]': [
            {type: 'null', errMsg: _lang.page_login_enter_email},
            {type: 'email', errMsg: _lang.page_login_check_email_format}
        ],
    };

    var optx = {
        dataType: 'json',
        success: function (r) {
            if (r.error == 0) {
                var use_coupon_register = webData.use_coupon_register;
                if(use_coupon_register){
                    $('#header_loginDialog').css("display","none");
                    CouponRegisterDialog.init(r.data.couponCode,r.back);
                    return false;
                }
                if(typeof(callback_func) == 'function') {
                    callback_func.call();
                    // add setTimeout to async the ajax, make the location.href run after the callback function.
                    setTimeout(function() {
                        location.href = r.back
                    }, 500);
                }else {
                    location.href = r.back;
                }
            } else {
                var _msg = $('#header_register_msgx');
                _msg.html(r.msg).show();
                elem_form.find(':input').focus(function () {
                    _msg.hide();
                });
            }
        }
    }
    elem_form.submit(function () {
        elem_form.find('.error-tip').html('');
        elem_form.find('#header_login_msg').html('').hide();

        var isChecked = $(this).formCheck(itemsx, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            },
            rules: {
                matchPassword: function (obj, checks) {
                    return $(obj).val() == elem_form.find('#header_register_password').val();
                }
            }
        });
        var isCheckedEmail = $(this).formCheck(itemsEmail, {
            showError : function (obj, errMsg) {
                showError(obj, errMsg);
            },
        });
        if (isChecked && isCheckedEmail) {
            elem_form.ajaxSubmit(optx);
        } else if(!isCheckedEmail) {
            ipt_email.css('color','#fb5058');
            ipt_email.val() !== '' && ipt_email.css('border','1px solid #fb5058');
        }
        return false;
    });

};
    // 匿名下单
    var init_login_guest = function () {
        var elem_form = $('#form_login_guest');

        //验证表单及提交
        var itemsx = {
            'guest[email]': [
                {type: 'null', errMsg: _lang.page_login_enter_email},
                {type: 'email', errMsg: _lang.page_login_check_email_format}
            ]
        };

        var optx = {
            dataType: 'json',
            success: function (r) {
                if (r.error == 0) {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                } else {
                    var _msg = $('#_msgx');
                    _msg.html(r.msg).show();
                    elem_form.find(':input').focus(function () {
                        _msg.hide();
                    });
                }
            }
        }
        elem_form.submit(function () {
            elem_form.find('.error-tip').html('');
            elem_form.find('#_msgx').html('').hide();

            var isChecked = $(this).formCheck(itemsx, {
                showError : function (obj, errMsg) {
                    showError(obj, errMsg);
                }
            });
            if (isChecked) {
                elem_form.ajaxSubmit(optx);
            }
            return false;
        });

    };

    function facebook_login(email,back_url) {
        $.post(webData.WEB_ROOT + 'ajax.php', {
            'act': 'register',
            'from': 'facebook',
            'back': back_url,
            'email': email
        }, function (r) {
            if (r.error == 0) {
                setTimeout(function () {
                    if(typeof(callback_func) == 'function') {
                        callback_func.call();
                        // add setTimeout to async the ajax, make the location.href run after the callback function.
                        setTimeout(function() {
                            location.href = r.back
                        }, 500);
                    }else {
                        location.href = r.back;
                    }
                }, 500);
                window.dataLayer.push({'event' : 'pcNotBindFbLoginSucceed'});
            } else {
                // for fail
                window.dataLayer.push({'event' : 'pcNotBindFbLoginFailed'});
            }
        }, 'json');
    }

    function get_facebook_login() {
        var Dialog = require('../mod/dialog');
        //for facebook login dialog not center on ff
        window.open = openInPopup;
        FB.login(function(response) {
            if (response.status == "connected" && response.authResponse) {
                $("#loginDialog").hide();
                window.open = window.originOpen;
                var fbWaiteDialog = '<div id="fbWaiteDialog" >'
                    + '<h1 class="sign-with-facebook">' + _lang.page_login_login_with_facebook + '</h1>'
                    + '<div class="please-waite">' + _lang.page_login_you_have_logged_on_facebook + '</div>'
                    + '</div>';
                Dialog.open({
                    'modId':'fbWaiting',
                    'html':fbWaiteDialog,
                    'canClose': false
                });
                var back = changeWriteReviewUrl()
                $.post(webData.WEB_ROOT + 'ajax.php', {
                    'act': 'register',
                    'from': 'facebook',
                    'back': back
                }, function (r) {
                    if ($('#loginDialog').css("display") == 'none') {
                        revertWriteReviewUrl();
                    }
                    if (r.error == 0) {
                        revertWriteReviewUrl();
                        setTimeout(function () {
                            if(typeof(callback_func) == 'function') {
                                callback_func.call();
                                // add setTimeout to async the ajax, make the location.href run after the callback function.
                                setTimeout(function() {
                                    location.href = r.back
                                }, 500);
                            }else {
                                    location.href = r.back;
                            }
                        }, 500);
                    } else if (r.error == 2) {
                        $("#fbWaiting").hide();
                        $("#loginDialog").hide();
                        var fbEmailDialog = '<form id="fbEmailDialog" >'
                            + '<div class="mainContent">'
                            + '<p class="congratulate">' + _lang.page_sns_jjshouse_congratulations + '</p>'
                            + '<p class="provide">' + _lang.page_sns_jjshouse_provide_email + '</p>'
                            + '<p class="email">' + _lang.page_sns_jjshouse_email_address + '</p>'
                            + '<input id="facebookEmail" name="fbEmail" type="text"/>'
                            + '<p class="note">' + _lang.page_sns_jjshouse_email_note + '</p>'
                            + '</div>'
                            + '<div class="btn-group">'
                            + '<div id="submit">' + _lang.page_sbumit + '</div>'
                            + '<div id="cancel">' + _lang.page_common_cancel + '</div>'
                            + '</div>'
                            + '</form>';
                        Dialog.open({
                            'modId':'fbDialog',
                            'html':fbEmailDialog
                        });
                        var emailDialog = $('#fbEmailDialog');
                        var facebookEmail = emailDialog.find('#facebookEmail');
                        var btnSummit = emailDialog.find('#submit');
                        var btnCancel = emailDialog.find('#cancel');
                        var fbmsg = $('#fbmsg');
                        facebookEmail.bind('keydown',function (e) {
                            var unicode = e.keyCode ? e.keyCode : e.charCode;
                            if (unicode == 13) {
                                btnSummit.click();
                                return false;
                            }
                        })
                        emailDialog.find(':input').focus(function () {
                            fbmsg.hide();
                        });
                        btnCancel.bind('click',function () {
                            Dialog.close('#fbDialog',true);
                        });
                        btnSummit.bind('click',function () {
                            var email = facebookEmail.val();
                            var fbLoginDialog = '<div id="floatingSign">'
                                + '<div class="tabbable">'
                                + '<div class="tab-content">'
                                + '<div class="tab-pane active" id="loginPane">'
                                + '<div id="emailRegisteredTips">'
                                + '<p><a class="emailRegisteredImg"></a>'
                                + _lang.page_email_registered + email + _lang.page_sign_with_email_and_password
                                + '</p>'
                                + '</div>'
                                + '<form action=' + webData.WEB_ROOT + 'ajax.php' + ' method="post" name="form_facebook_login" id="form_facebook_login" autocomplete="off">'
                                + '<label for="_email">' + _lang.page_login_email + ':</label>'
                                + '<input type="text" name="login[email]" id="_email" value="' + email + '" maxlength="96" autocomplete="off">'
                                + '<label for="_password">' + _lang.page_login_password + ':</label>'
                                + '<input type="password" name="login[password]" id="_password" maxlength="40">'
                                + '<p class="footRegion">'
                                + '<button type="button" class="btn btn-success btn-large" onclick="pageData.loginModule.facebook_login_email_registered()">' + _lang.page_login_sign_in + '</button>'
                                + '<span id="forgotPwd"><a target="_blank" href="' + webData.WEB_ROOT + 'forgotpassword.php" title="' + _lang.page_login_forgot_tip + '">' + _lang.page_login_forgot_tip + '</a></span>'
                                + '</p>'
                                + '</form>'
                                + '</div>'
                                + '</div>'
                                + '</div>'
                                + '</div>';
                            var check = emailDialog.formCheck({
                                    'fbEmail': [
                                        {type: 'null', errMsg: _lang.page_login_enter_email},
                                        {type: 'email', errMsg: _lang.page_login_check_email_format}
                                    ]
                                }, {
                                    showError : function (obj, errMsg) {
                                        showError(obj, errMsg);
                                    }
                                });
                            if (check) {
                                $.ajax({
                                    'type': 'POST',
                                    'async': false,
                                    'url': webData.WEB_ROOT + 'ajax.php',
                                    'data': 'act=checkEmailRegistered&email=' + email + '&back=' + back_url,
                                    'cache': true,
                                    'dataType': 'json',
                                    'success': function(r) {
                                        if (r.error == 1) {
                                            Dialog.close('#fbDialog',true);
                                            Dialog.open({'modId':'fbLoginDialog', html: fbLoginDialog});
                                        } else {
                                            $('#submit').text(_lang.page_order_progress_processing).attr('disabled',true);
                                            facebook_login(r.email,r.back);
                                        }
                                    }
                                });
                            }
                        });
                    } else {
                        $("#loginDialog").show();
                        $("#fbDialog").hide();
                        $("#fbWaiting").hide();
                        var _msg = $('#_msg');
                        var elem_form = $('#form_login');
                        _msg.html(r.msg).show();
                        elem_form.find(':input').focus(function () {
                            _msg.hide();
                        });
                        window.dataLayer.push({'event' : 'pcNotBindFbLoginFailed'});
                        if ($('#loginDialog').css("display") == 'none') {
                            revertWriteReviewUrl();
                        }
                    }
                }, 'json');
            } else {
                if ($('#loginDialog').css("display") == 'none') {
                    revertWriteReviewUrl();
                }
            }
        },{scope: 'email'});
    }

    // 绑定回调函数
    var callback_func;

    var init_callback = function (callback)    {
        callback_func = callback;
    };

    //登陆注册页面事件绑定
    var init = function() {
        if(window.initedLoginJs) {
            return
        }
        window.initedLoginJs = true
        init_email();
        init_login_guest();
        init_focus(pageData.focus_key);
        header_init_focus(pageData.focus_key);
    };

    module.exports = {
        "init": init,
        "init_login": init_login,
        "init_email": init_email,
        "init_register": init_register,
        "init_login_guest": init_login_guest,
        "get_facebook_login": get_facebook_login,
        "facebook_login_email_registered": facebook_login_email_registered,
        "init_callback": init_callback,
        "init_calendar": initCalendar,
        "init_calendar_click": initCalendarClick,
    };

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../lib/jQueryDatePicker":9,"../lib/jmodal":10,"../lib/jquery-ui-i18.min":11,"../lib/jqueryForm":12,"../mod/autocompleteEmail":13,"../mod/cookie":14,"../mod/coupon_register_dialog":16,"../mod/dialog":17,"../mod/formCheck":19,"../mod/loader":21,"../mod/openInPopup":22}],26:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('../lib/jqueryForm');

var scroll = function(cookie) {
    var top = cookie.getCookie('scrollTop') ? cookie.getCookie('scrollTop') : 0;
    var left = cookie.getCookie('scrollLeft') ? cookie.getCookie('scrollLeft') : 0;
    if (parseInt(top) || parseInt(left)) {
        $(window).scrollTop(top);
        $(window).scrollLeft(left);
        cookie.setCookie('scrollTop', 0, -1);
        cookie.setCookie('scrollLeft', 0, -1);
    }
}

function getScroll() {
    var position = [];
    if (document.documentElement &&
        document.documentElement.scrollTop
    ) {
        // firefox
        position = {
            top: document.documentElement.scrollTop,
            left: document.documentElement.scrollLeft
        };
    } else if (document.body) {
        // chrome
        position = {
            top: document.body.scrollTop,
            left: document.body.scrollLeft
        };
    }
    return position;
}

function moniterPageLoad(cookie) {
    if (typeof window.addEventListener != 'undefined') {
        window.addEventListener('load', scroll(cookie), false);
    } else if (typeof document.addEventListener != 'undefined') {
        document.addEventListener('load', scroll(cookie), false);
    } else if (typeof window.attachEvent != 'undefined') {
        window.attachEvent('onload', scroll(cookie));
    } else {
        var oldfn = window.onload;
        if (typeof window.onload != 'function'){
            window.onload = scroll(cookie);
        } else {
            window.onload = function(){
                oldfn();
                scroll(cookie);
            };
        }
    }
}

module.exports = {
    "getScroll": getScroll,
    "moniterPageLoad": moniterPageLoad
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvcGFnZXMvcGFnZV9zY3JvbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxucmVxdWlyZSgnLi4vbGliL2pxdWVyeUZvcm0nKTtcclxuXHJcbnZhciBzY3JvbGwgPSBmdW5jdGlvbihjb29raWUpIHtcclxuICAgIHZhciB0b3AgPSBjb29raWUuZ2V0Q29va2llKCdzY3JvbGxUb3AnKSA/IGNvb2tpZS5nZXRDb29raWUoJ3Njcm9sbFRvcCcpIDogMDtcclxuICAgIHZhciBsZWZ0ID0gY29va2llLmdldENvb2tpZSgnc2Nyb2xsTGVmdCcpID8gY29va2llLmdldENvb2tpZSgnc2Nyb2xsTGVmdCcpIDogMDtcclxuICAgIGlmIChwYXJzZUludCh0b3ApIHx8IHBhcnNlSW50KGxlZnQpKSB7XHJcbiAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcCh0b3ApO1xyXG4gICAgICAgICQod2luZG93KS5zY3JvbGxMZWZ0KGxlZnQpO1xyXG4gICAgICAgIGNvb2tpZS5zZXRDb29raWUoJ3Njcm9sbFRvcCcsIDAsIC0xKTtcclxuICAgICAgICBjb29raWUuc2V0Q29va2llKCdzY3JvbGxMZWZ0JywgMCwgLTEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY3JvbGwoKSB7XHJcbiAgICB2YXIgcG9zaXRpb24gPSBbXTtcclxuICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcclxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXHJcbiAgICApIHtcclxuICAgICAgICAvLyBmaXJlZm94XHJcbiAgICAgICAgcG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHRvcDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCxcclxuICAgICAgICAgICAgbGVmdDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgLy8gY2hyb21lXHJcbiAgICAgICAgcG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHRvcDogZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG9zaXRpb247XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vbml0ZXJQYWdlTG9hZChjb29raWUpIHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNjcm9sbChjb29raWUpLCBmYWxzZSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHNjcm9sbChjb29raWUpLCBmYWxzZSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cuYXR0YWNoRXZlbnQgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIHNjcm9sbChjb29raWUpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG9sZGZuID0gd2luZG93Lm9ubG9hZDtcclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5vbmxvYWQgIT0gJ2Z1bmN0aW9uJyl7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vbmxvYWQgPSBzY3JvbGwoY29va2llKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIG9sZGZuKCk7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGwoY29va2llKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgXCJnZXRTY3JvbGxcIjogZ2V0U2Nyb2xsLFxyXG4gICAgXCJtb25pdGVyUGFnZUxvYWRcIjogbW9uaXRlclBhZ2VMb2FkXHJcbn07Il19
},{"../lib/jqueryForm":12}],27:[function(require,module,exports){
(function (global){
//(function (require, exports, module) {
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var galleryLike = require('../styleGallery/styleGalleryLike');
var elem_mask = $('.style-gallery-mask');
var elem_dialog = $('#dialog_g');
var rootindex = 0;
var style_gallery_util = require('../styleGallery/style_gallery_util');
var style_gallery_dialog = require('../styleGallery/style_gallery_dialog');
var swiper = require('../utils/swiper');
var style_gallery_favourite = require('../styleGallery/style_gallery_favourite');
style_gallery_favourite.init();

var styleGalleryMaxlength = 50;
var inAjax = false;
var galleries = typeof(galleryData) != "undefined" && galleryData && galleryData.galleries ? galleryData.galleries.slice(0,5) : [];
var catId = typeof(galleryData) != "undefined" && galleryData && (galleryData.catId > 0) ? galleryData.catId : "";
var index = 0;
var group = 1;
var groupSize = 5;  //每组展示的gallery数量

window.fbAsyncInit = function() {
    FB.init({
        appId      : webData.fb_app,
        xfbml      : true,
        version    : 'v2.1'
    });
    $('.facebook-share-icon').removeClass("undisplay");
};

if(typeof(FB) == 'undefined') {
    require('../mod/loader').loadSocialJS('facebook');
}else {
    window.fbAsyncInit();
}

function setCur(curIndex) {
    var elem_thumbs = elem_dialog.find('.gallery');

    elem_thumbs.find('.cur').removeClass('cur');
    elem_thumbs.children('img').eq(curIndex).addClass('cur');
    var new_img = elem_thumbs.find('img').eq(curIndex).attr('src');

    elem_dialog.find('.viewbox .main-pic').attr('src', new_img == undefined ? new_img : new_img.replace('/upimg/gallery/','/upimg/ticket/'));
}

function showImage(){
    $(".current-list").find("img").each(function(){
        $(this).attr('src',$(this).attr('data-src'));
    });
}

function handler_dialog(index) {
    // var elem_gallery = elem_dialog.find('.gallery');
    var curIndex = 0;

    elem_dialog.delegate('.prev','click',function() {
        if (rootindex > 0  && galleries[rootindex-1] != undefined) {
            var elem_attach_index = $('.gallery-attach').eq(rootindex % groupSize - 1);         //当前需要进行操作的attach索引(0-4)
            open_dialog(elem_attach_index, 0, rootindex - 1);
            // if(rootindex > 5){
            //     var listImage = $('.rid-'+parseInt(rootindex-5));
            //     if(!listImage.hasClass('current-list')){
            //         listImage.addClass('current-list');
            //         showImage();
            //     }
            // }
        }
        else {
            if(inAjax == false && rootindex < styleGalleryMaxlength -1){
                rootindex -= 1;
                get_galleries(rootindex / 5 + 1 )
            }
        }
        // showImage();
        setCur(curIndex);

    }).delegate('.next','click',function() {
        var galleryIndex = rootindex + 1;
        if (rootindex < styleGalleryMaxlength -1 && galleries[galleryIndex] != undefined) {
            var elem_attach_index = $('.gallery-attach').eq(rootindex % groupSize + 1);         //当前需要进行操作的attach索引(0-4)
            open_dialog(elem_attach_index, 0, rootindex + 1);
        }else{
            if(inAjax == false && rootindex < styleGalleryMaxlength -1){
                rootindex += 1;
                get_galleries(rootindex / 5 + 1);
            }
            // var listImage = $('.rid-'+parseInt(rootindex+5));
            // if(!listImage.hasClass('current-list')){
            //     listImage.addClass('current-list');
            //     showImage();
            // }
        }
        // showImage();
        setCur(curIndex);

    }).delegate('.goods', 'click', function() {
        var color = $(this).attr("color-data");
        var goodsUrl = $(this).attr("url-data");
        var goodsIsOnSale = $(this).attr("sale-data");
        var video = $(this).attr("video");
        var isOnePic = $(this).attr("isOnePic");

        var utm_suffix = '?utm_source=StyleGallery&utm_medium=SGshop&utm_content=' + getDateSg();
        if(video) {
            utm_suffix = '?utm_source=StyleGallery&utm_medium=SGvideo&utm_content=' + getDateSg();
        } else {
            if(!isOnePic) {
                utm_suffix = '?utm_source=StyleGallery&utm_medium=SGphotos&utm_content=' + getDateSg();
            }
        }
        
        var url_color_suffix = '';
        if(color){
            url_color_suffix = '&filterColor=' + color;
        }

        if (goodsIsOnSale == 0) {
            return;
        } else {
            window.open(webData.WEB_ROOT + goodsUrl + utm_suffix + url_color_suffix, "_blank");
        }
    }).delegate('.gallery-attach img', 'click', function() {
        setCur($(this).index());
        return false;

    }).delegate('.close', 'click', function() {
        close_dialog();
    }).delegate('.pinterest-share-icon', 'click', function() {
        window.open($(this).attr("href"),'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.googleplus-share-icon', 'click', function() {
        window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.twitter-share-icon', 'click', function() {
        window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.facebook-share-icon', 'click', function() {
        var galleryId = $('.goods').attr("good-gallery");
        var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
        pageUrl = pageUrl + '?utm_source=SGfacebook&utm_medium=SGshare&utm_content=' + getDateSg();
        var facebook_descript = style_gallery_util.getFbDescription();

        var imageUrl = $(elem_dialog).find('.gallery-attach.gallery').find(".cur").attr("src");
        if (imageUrl) {
            var hostPattern = /^https?:/;
            imageUrl = hostPattern.test(imageUrl) ? imageUrl : document.location.protocol + imageUrl;
        }
        FB.ui({
                method: 'share',
                href: pageUrl,
                picture: imageUrl,
                title: _lang.page_gallery_facebook_title,
                description: facebook_descript,
                display: 'popup'
            }, function(response){}
        );
        return false;
    });

    elem_mask.click(function() {
        close_dialog();
    });
}

function getDateSg(){
    var myDate = new Date();
    var year = myDate.getFullYear();
    var month = myDate.getMonth() + 1 <= 10 ? "0" + (myDate.getMonth()+1) : (myDate.getMonth()+1);
    var day = myDate.getDate() + 1 <= 10 ? "0" + myDate.getDate() : myDate.getDate();
    var date = year + month + day;
    return date;
}

function replace_pinterest_url(elem_attach){
    var pinterestUrl = "http://pinterest.com/pin/create/button/"; //pinterest link
    var galleryId = $('.goods').attr("good-gallery");
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    var utm_suffix = '?utm_source=SGpinterest&utm_medium=SGshare&utm_content=' + getDateSg();
    pageUrl = pageUrl + encodeURIComponent(utm_suffix);
    var facebook_descript = style_gallery_util.getFbDescription();

    var imageUrl = $(elem_attach).find("img").attr("src");
    imageUrl = encodeURI(imageUrl);
    var description = facebook_descript;
    complete = [pinterestUrl, "?url=", pageUrl, "&media=", imageUrl, "&description=", description].join("");
    $(".share-icon.pinterest-share-icon").attr("href", complete);
}

function replace_google_url(elem_attach){
    var pinterestUrl = "https://plus.google.com/share"; //google link
    var galleryId = $('.goods').attr("good-gallery");
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    complete = [pinterestUrl, "?url=", pageUrl].join("");
    $(".share-icon.googleplus-share-icon").attr("href", complete);
}

function replace_twitter_url(elem_attach){
    var twitterUrl = "http://twitter.com/share";
    var galleryId = $('.goods').attr("good-gallery");
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    var text = _lang.page_i_love_dress;
    var utm_suffix = '?utm_source=SGtwitter&utm_medium=SGshare&utm_content=' + getDateSg();
    complete = [twitterUrl, "?text=", text, "&via=jjs_house", "?url=", pageUrl, encodeURIComponent(utm_suffix)].join("");
    $(".share-icon.twitter-share-icon").attr("href", complete);
}

function getVideoHtml(gallery)
{
    if(gallery.video) {
        return '<video class="main-video" controls="controls" src="' + gallery.video +'"></video>';
    }
    return '<img class="main-pic" src="' + gallery.pic_1 + '">';        
}

function open_dialog(elem_attach, idx_in_attach, indexTotal) {
    rootindex = indexTotal;
    var gallery = galleries[rootindex];
    var currentIndex = indexTotal==styleGalleryMaxlength-1? "lastGallery" : indexTotal ;
    var comment = gallery.comment;
    var nick = gallery.nick;
    nick = nick + ",";
    var goodId = $(elem_attach).parent().find("input[name='galleryGoodId']").val();
    var catId = $(elem_attach).parent().find("input[name='catId']").val();
    var galleryId = gallery.gallery_id;
    var postDatetime =  gallery.post_datetime;
    var urlColor = $(elem_attach).parent().find("input[name='urlColor']").val();
    var showColor = $(elem_attach).parent().find("input[name='showColor']").val();
    var title = $(elem_attach).parent().find("input[name='title']").val();
    // var currentIndex = $(elem_attach).parent().find("input[name='currentIndex']").val();
    var catName = $(elem_attach).parent().find("input[name='catName']").val();
    var goodsIsOnSale = $(elem_attach).parent().find("input[name='goodsIsOnSale']").val();
    var goodsUrl = $(elem_attach).parent().find("input[name='goodsUrl']").val();
    var goodsThumbPic = $(elem_attach).parent().find("input[name='goodsThumbPic']").val();
    var video = gallery.video;
    var isOnePic = gallery.isOnePic;
    var productList = gallery.productList;
    var favourite = gallery.favourite;
    var isFavourite = gallery.isFavourite;

    var html = '';
    html += '<img alt="' + _lang.page_gallery_pinterest_description + '" src="' + gallery.pic_1 + '"></img>';
    if(gallery.pic_2)
    {
        html+= '<img alt="' + _lang.page_gallery_pinterest_description + '" src="' + gallery.pic_2 + '" class="undisplay"></img>';
    }
    if(gallery.pic_3)
    {
        html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_3 + '" class="undisplay"></img>';
    }
    if(gallery.pic_4)
    {
        html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_4 + '" class="undisplay"></img>';
    }
    if(gallery.pic_5)
    {
        html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_5 + '" class="undisplay"></img>';
    }

    $(elem_attach).html(html);

    if (elem_mask.length < 1) {
        $('body').append('<div class="style-gallery-mask"></div>');
        elem_mask = $('.style-gallery-mask');
    }

    var galleryInfo = {
        "video": video,
        "isOnePic": isOnePic,
        "galleryId": galleryId
    }

    var dialog_html = '';
    var dialog_content_html = 
        '<a href="javascript:void(0);" class="close"></a>' +
        '<div class="viewbox">' +
        '<span class="prev"></span>' +
        '<div class="gallery-detail">' +
        '<div class="main-img">' +
            '<img class="main-pic" src="' + gallery.pic_1 + 'tran.gif">' +
        '</div>' +
        '<div class="gallery-info">' +

        '<div class="gallery-nick">' +
        '<span class="nick">' + nick + '</span>' +
        '<span class="post-datetime">' + postDatetime + '</span>' +        
        '</div>' +

        '<p class="title">' + title + '</p>' +
        '<p class="comment">' + comment + '</p>' +

        getGalleryFavouriteHtml(galleryId, favourite, isFavourite) + 

        '<div class="style-gallery-share">' +
            '<a class="share-icon facebook-share-icon undisplay"  title="Facebook"></a>' +
            '<a class="share-icon twitter-share-icon" title="Twitter"></a>' +
            '<div class="share-icon pinterest-share-icon"><a  title="Pinterest"></a></div>' +
        '</div>' +

        '<p class="shop-the-look">' + _lang.page_gallery_shop_the_look + '</p>' +

        getProductListHtml(galleryInfo, productList) +

        '</div>' + '</div>' + '<span class="next"></span>' + '</div>';

    if (elem_dialog.length < 1) {
        dialog_html = '<div id="dialog_g" class="gallery-unselect">' + dialog_content_html + '</div>'
        $('body').append(dialog_html);        
        elem_dialog = $('#dialog_g');
        handler_dialog(indexTotal);
    } else {
        elem_dialog = $('#dialog_g');
        elem_dialog.html(dialog_content_html);
    }    
    if(typeof(FB) != 'undefined') {
        $('.facebook-share-icon').removeClass("undisplay");
    }

    formatProductList(galleryId, productList);    

    if(title == '' || title == 'null' || title == 'undefined'){
        $('.title').removeClass('title-visibility-visible');
        $('.title').addClass('title-visibility-hidden');
    } else {
        $('.title').removeClass('title-visibility-hidden');
        $('.title').addClass('title-visibility-visible');
    }

    style_gallery_favourite.initGalleryFavorite();
    $(".gallery-detail-title").html(title);
    $(".comment").html(comment);
    $(".nick").html(nick);
    $(".post-datetime").html(postDatetime);      

    replace_pinterest_url(elem_attach);
    // replace_google_url(elem_attach);
    replace_twitter_url(elem_attach);

    if(currentIndex == "0"){
        $('.prev').hide();
        $('.next').show();
    } else if (currentIndex == "lastGallery"){
        $('.next').hide();
        $('.prev').show();
    } else {
        $('.prev').show();
        $('.next').show();
    }

    elem_dialog.find('.gallery-attach').remove().end().append(
        elem_attach.clone(true).addClass('gallery'));
    elem_dialog.find('.gallery .undisplay').addClass("gallery-img-margin");
    elem_dialog.find('.gallery-attach img').removeClass("undisplay");

    setCur(idx_in_attach);

    var dh = $(document).height();
    elem_mask.height(dh).show();
    elem_dialog.show();
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $(elem_dialog).css("top",Math.max(50, $(window).scrollTop() + $(window).height() / 7));
    }else{
        $(elem_dialog).css("top",Math.max(50, $(window).scrollTop()));
    }
    var keepIndex = index;
    for(keepIndex; keepIndex >= group * 5 - 5 ; keepIndex --)
    {
        keep_pic(keepIndex);
    }
    keepIndex = index;
    for(keepIndex; keepIndex < group * 5 && keepIndex < styleGalleryMaxlength; keepIndex ++)
    {
        keep_pic(keepIndex);
    }

    initSwiper();
}

function getGalleryFavouriteHtml(galleryId, favourite, isFavourite)
{
    var html = '<div class="gallery-favorite-div">';
    if(isFavourite) {
        html += '<span data-id="' + galleryId + '" class="gallery-like"></span>';
    } else {
        html += '<span data-id="' + galleryId + '" class="gallery-like-grey"></span>';
    }
    if(favourite && parseInt(favourite) > 0) {
        html += '<span data-id="' + galleryId + '" class="like-count">' + favourite +'</span>';
    } else {
        html += '<span data-id="' + galleryId + '" class="like-count"></span>';
    }    
    html += '</div>';
    return html;
}

function initSwiper() {
    $('#product-list-slide-prev').hide();
    $('#product-list-slide-next').hide();

    if($('#product-list-container').length <= 0) return false;
    if($('#product-list-container .product-info').length < 4) return false;

    $('#product-list-slide-prev').show();
    $('#product-list-slide-next').show();

    var options = {
        loop : true,
        allowTouchMove: false,
        preventClicks: false,
        slidesPerView: 3,
        slidesPerGroup: 3,
        speed: 500,
        navigation: {
            prevEl: '#product-list-slide-prev',
            nextEl: '#product-list-slide-next',
        },
    }
    
    new swiper('#product-list-container', options)
    
}

function getProductListHtml(galleryInfo, productList)
{
    var galleryId = galleryInfo.galleryId;
    var video = galleryInfo.video;
    var isOnePic = galleryInfo.isOnePic;

    var listHtml = '<div class="goods-info-container">';
    listHtml += '<span id="product-list-slide-prev" class="icon-go-back"></span>';
    listHtml += '<span id="product-list-slide-next" class="icon-go-forward"></span>';
    listHtml += '<div class="swiper-container" id="product-list-container">';    
    listHtml += '<div class="swiper-wrapper">';

    for(var i = 0; i < productList.length; i++) {
        var goodId = productList[i].goodsId;
        var urlColor = productList[i].urlColor;
        var goodsUrl = productList[i].goodsUrl;
        var catName = productList[i].catName;
        var showColor = productList[i].showColor;
        var goodsIsOnSale = productList[i].goodsIsOnSale;
        var shopPrice = productList[i].shopPrice;
        var goodsClass = getGoodsClass(galleryInfo);

        listHtml += '<div class="product-info swiper-slide" data-index="'+ i + '" goodsId="' + goodId + '" galleryId="' + galleryId + '">';
        listHtml += '<div class="goods-img">' +
                        '<a class="' + goodsClass + '" target="_blank" good-data="' + goodId + '" video="' + video + '" isOnePic="' + isOnePic + '" color-data=' + urlColor + ' url-data=' + goodsUrl + ' sale-data=' + goodsIsOnSale + '>' +
                            '<img class="goods-pic" src="' + webData.IMG_PATH + 'tran.gif">' +
                        '</a>' +
                    '</div>';
        listHtml += '<div class="goods-info">' +
                        '<a class="' + goodsClass + '" target="_blank" good-data="' + goodId + '" video="' + video + '" isOnePic="' + isOnePic + '" color-data=' + urlColor + ' url-data=' + goodsUrl + ' sale-data=' + goodsIsOnSale + '>' +
                            '<p class="cat-desc">' +
                                '<span class="cat-name" alt="' + catName +'">' + catName + '</span>' +                                
                            '</p>' +
                            '<p class="color">' +                                
                                '<span class="color-value">' + showColor + '</span>' +
                            '</p>' +
                            '<p class="price">' + 
                                '<span class="price-value">' + shopPrice + '</span>' +
                            '</p>' +
                        '</a>' +
                    '</div>';
        listHtml += '<p class="out-of-stock">' + _lang.page_common_out_of_stock + '</p>';
        listHtml += '</div>';
    }
    listHtml += '</div>';
    listHtml += '</div>';
    listHtml += '</div>';
    
    return listHtml;
}

function getGoodsClass(galleryInfo)
{
    var video = galleryInfo.video;
    var isOnePic = galleryInfo.isOnePic;
    if(video) {
        return "goods gallery-video";
    }
    if(!isOnePic) {
        return "goods multi-image";
    }
    return "goods";      
}

function formatProductList(galleryId, productList)
{    
    $('.product-info').each(function(){
        var tmpObject = $(this);
        var tmpGoodsId = tmpObject.attr("goodsId");
        var tmpGalleryId = tmpObject.attr("galleryId");
        if(galleryId != tmpGalleryId) return false;        
        for(var i in productList) {
            if(productList[i].goodsId != tmpGoodsId) continue;            
            formatProductObject(productList[i], tmpObject);
        }
    })   
}

function formatProductObject(product, object)
{
    var goodsIsOnSale = product.goodsIsOnSale;
    var catName = product.catName;
    var goodsThumbPic = product.goodsThumb;
    var isOnePic = object.attr("isOnePic");
    var video = object.attr('video');
     if(goodsIsOnSale == "1"){
        //在架商品
        object.find('.out-of-stock').hide();
        object.find('.goods-img').removeClass('goods-out-of-stock');
        object.find('.goods-pic').removeClass('un-click-cursor');
        object.find('.goods-info .goods').removeClass('un-click-cursor');
        object.find('.goods-info').removeClass('goods-out-of-stock');        
        object.find('.goods-info .color-value').css("color", "");
        object.find('.goods-info .price-value').css("color", "");
    } else {
        object.find('.out-of-stock').show();
        object.find('.goods-img').addClass('goods-out-of-stock');
        object.find('.goods-pic').addClass('un-click-cursor');
        object.find('.goods-info .goods').addClass('un-click-cursor');
        object.find('.goods-info').addClass('goods-out-of-stock');        
        object.find('.goods-info .color-value').css("color", "#123");
        object.find('.goods-info .price-value').css("color", "#123");
    }
    object.find('.cat-name').text('').append(catName);
    object.find('.goods-pic').attr('src', goodsThumbPic);
}

function close_dialog() {
    var keepIndex = index;
    for(keepIndex; keepIndex >= group * 5 - 5 ; keepIndex --)
    {
        keep_pic(keepIndex);
    }
    keepIndex = index;
    for(keepIndex; keepIndex < group * 5 && keepIndex < styleGalleryMaxlength; keepIndex ++)
    {
        keep_pic(keepIndex);
    }
    elem_mask.hide();
    elem_dialog.hide();
}

function keep_pic(index) {
        var gallery = galleries[index];
        var html = '';
        html += '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_1 + '"></img>';
        if(gallery.pic_2)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_2 + '" class="undisplay"></img>';
        }
        if(gallery.pic_3)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_3 + '" class="undisplay"></img>';
        }
        if(gallery.pic_4)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_4 + '" class="undisplay"></img>';
        }
        if(gallery.pic_5)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  src="' + gallery.pic_5 + '" class="undisplay"></img>';
        }

        $('.gallery-attach').eq(index % 5).html(html);
}

function get_galleries(group) {
    inAjax = true;
    $.ajax({
        'type': 'POST',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': 'act=get_galleries&group=' + group + '&catId=' + catId,
        'cache': true,
        'dataType': 'json',
        'success': function(r) {
            if (r.code == 0) {
                if(r.data.length < 5)
                {
                    styleGalleryMaxlength = group * 5 - 5 + r.data.length;
                }
                for(var key = 0 ; key < 5 ; key ++ )
                {
                    galleries[group*5-5+key] = r.data[key];
                }
                inAjax = false;
                var elem_attach_index = $('.gallery-attach').eq(rootindex % groupSize)          //当前需要进行操作的attach索引(0-4)
                open_dialog(elem_attach_index,0 , rootindex);
            } else {
                inAjax = false;
            }
        }
    });
};

exports.init = function(elem_list) {
    if (elem_list.length < 1) {
        return false;
    }

    elem_list.delegate('.gallery-attach img', 'click', function() {
        index = Number($(this).parent().siblings("input[name='currentIndex']").val());
        group = Math.floor(index / 5) + 1;
        rootindex = index ;
        get_galleries(group);
        // }
        return false;
    });

};

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/loader":21,"../styleGallery/styleGalleryLike":28,"../styleGallery/style_gallery_dialog":29,"../styleGallery/style_gallery_favourite":30,"../styleGallery/style_gallery_util":32,"../utils/swiper":34}],28:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var Cookie = require('../mod/cookie');

    var addCount = function (me) {
        var countCon = me.siblings('.like-count');
        var orgCount = countCon.text();
        var clickFlag = !countCon.hasClass('ing');
        if(clickFlag) {
            countCon.addClass('ing');
            clickFlag = !countCon.hasClass('ing');
            me.parent().animate({
                top: "-41"
            }, 500, function () {
                var icon = $(this).find('.un');
                icon.addClass('select');
                icon.removeClass('un');
                if (orgCount == '') {
                    orgCount = 0;
                }
                countCon.text((parseInt(orgCount) + 1));
                countCon.addClass('count-select');
                countCon.removeClass('ing');
                clickFlag = !countCon.hasClass('ing');
            });
            me.parent().animate({top: "0"});
        }
    }

    var minusCount = function (me) {
        var countCon = me.siblings('.like-count');
        var orgCount = countCon.text();
        var clickFlag = !countCon.hasClass('ing');
        if(clickFlag) {
            countCon.addClass('ing');
            clickFlag = !countCon.hasClass('ing');
            me.parent().animate({
                top: "-41"
            }, 500, function () {
                var icon = $(this).find('.select');
                icon.addClass('un');
                icon.removeClass('select');
                icon.css('background', '');
                countCon.removeClass('count-select');
                if (orgCount > 1) {
                    countCon.text((parseInt(orgCount) - 1));
                } else {
                    countCon.text('');
                }
                countCon.removeClass('ing');
                clickFlag = !countCon.hasClass('ing');
            });
            me.parent().animate({top: "0"});
        }
    }

    exports.minusCount = minusCount;
    exports.addCount = addCount;
    exports.init = function () {
        $(function () {
            var param = {
                'act'   :   'get_style_gallery_like'
            }
            $.ajax({
                type: "POST",
                url: webData.WEB_ROOT + 'ajax.php',
                'data': param,
                'cache': true,
                'dataType': 'json',
                success: function (r) {
                    if(r.code == 0){
                    }
                }
            });
            //style gallery like
            var cookie = new Cookie();
        	$('.gallery-group').delegate('.gallery-like','click',function(e){
                e.stopPropagation();
        		var me = $(this).find('.like-icon');
                var gallery_id = me.attr('data-gallery-id');
                var style_gallery_cookie = cookie.getCookie('jjs_style_gallery') ? cookie.getCookie('jjs_style_gallery') : '';
                var cookie_arr = style_gallery_cookie.split(',');
                if(style_gallery_cookie == ''){
                    cookie_arr = new Array();
                }
                var index = cookie_arr.indexOf(gallery_id)
                if(!me.hasClass('select')){
                    if(cookie_arr.length == 0){
                        cookie.setCookie('jjs_style_gallery',gallery_id,'30');
                    }else{
                        if(index == -1){
                            cookie_arr.push(gallery_id);
                            var new_cookie = cookie_arr.join(',');
                            cookie.setCookie('jjs_style_gallery',new_cookie,'30');
                        }
                    }
                    addCount(me);
                }else{
                    if(cookie_arr.length != 0){
                        if(index > -1){
                            cookie_arr.splice(index,1);
                        }
                        var new_cookie = cookie_arr.join(',');
                        cookie.setCookie('jjs_style_gallery',new_cookie,'30');
                    }
                    minusCount(me);
                }
                return false;
        	});
        });
    };

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc3R5bGVHYWxsZXJ5L3N0eWxlR2FsbGVyeUxpa2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cclxuICAgIHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG4gICAgdmFyIENvb2tpZSA9IHJlcXVpcmUoJy4uL21vZC9jb29raWUnKTtcclxuXHJcbiAgICB2YXIgYWRkQ291bnQgPSBmdW5jdGlvbiAobWUpIHtcclxuICAgICAgICB2YXIgY291bnRDb24gPSBtZS5zaWJsaW5ncygnLmxpa2UtY291bnQnKTtcclxuICAgICAgICB2YXIgb3JnQ291bnQgPSBjb3VudENvbi50ZXh0KCk7XHJcbiAgICAgICAgdmFyIGNsaWNrRmxhZyA9ICFjb3VudENvbi5oYXNDbGFzcygnaW5nJyk7XHJcbiAgICAgICAgaWYoY2xpY2tGbGFnKSB7XHJcbiAgICAgICAgICAgIGNvdW50Q29uLmFkZENsYXNzKCdpbmcnKTtcclxuICAgICAgICAgICAgY2xpY2tGbGFnID0gIWNvdW50Q29uLmhhc0NsYXNzKCdpbmcnKTtcclxuICAgICAgICAgICAgbWUucGFyZW50KCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IFwiLTQxXCJcclxuICAgICAgICAgICAgfSwgNTAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWNvbiA9ICQodGhpcykuZmluZCgnLnVuJyk7XHJcbiAgICAgICAgICAgICAgICBpY29uLmFkZENsYXNzKCdzZWxlY3QnKTtcclxuICAgICAgICAgICAgICAgIGljb24ucmVtb3ZlQ2xhc3MoJ3VuJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JnQ291bnQgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmdDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb3VudENvbi50ZXh0KChwYXJzZUludChvcmdDb3VudCkgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudENvbi5hZGRDbGFzcygnY291bnQtc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBjb3VudENvbi5yZW1vdmVDbGFzcygnaW5nJyk7XHJcbiAgICAgICAgICAgICAgICBjbGlja0ZsYWcgPSAhY291bnRDb24uaGFzQ2xhc3MoJ2luZycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWUucGFyZW50KCkuYW5pbWF0ZSh7dG9wOiBcIjBcIn0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgbWludXNDb3VudCA9IGZ1bmN0aW9uIChtZSkge1xyXG4gICAgICAgIHZhciBjb3VudENvbiA9IG1lLnNpYmxpbmdzKCcubGlrZS1jb3VudCcpO1xyXG4gICAgICAgIHZhciBvcmdDb3VudCA9IGNvdW50Q29uLnRleHQoKTtcclxuICAgICAgICB2YXIgY2xpY2tGbGFnID0gIWNvdW50Q29uLmhhc0NsYXNzKCdpbmcnKTtcclxuICAgICAgICBpZihjbGlja0ZsYWcpIHtcclxuICAgICAgICAgICAgY291bnRDb24uYWRkQ2xhc3MoJ2luZycpO1xyXG4gICAgICAgICAgICBjbGlja0ZsYWcgPSAhY291bnRDb24uaGFzQ2xhc3MoJ2luZycpO1xyXG4gICAgICAgICAgICBtZS5wYXJlbnQoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHRvcDogXCItNDFcIlxyXG4gICAgICAgICAgICB9LCA1MDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpY29uID0gJCh0aGlzKS5maW5kKCcuc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBpY29uLmFkZENsYXNzKCd1bicpO1xyXG4gICAgICAgICAgICAgICAgaWNvbi5yZW1vdmVDbGFzcygnc2VsZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICBpY29uLmNzcygnYmFja2dyb3VuZCcsICcnKTtcclxuICAgICAgICAgICAgICAgIGNvdW50Q29uLnJlbW92ZUNsYXNzKCdjb3VudC1zZWxlY3QnKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcmdDb3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudENvbi50ZXh0KChwYXJzZUludChvcmdDb3VudCkgLSAxKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Q29uLnRleHQoJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY291bnRDb24ucmVtb3ZlQ2xhc3MoJ2luZycpO1xyXG4gICAgICAgICAgICAgICAgY2xpY2tGbGFnID0gIWNvdW50Q29uLmhhc0NsYXNzKCdpbmcnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lLnBhcmVudCgpLmFuaW1hdGUoe3RvcDogXCIwXCJ9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0cy5taW51c0NvdW50ID0gbWludXNDb3VudDtcclxuICAgIGV4cG9ydHMuYWRkQ291bnQgPSBhZGRDb3VudDtcclxuICAgIGV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtID0ge1xyXG4gICAgICAgICAgICAgICAgJ2FjdCcgICA6ICAgJ2dldF9zdHlsZV9nYWxsZXJ5X2xpa2UnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgdXJsOiB3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwJyxcclxuICAgICAgICAgICAgICAgICdkYXRhJzogcGFyYW0sXHJcbiAgICAgICAgICAgICAgICAnY2FjaGUnOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyLmNvZGUgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9zdHlsZSBnYWxsZXJ5IGxpa2VcclxuICAgICAgICAgICAgdmFyIGNvb2tpZSA9IG5ldyBDb29raWUoKTtcclxuICAgICAgICBcdCQoJy5nYWxsZXJ5LWdyb3VwJykuZGVsZWdhdGUoJy5nYWxsZXJ5LWxpa2UnLCdjbGljaycsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIFx0XHR2YXIgbWUgPSAkKHRoaXMpLmZpbmQoJy5saWtlLWljb24nKTtcclxuICAgICAgICAgICAgICAgIHZhciBnYWxsZXJ5X2lkID0gbWUuYXR0cignZGF0YS1nYWxsZXJ5LWlkJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVfZ2FsbGVyeV9jb29raWUgPSBjb29raWUuZ2V0Q29va2llKCdqanNfc3R5bGVfZ2FsbGVyeScpID8gY29va2llLmdldENvb2tpZSgnampzX3N0eWxlX2dhbGxlcnknKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvb2tpZV9hcnIgPSBzdHlsZV9nYWxsZXJ5X2Nvb2tpZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgaWYoc3R5bGVfZ2FsbGVyeV9jb29raWUgPT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZV9hcnIgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGNvb2tpZV9hcnIuaW5kZXhPZihnYWxsZXJ5X2lkKVxyXG4gICAgICAgICAgICAgICAgaWYoIW1lLmhhc0NsYXNzKCdzZWxlY3QnKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29va2llX2Fyci5sZW5ndGggPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZS5zZXRDb29raWUoJ2pqc19zdHlsZV9nYWxsZXJ5JyxnYWxsZXJ5X2lkLCczMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA9PSAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVfYXJyLnB1c2goZ2FsbGVyeV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2Nvb2tpZSA9IGNvb2tpZV9hcnIuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnampzX3N0eWxlX2dhbGxlcnknLG5ld19jb29raWUsJzMwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ291bnQobWUpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29va2llX2Fyci5sZW5ndGggIT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llX2Fyci5zcGxpY2UoaW5kZXgsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19jb29raWUgPSBjb29raWVfYXJyLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnampzX3N0eWxlX2dhbGxlcnknLG5ld19jb29raWUsJzMwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1pbnVzQ291bnQobWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuLy99KTsiXX0=
},{"../mod/cookie":14}],29:[function(require,module,exports){
var elem_mask = $('.style-gallery-mask');
var elem_dialog = $('#dialog_g');
var rootindex = 0;
var load =true;
var style_gallery = require('../styleGallery/style_gallery_load');
var style_gallery_util = require('../styleGallery/style_gallery_util');
var style_gallery_favourite = require('../styleGallery/style_gallery_favourite');
var swiper = require('../utils/swiper');

function setCur(curIndex) {
    var elem_thumbs = elem_dialog.find('.gallery');

    elem_thumbs.find('.cur').removeClass('cur');
    elem_thumbs.children('img').eq(curIndex).addClass('cur');
    var new_img = elem_thumbs.find('img').eq(curIndex).attr('src');
    elem_dialog.find('.viewbox .main-pic').attr('src', new_img == undefined ? new_img : new_img.replace('/upimg/gallery/','/upimg/ticket/'));
}

function handler_dialog(index) {
    var elem_gallery = elem_dialog.find('.gallery');
    var curIndex = 0;
    var imgsLenth = elem_gallery.children('img').length - 1;

    elem_dialog.delegate('.prev','click',function() {
        if (rootindex > 0) {
            open_dialog($('.gallery-attach').eq(rootindex - 1), $(this).index(), rootindex - 1);
        }
        setCur(curIndex);

    }).delegate('.next','click',function() {
        if (rootindex > ($('.gallery-attach').size() - 6)) {
            load = style_gallery.loadMoreGallery();
        }

        if (rootindex < ($('.gallery-attach').size() - 2)) {
            open_dialog($('.gallery-attach').eq(rootindex + 1), $(this).index(), rootindex + 1);
        }
        setCur(curIndex);

    }).delegate('.goods', 'click', function() {
        var color = $(this).attr("color-data");
        var goodsUrl = $(this).attr("url-data");
        var video = $(this).attr("video");
        var isOnePic = $(this).attr("isOnePic");

        var utm_suffix = '?utm_source=StyleGallery&utm_medium=SGshop&utm_content=' + getDateSg();
        if(video) {
            utm_suffix = '?utm_source=StyleGallery&utm_medium=SGvideo&utm_content=' + getDateSg();
        } else {
            if(!isOnePic) {
                utm_suffix = '?utm_source=StyleGallery&utm_medium=SGphotos&utm_content=' + getDateSg();
            }
        }
        
        var url_color_suffix = '';
        if(color){
            url_color_suffix = '&filterColor=' + color;
        }

        window.open(webData.WEB_ROOT + goodsUrl + utm_suffix + url_color_suffix, "_blank");

    }).delegate('.gallery-attach img', 'click', function() {
        setCur($(this).index());
        return false;

    }).delegate('.close', 'click', function() {
        close_dialog();
    }).delegate('.pinterest-share-icon', 'click', function() {
        window.open($(this).attr("href"),'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.googleplus-share-icon', 'click', function() {
        window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.twitter-share-icon', 'click', function() {
        window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
        return false;
    }).delegate('.facebook-share-icon', 'click', function() {
        var galleryId = $(".gallery-favorite-div .like-count").attr('data-id');
        var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
        pageUrl = pageUrl + '?utm_source=SGfacebook&utm_medium=SGshare&utm_content=' + getDateSg();
        pageUrl += "#/galleryDetail?galleryId=" + galleryId;
        var facebook_descript = style_gallery_util.getFbDescription();

        var imageUrl = $(elem_dialog).find('.gallery-attach.gallery').find(".cur").attr("src");
        if (imageUrl) {
            var hostPattern = /^https?:/;
            imageUrl = hostPattern.test(imageUrl) ? imageUrl : document.location.protocol + imageUrl;
        }
        FB.ui({
                method: 'share',
                href: pageUrl,
                picture: imageUrl,
                title: _lang.page_gallery_facebook_title,
                description: facebook_descript,
                display: 'popup'
            }, function(response){}
        );
        return false;
    }).delegate('.un','click',function(){
        $('.gallery-attach').eq(rootindex).parent().find('.like-icon').trigger('click');
        // galleryLike.addCount($(this));
    }).delegate('.select','click',function(){
        $('.gallery-attach').eq(rootindex).parent().find('.like-icon').trigger('click');
        // galleryLike.minusCount($(this));
    }).delegate('.like-count','click',function(){
        $('.gallery-attach').eq(rootindex).parent().find('.like-icon').trigger('click');
        var countCon = $(this).siblings('.like-icon');
        // if(countCon.hasClass('un')){
        //     galleryLike.addCount(countCon);
        // }else{
        //     galleryLike.minusCount(countCon);
        // }
    });

    elem_mask.click(function() {
        close_dialog();
    });
}

function getDateSg(){
    var myDate = new Date();
    var year = myDate.getFullYear();
    var month = myDate.getMonth() + 1 <= 10 ? "0" + (myDate.getMonth()+1) : (myDate.getMonth()+1);
    var day = myDate.getDate() + 1 <= 10 ? "0" + myDate.getDate() : myDate.getDate();
    var date = year + month + day;
    return date;
}

function replace_pinterest_url(elem_attach){
    var pinterestUrl = "http://pinterest.com/pin/create/button/"; //pinterest link
    var galleryId = $(".gallery-favorite-div .like-count").attr('data-id');
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    pageUrl += "#/galleryDetail?galleryId=" + galleryId + "";
    var utm_suffix = '?utm_source=SGpinterest&utm_medium=SGshare&utm_content=' + getDateSg();
    var facebook_descript = style_gallery_util.getFbDescription();

    var imageUrl = $(elem_attach).find("img").attr("src");
    imageUrl = encodeURI(imageUrl);
    var description = facebook_descript;
    var complete = pinterestUrl + "?url="+ encodeURIComponent(pageUrl + utm_suffix)
        + "&media=" + imageUrl + "&description=" + encodeURI(description);
    $(".share-icon.pinterest-share-icon").attr("href", complete);
}

function replace_google_url(elem_attach){
    var pinterestUrl = "https://plus.google.com/share"; //google link
    var galleryId = $('.goods').attr("good-gallery");
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    complete = [pinterestUrl, "?url=", pageUrl].join("");
    $(".share-icon.googleplus-share-icon").attr("href", complete);
}

function replace_twitter_url(elem_attach){
    var twitterUrl = "http://twitter.com/share";
    var galleryId = $(".gallery-favorite-div .like-count").attr('data-id');
    var pageUrl = style_gallery_util.getOutfitsUrlById(galleryId);
    pageUrl += "#/galleryDetail?galleryId=" + galleryId + "";
    var text = _lang.page_i_love_dress;
    var utm_suffix = '&utm_source=SGtwitter&utm_medium=SGshare&utm_content=' + getDateSg();
    var complete = twitterUrl + "?text="+ encodeURI(text) + "&url="+ encodeURIComponent(pageUrl + utm_suffix) + "&via=jjs_house";
    $(".share-icon.twitter-share-icon").attr("href", complete);
}

function getVideoHtml(video)
{
    if(video) {
        return '<video class="main-video" controls="controls" src="' + video +'"></video>';
    }
    return '<img class="main-pic" src="' + webData.IMG_PATH + 'tran.gif">';        
}

function open_dialog(elem_attach, idx_in_attach, index) {
    rootindex = index;
    var comment = $(elem_attach).parent().find("input[name='comment']").val();
    var nick = $(elem_attach).parent().find("input[name='nick']").val();
    nick = nick + ",";
    var goodId = $(elem_attach).parent().find("input[name='galleryGoodId']").val();
    var catId = $(elem_attach).parent().find("input[name='catId']").val();
    var galleryId = $(elem_attach).parent().find("input[name='galleryId']").val();
    var postDatetime = $(elem_attach).parent().find("input[name='postDatetime']").val();
    var urlColor = $(elem_attach).parent().find("input[name='urlColor']").val();
    var showColor = $(elem_attach).parent().find("input[name='showColor']").val();
    var title = $(elem_attach).parent().find("input[name='title']").val();
    var currentIndex = $(elem_attach).parent().find("input[name='currentIndex']").val();
    var catName = $(elem_attach).parent().find("input[name='catName']").val();
    var goodsIsOnSale = $(elem_attach).parent().find("input[name='goodsIsOnSale']").val();
    var goodsUrl = $(elem_attach).parent().find("input[name='goodsUrl']").val();
    var goodsThumbPic = $(elem_attach).parent().find("input[name='goodsThumbPic']").val();
    var video = $(elem_attach).parent().find("input[name='video']").val();
    var isOnePic = $(elem_attach).parent().find("input[name='isOnePic']").val();
    var productList = $(elem_attach).parent().find("input[name='productList']").val();
    var favourite = $(elem_attach).parent().find("input[name='favourite']").val();
    var isFavourite = $(elem_attach).parent().find("input[name='isFavourite']").val();

    var galleryInfo = {
        "video": video,
        "isOnePic": isOnePic,
        "galleryId": galleryId
    }

    if(productList) {
        productList = JSON.parse(productList);
    }
    if(!productList) {
        productList = [];
    }

    

    var videoHtml = getVideoHtml(video);

    if (elem_mask.length < 1) {
        $('body').append('<div class="style-gallery-mask"></div>');
        elem_mask = $('.style-gallery-mask');
    }

    var dialog_html = '';
    var dialog_content_html = 
        '<a href="javascript:void(0);" class="close"></a>' +
        '<div class="viewbox">' +
        '<span class="prev"></span>' +
        '<div class="gallery-detail">' +
        '<div class="main-img">' +
            videoHtml +
        '</div>' +
        '<div class="gallery-info">' +

        '<div class="gallery-nick">' +
        '<span class="nick">' + nick + '</span>' +
        '<span class="post-datetime">' + postDatetime + '</span>' +        
        '</div>' +

        '<p class="title">' + title + '</p>' +
        '<p class="comment">' + comment + '</p>' +

        getGalleryFavouriteHtml(galleryId, favourite, isFavourite) + 

        '<div class="style-gallery-share">' +
            '<a class="share-icon facebook-share-icon undisplay"  title="Facebook"></a>' +
            '<a class="share-icon twitter-share-icon" title="Twitter"></a>' +
            '<div class="share-icon pinterest-share-icon"><a  title="Pinterest"></a></div>' +
        '</div>' +

        '<p class="shop-the-look">' + _lang.page_gallery_shop_the_look + '</p>' +

        getProductListHtml(galleryInfo, productList) +

        '</div>' + '</div>' + '<span class="next"></span>' + '</div>';

    if (elem_dialog.length < 1) {
        dialog_html = '<div id="dialog_g" class="gallery-unselect">' + dialog_content_html + '</div>'
        $('body').append(dialog_html);        
        elem_dialog = $('#dialog_g');
        handler_dialog(index);
    } else {
        elem_dialog = $('#dialog_g');
        elem_dialog.html(dialog_content_html);
    }    

    if(typeof(FB) != 'undefined') {
        $('.facebook-share-icon').removeClass("undisplay");
    }

    formatProductList(galleryId, productList);    

    if(title == '' || title == 'null' || title == 'undefined'){
        $('.title').removeClass('title-visibility-visible');
        $('.title').addClass('title-visibility-hidden');
    } else {
        $('.title').removeClass('title-visibility-hidden');
        $('.title').addClass('title-visibility-visible');
    }

    style_gallery_favourite.initGalleryFavorite();

    $(".title").html(title);
    $(".comment").html(comment);
    $(".nick").html(nick);
    $(".post-datetime").html(postDatetime);

    replace_pinterest_url(elem_attach);
    // replace_google_url(elem_attach);
    replace_twitter_url(elem_attach);

    if(currentIndex == "0"){
        $('.prev').hide();
        $('.next').show();
    } else if (currentIndex == "lastGallery"){
        $('.next').hide();
        $('.prev').show();
    } else {
        $('.prev').show();
        $('.next').show();
    }

    elem_dialog.find('.gallery-attach').remove().end().append(
        elem_attach.clone(true).addClass('gallery'));
    elem_dialog.find('.gallery .undisplay').addClass("gallery-img-margin");
    elem_dialog.find('.gallery-attach img').removeClass("undisplay");
    elem_dialog.find('.icon-style-gallery-video-big-bsize').remove();
    elem_dialog.find('.icon-style-gallery-pictures-bsize').remove();

    setCur(idx_in_attach);

    var dh = $(document).height();
    elem_mask.height(dh).show();
    elem_dialog.show();
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $(elem_dialog).css("top",Math.max(50, $(window).scrollTop() + $(window).height() / 7));
    }else{
        $(elem_dialog).css("top",Math.max(50, $(window).scrollTop()));
    }
    
    initSwiper();
}

function getGalleryFavouriteHtml(galleryId, favourite, isFavourite)
{
    var html = '<div class="gallery-favorite-div">';
    if(isFavourite && isFavourite != 'false') {
        html += '<span data-id="' + galleryId + '" class="gallery-like"></span>';
    } else {
        html += '<span data-id="' + galleryId + '" class="gallery-like-grey"></span>';
    }
    if(favourite && parseInt(favourite) > 0) {
        html += '<span data-id="' + galleryId + '" class="like-count">' + favourite +'</span>';
    } else {
        html += '<span data-id="' + galleryId + '" class="like-count"></span>';
    }    
    html += '</div>';
    return html;
}

function initSwiper() {
    $('#product-list-slide-prev').hide();
    $('#product-list-slide-next').hide();

    if($('#product-list-container').length <= 0) return false;
    if($('#product-list-container .product-info').length < 4) return false;

    $('#product-list-slide-prev').show();
    $('#product-list-slide-next').show();

    var options = {
        loop : true,
        allowTouchMove: false,
        preventClicks: false,
        slidesPerView: 3,
        slidesPerGroup: 3,
        speed: 500,
        navigation: {
            prevEl: '#product-list-slide-prev',
            nextEl: '#product-list-slide-next',
        },
    }
    
    new swiper('#product-list-container', options)
    
}

function getProductListHtml(galleryInfo, productList)
{
    var galleryId = galleryInfo.galleryId;
    var video = galleryInfo.video;
    var isOnePic = galleryInfo.isOnePic;

    var listHtml = '<div class="goods-info-container">';
    listHtml += '<span id="product-list-slide-prev" class="icon-go-back"></span>';
    listHtml += '<span id="product-list-slide-next" class="icon-go-forward"></span>';
    listHtml += '<div class="swiper-container" id="product-list-container">';    
    listHtml += '<div class="swiper-wrapper">';

    for(var i = 0; i < productList.length; i++) {
        var goodId = productList[i].goodsId;
        var urlColor = productList[i].urlColor;
        var goodsUrl = productList[i].goodsUrl;
        var catName = productList[i].catName;
        var showColor = productList[i].showColor;
        var goodsIsOnSale = productList[i].goodsIsOnSale;
        var shopPrice = productList[i].shopPrice;
        var goodsClass = getGoodsClass(galleryInfo);

        listHtml += '<div class="product-info swiper-slide" data-index="'+ i + '" goodsId="' + goodId + '" galleryId="' + galleryId + '">';
        listHtml += '<div class="goods-img">' +
                        '<a class="' + goodsClass + '" target="_blank" good-data="' + goodId + '" video="' + video + '" isOnePic="' + isOnePic + '" color-data=' + urlColor + ' url-data=' + goodsUrl + '>' +
                            '<img class="goods-pic" src="' + webData.IMG_PATH + 'tran.gif">' +
                        '</a>' +
                    '</div>';
        listHtml += '<div class="goods-info">' +
                        '<a class="' + goodsClass + '" target="_blank" good-data="' + goodId + '" video="' + video + '" isOnePic="' + isOnePic + '" color-data=' + urlColor + ' url-data=' + goodsUrl + '>' +
                            '<p class="cat-desc">' +
                                '<span class="cat-name" alt="' + catName +'">' + catName + '</span>' +                                
                            '</p>' +
                            '<p class="color">' +                                
                                '<span class="color-value">' + showColor + '</span>' +
                            '</p>' +
                            '<p class="price">' + 
                                '<span class="price-value">' + shopPrice + '</span>' +
                            '</p>' +
                        '</a>' +
                    '</div>';
        listHtml += '</div>';
    }
    listHtml += '</div>';
    listHtml += '</div>';
    listHtml += '</div>';
    
    return listHtml;
}

function getGoodsClass(galleryInfo)
{
    var video = galleryInfo.video;
    var isOnePic = galleryInfo.isOnePic;
    if(video) {
        return "goods gallery-video";
    }
    if(!isOnePic) {
        return "goods multi-image";
    }
    return "goods";      
}

function formatProductList(galleryId, productList)
{    
    $('.product-info').each(function(){
        var tmpObject = $(this);
        var tmpGoodsId = tmpObject.attr("goodsId");
        var tmpGalleryId = tmpObject.attr("galleryId");
        if(galleryId != tmpGalleryId) return false;        
        for(var i in productList) {
            if(productList[i].goodsId != tmpGoodsId) continue;            
            formatProductObject(productList[i], tmpObject);
        }
    })   
}

function formatProductObject(product, object)
{
    var goodsIsOnSale = product.goodsIsOnSale;
    var catName = product.catName;
    var goodsThumbPic = product.goodsThumb;
    var isOnePic = object.attr("isOnePic");
    var video = object.attr('video');

    object.find('.cat-name').text('').append(catName);
    object.find('.goods-pic').attr('src', goodsThumbPic);
}

function close_dialog() {
    elem_mask.hide();
    elem_dialog.hide();
}

module.exports = {
    "open_dialog": open_dialog
}
},{"../styleGallery/style_gallery_favourite":30,"../styleGallery/style_gallery_load":31,"../styleGallery/style_gallery_util":32,"../utils/swiper":34}],30:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var is_callback = false;
var is_toggle = false;

function openContentWrite() {
    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay');
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
    };

    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

    $("#style-gallery-write").css("display", "block");
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $("#style-gallery-write").css("top",$(window).scrollTop() + $(window).height() / 7);
    }else{
        $("#style-gallery-write").css("top",$(window).scrollTop());
    }
};

function ajaxLogin()
{
    var PopLogin = require('../mod/popLogin');
    var Scroll = require('../pages/page_scroll');
    var Cookie = require('../mod/cookie');
    var cookie = new Cookie();
    var popLogin = new PopLogin();
    if (window.login_status === false){
        var scrollTop = Scroll.getScroll().top;
        var scrollLeft = Scroll.getScroll().left;
        cookie.setCookie('scrollTop', scrollTop, 30);
        cookie.setCookie('scrollLeft', scrollLeft, 30);
    }
    popLogin.requestFloatingSign(function () {
        openContentWrite();
    }, document.URL, is_callback);
    return true;
}

function setGalleryLikeInfo(galleryId, isDelete)
{    

    var likeCount = 0;
    if($('.like-count[data-id="'+ galleryId + '"]').length > 0) {
        var tmplikeCount = parseInt($('.like-count[data-id="'+ galleryId + '"]').html());        
        if(tmplikeCount) likeCount = tmplikeCount;
    }    
    if(isDelete == 0) {
        $('.gallery-like-grey[data-id="'+ galleryId + '"]').removeClass("gallery-like-grey").addClass("gallery-like");
        likeCount++;
    } else {
        $('.gallery-like[data-id="'+ galleryId + '"]').removeClass("gallery-like").addClass("gallery-like-grey");
        likeCount--;
    }
    if(likeCount > 0) {
        $('.like-count[data-id="'+ galleryId + '"]').html(likeCount);
    } else {
        $('.like-count[data-id="'+ galleryId + '"]').html('');
    }    
    $('input[name="favourite"][data-id="'+ galleryId + '"]').val(likeCount)
    var isFavourite = isDelete ? false : true
    $('input[name="isFavourite"][data-id="'+ galleryId + '"]').val(isFavourite)
}

function toggleFavorite(galleryId, isDelete){
    if(is_toggle) {
        return false;
    }
    is_toggle = true;

    var param = {
        'act'   :   'add_style_gallery_like',
        'gallery_id'  :   galleryId,
        'is_delete': isDelete
    }
    $.ajax({
        type: "POST",
        url: webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        success: function (r) {
            if(r.code == 0){
            setGalleryLikeInfo(galleryId, isDelete);
            } else if(r.code < 0) {                
                ajaxLogin();
            }
            is_toggle = false
        },
        error: function () {
            is_toggle = false;
        }
    });
}

function addFavourite(galleryId){    
    toggleFavorite(galleryId, 0);
}

function cancelFavourite(galleryId){
    toggleFavorite(galleryId, 1);
}

function initGalleryFavorite() {
    $('.gallery-favorite-div').delegate('.gallery-like','click',function(e){
        e.stopPropagation();
        var galleryId = $(this).attr("data-id");
        cancelFavourite(galleryId);
    });
    $('.gallery-favorite-div').delegate('.gallery-like-grey','click',function(e){
        e.stopPropagation();
        var galleryId = $(this).attr("data-id");
        addFavourite(galleryId);
    });
}

function init(){
    $(function () {
        $('.gallery-group').delegate('.gallery-like','click',function(e){
            e.stopPropagation();
            var galleryId = $(this).attr("data-id");
            cancelFavourite(galleryId);
        });
        $('.gallery-group').delegate('.gallery-like-grey','click',function(e){
            e.stopPropagation();
            var galleryId = $(this).attr("data-id");
            addFavourite(galleryId);
        });
    });
}

module.exports = {
    "init": init,
    "addFavourite": addFavourite,
    "cancelFavourite": cancelFavourite,
    "initGalleryFavorite": initGalleryFavorite 
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc3R5bGVHYWxsZXJ5L3N0eWxlX2dhbGxlcnlfZmF2b3VyaXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cclxudmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblxyXG52YXIgaXNfY2FsbGJhY2sgPSBmYWxzZTtcclxudmFyIGlzX3RvZ2dsZSA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gb3BlbkNvbnRlbnRXcml0ZSgpIHtcclxuICAgIGlmICgkKCcjZGlhbG9nT3ZlcmxheScpLnNpemUoKSA+IDApIHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSAkKCcjZGlhbG9nT3ZlcmxheScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSAkKCc8ZGl2IGlkPVwiZGlhbG9nT3ZlcmxheVwiPjxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOnJnYigwLDAsMCk7XCI+PC9kaXY+PC9kaXY+JykucHJlcGVuZFRvKCdib2R5Jyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxheWVyLnNob3coKS5jaGlsZHJlbignZGl2Jykuc3RvcCgpLmZhZGVUbygwLCAwLjEpLmZhZGVUbyhcImZhc3RcIiwgMC41KTtcclxuXHJcbiAgICAkKFwiI3N0eWxlLWdhbGxlcnktd3JpdGVcIikuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG4gICAgdmFyIGNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCA7XHJcbiAgICBpZihjbGllbnRIZWlnaHQgPiA2NTApe1xyXG4gICAgICAgICQoXCIjc3R5bGUtZ2FsbGVyeS13cml0ZVwiKS5jc3MoXCJ0b3BcIiwkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAkKHdpbmRvdykuaGVpZ2h0KCkgLyA3KTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgICQoXCIjc3R5bGUtZ2FsbGVyeS13cml0ZVwiKS5jc3MoXCJ0b3BcIiwkKHdpbmRvdykuc2Nyb2xsVG9wKCkpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gYWpheExvZ2luKClcclxue1xyXG4gICAgdmFyIFBvcExvZ2luID0gcmVxdWlyZSgnLi4vbW9kL3BvcExvZ2luJyk7XHJcbiAgICB2YXIgU2Nyb2xsID0gcmVxdWlyZSgnLi4vcGFnZXMvcGFnZV9zY3JvbGwnKTtcclxuICAgIHZhciBDb29raWUgPSByZXF1aXJlKCcuLi9tb2QvY29va2llJyk7XHJcbiAgICB2YXIgY29va2llID0gbmV3IENvb2tpZSgpO1xyXG4gICAgdmFyIHBvcExvZ2luID0gbmV3IFBvcExvZ2luKCk7XHJcbiAgICBpZiAod2luZG93LmxvZ2luX3N0YXR1cyA9PT0gZmFsc2Upe1xyXG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBTY3JvbGwuZ2V0U2Nyb2xsKCkudG9wO1xyXG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gU2Nyb2xsLmdldFNjcm9sbCgpLmxlZnQ7XHJcbiAgICAgICAgY29va2llLnNldENvb2tpZSgnc2Nyb2xsVG9wJywgc2Nyb2xsVG9wLCAzMCk7XHJcbiAgICAgICAgY29va2llLnNldENvb2tpZSgnc2Nyb2xsTGVmdCcsIHNjcm9sbExlZnQsIDMwKTtcclxuICAgIH1cclxuICAgIHBvcExvZ2luLnJlcXVlc3RGbG9hdGluZ1NpZ24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG9wZW5Db250ZW50V3JpdGUoKTtcclxuICAgIH0sIGRvY3VtZW50LlVSTCwgaXNfY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEdhbGxlcnlMaWtlSW5mbyhnYWxsZXJ5SWQsIGlzRGVsZXRlKVxyXG57ICAgIFxyXG5cclxuICAgIHZhciBsaWtlQ291bnQgPSAwO1xyXG4gICAgaWYoJCgnLmxpa2UtY291bnRbZGF0YS1pZD1cIicrIGdhbGxlcnlJZCArICdcIl0nKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHRtcGxpa2VDb3VudCA9IHBhcnNlSW50KCQoJy5saWtlLWNvdW50W2RhdGEtaWQ9XCInKyBnYWxsZXJ5SWQgKyAnXCJdJykuaHRtbCgpKTsgICAgICAgIFxyXG4gICAgICAgIGlmKHRtcGxpa2VDb3VudCkgbGlrZUNvdW50ID0gdG1wbGlrZUNvdW50O1xyXG4gICAgfSAgICBcclxuICAgIGlmKGlzRGVsZXRlID09IDApIHtcclxuICAgICAgICAkKCcuZ2FsbGVyeS1saWtlLWdyZXlbZGF0YS1pZD1cIicrIGdhbGxlcnlJZCArICdcIl0nKS5yZW1vdmVDbGFzcyhcImdhbGxlcnktbGlrZS1ncmV5XCIpLmFkZENsYXNzKFwiZ2FsbGVyeS1saWtlXCIpO1xyXG4gICAgICAgIGxpa2VDb3VudCsrO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkKCcuZ2FsbGVyeS1saWtlW2RhdGEtaWQ9XCInKyBnYWxsZXJ5SWQgKyAnXCJdJykucmVtb3ZlQ2xhc3MoXCJnYWxsZXJ5LWxpa2VcIikuYWRkQ2xhc3MoXCJnYWxsZXJ5LWxpa2UtZ3JleVwiKTtcclxuICAgICAgICBsaWtlQ291bnQtLTtcclxuICAgIH1cclxuICAgIGlmKGxpa2VDb3VudCA+IDApIHtcclxuICAgICAgICAkKCcubGlrZS1jb3VudFtkYXRhLWlkPVwiJysgZ2FsbGVyeUlkICsgJ1wiXScpLmh0bWwobGlrZUNvdW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnLmxpa2UtY291bnRbZGF0YS1pZD1cIicrIGdhbGxlcnlJZCArICdcIl0nKS5odG1sKCcnKTtcclxuICAgIH0gICAgXHJcbiAgICAkKCdpbnB1dFtuYW1lPVwiZmF2b3VyaXRlXCJdW2RhdGEtaWQ9XCInKyBnYWxsZXJ5SWQgKyAnXCJdJykudmFsKGxpa2VDb3VudClcclxuICAgIHZhciBpc0Zhdm91cml0ZSA9IGlzRGVsZXRlID8gZmFsc2UgOiB0cnVlXHJcbiAgICAkKCdpbnB1dFtuYW1lPVwiaXNGYXZvdXJpdGVcIl1bZGF0YS1pZD1cIicrIGdhbGxlcnlJZCArICdcIl0nKS52YWwoaXNGYXZvdXJpdGUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUZhdm9yaXRlKGdhbGxlcnlJZCwgaXNEZWxldGUpe1xyXG4gICAgaWYoaXNfdG9nZ2xlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaXNfdG9nZ2xlID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgcGFyYW0gPSB7XHJcbiAgICAgICAgJ2FjdCcgICA6ICAgJ2FkZF9zdHlsZV9nYWxsZXJ5X2xpa2UnLFxyXG4gICAgICAgICdnYWxsZXJ5X2lkJyAgOiAgIGdhbGxlcnlJZCxcclxuICAgICAgICAnaXNfZGVsZXRlJzogaXNEZWxldGVcclxuICAgIH1cclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgdXJsOiB3ZWJEYXRhLldFQl9ST09UICsgJ2FqYXgucGhwJyxcclxuICAgICAgICAnZGF0YSc6IHBhcmFtLFxyXG4gICAgICAgICdjYWNoZSc6IHRydWUsXHJcbiAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgIGlmKHIuY29kZSA9PSAwKXtcclxuICAgICAgICAgICAgc2V0R2FsbGVyeUxpa2VJbmZvKGdhbGxlcnlJZCwgaXNEZWxldGUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoci5jb2RlIDwgMCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGFqYXhMb2dpbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlzX3RvZ2dsZSA9IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpc190b2dnbGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkRmF2b3VyaXRlKGdhbGxlcnlJZCl7ICAgIFxyXG4gICAgdG9nZ2xlRmF2b3JpdGUoZ2FsbGVyeUlkLCAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FuY2VsRmF2b3VyaXRlKGdhbGxlcnlJZCl7XHJcbiAgICB0b2dnbGVGYXZvcml0ZShnYWxsZXJ5SWQsIDEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0R2FsbGVyeUZhdm9yaXRlKCkge1xyXG4gICAgJCgnLmdhbGxlcnktZmF2b3JpdGUtZGl2JykuZGVsZWdhdGUoJy5nYWxsZXJ5LWxpa2UnLCdjbGljaycsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB2YXIgZ2FsbGVyeUlkID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1pZFwiKTtcclxuICAgICAgICBjYW5jZWxGYXZvdXJpdGUoZ2FsbGVyeUlkKTtcclxuICAgIH0pO1xyXG4gICAgJCgnLmdhbGxlcnktZmF2b3JpdGUtZGl2JykuZGVsZWdhdGUoJy5nYWxsZXJ5LWxpa2UtZ3JleScsJ2NsaWNrJyxmdW5jdGlvbihlKXtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHZhciBnYWxsZXJ5SWQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWlkXCIpO1xyXG4gICAgICAgIGFkZEZhdm91cml0ZShnYWxsZXJ5SWQpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoKXtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJy5nYWxsZXJ5LWdyb3VwJykuZGVsZWdhdGUoJy5nYWxsZXJ5LWxpa2UnLCdjbGljaycsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciBnYWxsZXJ5SWQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWlkXCIpO1xyXG4gICAgICAgICAgICBjYW5jZWxGYXZvdXJpdGUoZ2FsbGVyeUlkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuZ2FsbGVyeS1ncm91cCcpLmRlbGVnYXRlKCcuZ2FsbGVyeS1saWtlLWdyZXknLCdjbGljaycsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciBnYWxsZXJ5SWQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWlkXCIpO1xyXG4gICAgICAgICAgICBhZGRGYXZvdXJpdGUoZ2FsbGVyeUlkKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFwiaW5pdFwiOiBpbml0LFxyXG4gICAgXCJhZGRGYXZvdXJpdGVcIjogYWRkRmF2b3VyaXRlLFxyXG4gICAgXCJjYW5jZWxGYXZvdXJpdGVcIjogY2FuY2VsRmF2b3VyaXRlLFxyXG4gICAgXCJpbml0R2FsbGVyeUZhdm9yaXRlXCI6IGluaXRHYWxsZXJ5RmF2b3JpdGUgXHJcbn0iXX0=
},{"../mod/cookie":14,"../mod/popLogin":23,"../pages/page_scroll":26}],31:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var load = true;

function appendGallery(galleryData,index,galleryCatName,catId,filterColor,resultIndex){
    var galleryNum = galleryData.length;
    var galleryHtml ='<div class="catpl-group catpl-group-320x394 clearfix">';
    var lineCount = 0;
    var lineSize = 3;

    $.each(galleryData, function(i, gallery){
        galleryHtml += '<div class="catpl-prod"';
        if ((lineCount+1)%lineSize == 0) {
            galleryHtml += 'style="margin-right: 0"';
        }
        var comment = '';
        if(gallery['comment']) {
            comment = gallery['comment'].replaceAll("\"","&quot;");
        }
        var productListStr = JSON.stringify([]);
        if(gallery['productList']) {
            productListStr = JSON.stringify(gallery['productList']).replaceAll("\"","&quot;");
        }        
        galleryHtml += '><input type="hidden" name="comment" value="'+comment+'"/>';
        galleryHtml += '<input type="hidden" name="nick" value="'+gallery['nick']+'"/>';
        galleryHtml += '<input type="hidden" name="galleryGoodId" value="'+gallery['goods_id']+'" />';
        galleryHtml += '<input type="hidden" name="catId" value="'+gallery['category_id']+'" />';
        galleryHtml += '<input type="hidden" name="galleryCatName" value="'+galleryCatName+'" />';
        galleryHtml += '<input type="hidden" name="galleryId" value="'+gallery['gallery_id']+'" />';
        galleryHtml += '<input type="hidden" name="postDatetime" value="'+gallery['post_datetime']+'" />';
        galleryHtml += '<input type="hidden" name="urlColor" value="'+gallery['urlColor']+'" />';
        galleryHtml += '<input type="hidden" name="showColor" value="'+gallery['showColor']+'" />';
        galleryHtml += '<input type="hidden" name="title" value="'+gallery['title_of_review']+'" />';
        galleryHtml += '<input type="hidden" name="currentIndex" value="" />';
        galleryHtml += '<input type="hidden" name="catName" value="'+gallery['catName']+'" />';
        galleryHtml += '<input type="hidden" name="goodsIsOnSale" value="'+gallery['goodsIsOnSale']+'" />';
        galleryHtml += '<input type="hidden" name="goodsUrl" value="'+gallery['goodsUrl']+'" />';
        galleryHtml += '<input type="hidden" name="goodsThumbPic" value="'+gallery['goodsThumbPic']+'" />';
        galleryHtml += '<input type="hidden" name="video" value="'+gallery['video']+'" />';
        galleryHtml += '<input type="hidden" name="productList" value="'+productListStr+'" />';
        galleryHtml += '<input type="hidden" data-id="'+gallery['gallery_id']+'" name="favourite" value="'+gallery['favourite']+'" />';
        galleryHtml += '<input type="hidden" data-id="'+gallery['gallery_id']+'" name="isFavourite" value="'+gallery['isFavourite']+'" />';


        galleryHtml += '<div class="gallery-attach">';
        galleryHtml += getImgHtml(gallery);        
        if (gallery['pic_2']){
            galleryHtml += '<img alt="'+_lang.page_gallery_pinterest_description+'"  src="'+gallery['pic_2']+'" class="undisplay"></img>';
        }
        if (gallery['pic_3']){
            galleryHtml += '<img alt="'+_lang.page_gallery_pinterest_description+'"  src="'+gallery['pic_3']+'" class="undisplay"></img>';
        }
        if (gallery['pic_4']){
            galleryHtml += '<img alt="'+_lang.page_gallery_pinterest_description+'"  src="'+gallery['pic_4']+'" class="undisplay"></img>';
        }
        if (gallery['pic_5']){
            galleryHtml += '<img alt="'+_lang.page_gallery_pinterest_description+'"  src="'+gallery['pic_5']+'" class="undisplay"></img>';
        }
        galleryHtml += getImgTypeIcon(gallery);
        galleryHtml += '</div>';
        galleryHtml += getGalleryInfoHtml(gallery);
        galleryHtml += '</div>';
        galleryHtml += '<div class="persionalize-blank"></div>';

        lineCount = lineCount + 1;
        if(lineCount % lineSize == 0 && lineCount < galleryNum){
            galleryHtml += '</div><div class="catpl-group catpl-group-320x394 clearfix">';
        }
    });
    galleryHtml += '</div><div id="more'+(parseInt(index)+parseInt(lineCount))+'" class="morebox"><a result-date="'+resultIndex+'" class="more" id="'+(parseInt(index)+parseInt(lineCount))+'" data-cid="'+catId+'" data-filtercolor="'+ filterColor +'" ></a></div>';
    $(".gallery-group").append(galleryHtml);
}

function getImgHtml(gallery)
{
    if(!gallery) return '';
    var desc = _lang.page_gallery_pinterest_description;
    if(gallery['video']) {
        return '<img alt="'+ desc + '" src="' + gallery['video_img'] +'" data-video-src="' + gallery['video'] + '"></img>';
    } else {
        return '<img alt="'+ desc + '" src="'+gallery['pic_1']+'"></img>';
    }
}

function getGalleryInfoHtml(gallery)
{
    var html = '<div class="gallery-infos">';
    html += '<span class="author">' + gallery['nick'] + '</span>';
    if(gallery['favourite'] && gallery['favourite'] > 0) {
        html += '<span class="like-count" data-id="' + gallery['gallery_id'] + '">' + gallery['favourite'] + '</span>';
    } else {
        html += '<span class="like-count" data-id="' + gallery['gallery_id'] + '"></span>';
    }
    html += '<span data-id="' + gallery['gallery_id'] + '" class="' + getProductGalleryLike(gallery) + '"></span>';
    html += '</div>';
    return html;
}

function getProductGalleryLike(gallery)
{
    if(gallery['isFavourite']) {
        return 'gallery-like';
    }
    return 'gallery-like-grey';
}

function getImgTypeIcon(gallery)
{
    if(!gallery) return '';

    if(gallery['video']) {
        return '<span class="icon-style-gallery-video-big-bsize"></span>';
    } else if(!gallery['isOnePic']) {
        return '<span class="icon-style-gallery-pictures-bsize"></span>';
    }
    return '';
}

function loadMoreGallery(){
    var Id = $('.more').attr("id");
    var cId = $('.more').attr("data-cid");
    var filterColor = $('.more').attr("data-filterColor");
    var resultIndex = $('.more').attr("result-date");
    if(typeof(Id) == "undefined" || !load){
        return false;
    }
    load = false;
    var param = {
        'act'   :   'get_style_gallery',
        'index'  :   Id,
        'categoryId' : cId,
        'filterColor': filterColor,
        'resultIndex' : resultIndex
    }
    $.ajax({
        type: "POST",
        url: webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        success: function (r) {
            if(r.code == -1){
                self.location.href = r.url;
                return;
            }else if(r.code == 0){
                $("#more" + Id).remove();
                appendGallery(r.galleryData,r.index,r.galleryCatName,r.catId,r.filterColor,r.resultIndex);
                if(r.galleryData.length%3==0&&r.galleryData.length!=0){
                    load = true;
                }else{
                    load = false;
                    $('.gallery-group').find("input[name='currentIndex']:last")[0].value = "lastGallery";
                    $(".morebox").remove();
                }
            }
        }
    });
    return load;
}

exports.loadMoreGallery = loadMoreGallery;

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],32:[function(require,module,exports){
//(function (require, exports, module) {

var site_domain = webData.SITE_DOMAIN != '' ? webData.SITE_DOMAIN : 'jjshouse.com';
var server_domain = webData.server_domain != '' ? webData.server_domain : 'jjshouse.com';
var pageGalleryDetailTips = pageData.pageGalleryDetailTips != '' ? pageData.pageGalleryDetailTips : '';
var pageGalleryUploadSuccessNew = pageData.pageGalleryUploadSuccessNew != '' ? pageData.pageGalleryUploadSuccessNew : '';

function getLangValue(key){
    var result = _lang[key]
    key += webData.lang_suffix
    var tmp_result = _lang[key];
    if(tmp_result != null && tmp_result.length > 0) {
        result = tmp_result
    }
    return result
}

function getFbDescription () {
    var facebook_descript = getLangValue("page_gallery_facebook_description");

    if(site_domain == 'jjshouse.co.uk') {
        facebook_descript = 'Now you can share your look of wearing the dress from JJ’sHouse to get a £15 discount coupon! See more looks from their customers at this site!';
    }
    else if(site_domain == 'jjshouse.com.au') {
        facebook_descript = 'Now you can share your look of wearing the dress from JJ’sHouse to get a AU$15 discount coupon! See more looks from their customers at this site!';
    }

    return facebook_descript;
}

function getOutfitsUrlById(galleryId) {

	var lang_suffix = webData.lang != webData.default_lang ? '/' + webData.lang : '';
	var pageUrl = 'http://'+server_domain+lang_suffix+'/style-gallery/outfits/'+galleryId;

    return pageUrl;
}

function getPageGalleryUploadSuccessHtml() {
    var page_gallery_upload_success = pageGalleryUploadSuccessNew;
    if(page_gallery_upload_success == ''){
        page_gallery_upload_success = getLangValue("page_gallery_upload_success_new");
    }
    return page_gallery_upload_success;
}

function getDetailDialogHtml() {
	var page_gallery_detail = pageGalleryDetailTips;
	if(page_gallery_detail == ''){
        page_gallery_detail = getLangValue("page_gallery_detail");
    }
    return page_gallery_detail;
}

module.exports = {
    "site_domain": site_domain,
    "getFbDescription": getFbDescription,
    "getOutfitsUrlById": getOutfitsUrlById,
    "getPageGalleryUploadSuccessHtml": getPageGalleryUploadSuccessHtml,
    "getDetailDialogHtml": getDetailDialogHtml,
    "server_domain": server_domain
}
//});
},{}],33:[function(require,module,exports){
(function (global){
/**
 * for list gallery
 */
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('../lib/jqueryForm');
var dialog = require('../mod/dialog');
var UserDialog = require('../mod/userPhotoDialog');
var ffh = require('../mod/formFieldsHandle');
var Scroll = require('../pages/page_scroll');
var is_callback = false;

var elem_list = $('.user-gallery-list');
var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var scrollPages = ['index', 'category'];

require('../styleGallery/listGalleryAttach').init(elem_list);
style_gallery_util = require('../styleGallery/style_gallery_util');

//device 存放上传的图片
var errorType = 0;
var uploadFiles = [];

var galleries = typeof(galleryData) != "undefined" && galleryData && galleryData.galleries ? galleryData.galleries.slice(0,5) : [];
var catId = typeof(galleryData) != "undefined" && galleryData && (galleryData.catId > 0) ? galleryData.catId : "";
var currentGalleryGroup = 1;        //当前显示的gallery组数
var numOfGalleryTotalGroup = 10;    //gallery的总组数
var inAjax = false;

function updateMoveBtn() {
    if(currentGalleryGroup > 1)
        $('.user-photos-pre').show();
    else
        $('.user-photos-pre').hide();
    if(currentGalleryGroup == numOfGalleryTotalGroup || galleries[galleries.length-1] ==undefined)
        $('.user-photos-next').hide();
    else
        $('.user-photos-next').show();
}

function hideAllFileShow()
{
    $('.liar_label').find(".liar_label_img").each(function () {
        $(this).attr('src', '');
    });
    $('.liar_label').find(".liar_label_video").each(function () {
        $(this).attr('src', '');
    });
    $('#gallery_img').attr('src', '');
    $('#gallery_video').attr('src', '');
}

function show_galleries(group) {
    var start = group*5-5;       //start = (group-1)*5
    var html = '';
    for(var key = start ; key < start + 5 && galleries[key] != undefined ; key++) {
        var gallery = galleries[key];
        html += '<dl class="rid-' + key +' current-list">' +
            '       <input type="hidden" name="comment" value="' + gallery.comment + '" />' +
            '       <input type="hidden" name="nick" value="' + gallery.nick + '" />\n' +
            '       <input type="hidden" name="galleryGoodId" value="' + gallery.goods_id + '" />' +
            '       <input type="hidden" name="catId" value="' + gallery.category_id + '" />' +
            '       <input type="hidden" name="galleryCatName" value="' + gallery.catName + '" />' +
            '       <input type="hidden" name="galleryLike" value="' + gallery.like + '" />' +
            '       <input type="hidden" name="likeCount" value="' + gallery.likeCount + '" />' +
            '       <input type="hidden" name="galleryId" value="' + gallery.gallery_id + '" />' +
            '       <input type="hidden" name="urlColor" value="' + gallery.urlColor + '" />' +
            '       <input type="hidden" name="showColor" value="' + gallery.showColor + '" />' +
            '       <input type="hidden" name="title" value="' + gallery.title_of_review + '" />' +
            '       <input type="hidden" name="postDatetime" value="' + gallery.post_datetime + '" />' +
            '       <input type="hidden" name="catName" value="' + gallery.catName + '" />' +
            '       <input type="hidden" name="goodsIsOnSale" value="' + gallery.goodsIsOnSale + '" />' +
            '       <input type="hidden" name="goodsUrl" value="' + gallery.goodsUrl + '" />' +
            '       <input type="hidden" name="goodsThumbPic" value="' + gallery.goodsThumbPic + '" />' +                             
            '       <input type="hidden" name="productList" value=\''+JSON.stringify(gallery.productList)+'\' />' +
            '       <input type="hidden" name="favourite" value="' + gallery.favourite + '" />' +          
            '       <input type="hidden" name="isFavourite" value="' + gallery.isFavourite + '" />' +     
            '       <input type="hidden" name="currentIndex" value="' + key + '" />' +
            '       <dt class="gallery-attach">' +
            '           <img alt="' + _lang.page_gallery_pinterest_description + '"  data-src="' + gallery.pic_1 + '"></img>';
        if(gallery.pic_2)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  data-src="' + gallery.pic_2 + '" class="undisplay"></img>';
        }
        if(gallery.pic_3)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  data-src="' + gallery.pic_3 + '" class="undisplay"></img>';
        }
        if(gallery.pic_4)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  data-src="' + gallery.pic_4 + '" class="undisplay"></img>';
        }
        if(gallery.pic_5)
        {
            html+= '<img alt="' + _lang.page_gallery_pinterest_description + '"  data-src="' + gallery.pic_5 + '" class="undisplay"></img>';
        }
        html += '</dt></dl>'
    }
    $('.user-gallery-list').html(html);
    currentGalleryGroup = group ;
    updateMoveBtn();
    showImage();
};

function get_galleries(group) {
    inAjax = true;
    $.ajax({
        'type': 'POST',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': 'act=get_galleries&group=' + group + '&catId=' + catId,
        'cache': true,
        'dataType': 'json',
        'success': function(r) {
            if (r.code == 0) {
                var lengthPrev = galleries.length;
                galleries = galleries.concat(r.data);
                var lengthAfter = galleries.length;
                if(lengthAfter - lengthPrev < 5)
                {
                    numOfGalleryTotalGroup = group;
                }
                inAjax = false;
                show_galleries(group);
            } else {
                inAjax = false;
                numOfGalleryTotalGroup = currentGalleryGroup;
                updateMoveBtn();
            }
        }
    });
};

function show_gallery_Group(group) {
    if(group > 0 && group <= numOfGalleryTotalGroup && (Math.ceil(galleries.length / 5)) >= group) {
        show_galleries(group);
    }else {
        if (inAjax == false && group <= numOfGalleryTotalGroup)
        {
            get_galleries(group);
        }
    }
};

$('.user-photos-pre').click(function () {
    if(currentGalleryGroup == 1) return false;
    show_gallery_Group(currentGalleryGroup - 1);
    return false;
});

$('.user-photos-next').click(function () {
    if(currentGalleryGroup == 10) return false;
    show_gallery_Group(currentGalleryGroup + 1);
    return false;
});

// function moveGalleryByGroup(pos) {
//     $(".user-gallery-list").animate({
//         left: pos
//     }, 500);
// };

function openContentWrite() {
    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay');
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
    };

    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

    $("#style-gallery-write").css("display", "block");
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $("#style-gallery-write").css("top",$(window).scrollTop() + $(window).height() / 7);
    }else{
        $("#style-gallery-write").css("top",$(window).scrollTop());
    }
};

function check_form() {
    var ticket_form = $('#form_style_gallery');
    var nick = ticket_form.find('#user_name').val().trim();
    if (nick == '') {
        ticket_form.find('#comment_nick_tip').html(_lang.page_gallery_enter_name).show();
        return false;
    }

    var title_of_review = ticket_form.find('#title_of_review').val().trim();
    if (title_of_review == '') {
        ticket_form.find('#comment_title_tip').html(_lang.page_gallery_enter_title_of_review).show();
        return false;
    }

    var content = ticket_form.find('#comment_content').val().trim();
    if (content == '') {
        ticket_form.find('#comment_content_tip').html(_lang.page_gallery_enter_review).show();
        return false;
    } else if (content.length > 3000) {
        alert(_lang.page_goods_review_question_content_length);
        return false;
    }

    return true;
};

function handler_focus() {
    var ticket_form = $('#form_style_gallery');
    ticket_form.find('#comment_content').focus(function() {
        ticket_form.find('#comment_content_tip').html('');
    });
    ticket_form.find('#user_name').focus(function() {
        ticket_form.find('#comment_nick_tip').html('');
    });
    ticket_form.find('#title_of_review').focus(function () {
        ticket_form.find('#comment_title_tip').html('');
    });
};

function writeGallerySuccessDialog(coupon) {
    var couponHtml = '';
    if (JSON.stringify(coupon) != "{}") {
        couponHtml = '<div class="gallery-success-coupon">'
            + '<div class="coupon_value">' + coupon.value2display + '</div>'
            + '<div class="coupon_minimum_value">' + coupon.minimum2display + '</div>'
            + '<div class="coupon_code">' + _lang.page_common_code + ': ' + coupon.couponCode + '</div>'
            + '<div class="separator-line"></div>'
            + '<div class="coupon_expires">' + coupon.eTimeDisplay + '</div>'
            + '</div>';
    }
    var detailDialogHtml = '<div id="style-gallery-success">' +
        '<div id="gallery-write-head"><div class="gallery-success-icon"><img src="' + webData.IMG_PATH + 'style-gallery/style-gallery-success.png"></div><div class="gallery-comment-title">' + _lang.page_gallery_share_your_look + '</div> <a href="javascript:void(0)" class="dialog-close"></a></div>' +
        couponHtml +
        '<button id="reUpload">' + _lang.page_gallery_continue_uploading + '</button><a href="/style-gallery"><button id="view_gallery">' + _lang.page_gallery_view_gallery + '</button></a></div>';

    $('#successDialog').remove();
    // var detailDialogHtml = style_gallery_util.getPageGalleryUploadSuccessHtml();
    var successDialog = dialog.open({
        modId: 'successDialog',
        width: 560,
        html: detailDialogHtml,
        closeWhenClickingBg: true
    });
    successDialog.css('top', 0);
    successDialog.find('.nav-tabs a:eq(0)').click();
};

//_proto_指向父级的原型对象
dialog.__proto__.close = function(winbox, isHideOverlay) {
    resetStyleGalleryForm();
    $(winbox).hide();
    if(isHideOverlay) {
        var layer = $('#dialogOverlay');
        layer.children('div').stop().fadeTo("fast", 0.1, function () {
            layer.hide();
            layer.unbind();
        });
    }
    $(document).unbind('keydown', enableEsc);
};

//user style gallery click Esc key to hide all dialogs
$(document).bind('keydown', enableEsc);

function enableEsc(e) {
    var unicode = e.keyCode ? e.keyCode : e.charCode;
    if (unicode == 27) {
        resetStyleGalleryForm();
        $('.dialog:visible').hide();
        var layer = $('#dialogOverlay');
        layer.children('div').stop().fadeTo("fast", 0.1, function () {
            layer.hide()
        })
        $(document).unbind('keydown', enableEsc)
    }
}

function resetStyleGalleryForm() {
    $("#style-gallery-write").hide();
    // $("#page-choose-source").show();
    $("#page-source, #photo-device").show();
    // $("#page-source").hide();
    $("#photo-face, #photo-ins").hide();
    $("#page-device").hide();
    $('.social-img').find("div").each(function () {
        $(this).prev().removeClass("selected");
        $(this).remove();
    });
    var defauleUserName = $("#defaule_user_name").val();
    var userName = $("#user_name").val();
    if(defauleUserName != userName){
        $("#user_name").val(defauleUserName);
    }
    $("#title_of_review, #comment_content").val('');
    $('#file-social-first, #file-social-two, #file-social-three, #file-social-four, #file-social-five').val("");

    //clear slide thumbnail
    $('#show_img_thumbnail').find("span").each(function () {
        $(this).remove();
    });

    //clear slide cion
    $('.left-swiping').css("visibility", "hidden");
    $('.right-swiping').hide();
    $('#sbmt_style_gallery').val(_lang.page_gallery_upload_submit);

    //clear device uploader pic
    errorType = 0;
    uploadFiles = [];
    $('#file_upload_list_id').val("");
    $('#file_upload_list_size').val("");
    $('#file_upload_list_type').val("");
    $('.liar_label').find(".liar_label_div").each(function () {
        $(this).css('display', 'none');
    });

    hideAllFileShow();
}

function submit_success(ticket_form) {
    var btn_sm = ticket_form.find('#sbmt_style_gallery');
    $("#style-gallery-write").css("display", "none");
    changeUserName();
    ticket_form.find('#title_of_review').val("");
    ticket_form.find('#comment_content').val("");

    btn_sm.val(_lang.page_gallery_upload_submit);
    // btn_sm.prop('disabled', false);
};

function showImage(){
    $(".current-list").find("img").each(function(){
        $(this).attr('src',$(this).attr('data-src'));
    });
}

function get_instagram_media(){
    $.ajax({
        'type': 'GET',
        'url': webData.WEB_ROOT + "social-net/instagram.php",
        'data': '',
        'cache': false,
        'dataType': 'json',
        'success': function (r) {
            window.open(r.loginUrl, "", 'height=500,width=900,top=100,left=' + 0 + ',toolbar=no,menubar=no,scrollbars=no, resizable=no,location=no, status=no');
        }
    });
};

function get_facebook_media(){
    $.ajax({
        'type': 'GET',
        'url': webData.WEB_ROOT + "social-net/fb.php",
        'data': '',
        'cache': false,
        'dataType': 'json',
        'success': function (r) {
            window.open(r.data, "", 'height=500,width=900,top=100,left=' + 0 + ',toolbar=no,menubar=no,scrollbars=no, resizable=no,location=no, status=no');
        }
    });
};

function get_social_img_html(){
    var selectImgNum = $('.social-img').find("div").length;
    if(selectImgNum > 0) {
        $('.error-tip').hide();
        $('.max-tip').hide();

        var thumbnailHtml = "";
        var hasThumbnail = false;
        var needSlide = false;

        //寻找被选中的图片
        $('.social-img').find(".selected").each(function (index) {
            var imgSrc = $(this)[0].src;
            switch (index) {
                case 0:
                    $('#file-social-first').val(imgSrc);
                    $('#gallery_img').attr('src', imgSrc);
                    break;
                case 1:
                    $('#file-social-two').val(imgSrc);
                    thumbnailHtml += get_thumbnail_slide_html(index, imgSrc);
                    hasThumbnail = true;
                    break;
                case 2:
                    $('#file-social-three').val(imgSrc);
                    thumbnailHtml += get_thumbnail_slide_html(index, imgSrc);
                    break;
                case 3:
                    $('#file-social-four').val(imgSrc);
                    thumbnailHtml += get_thumbnail_slide_html(index, imgSrc);
                    break;
                case 4:
                    $('#file-social-five').val(imgSrc);
                    thumbnailHtml += get_thumbnail_slide_html(index, imgSrc);
                    needSlide = true;
                    break;
                default:
                    break;
            };

            //清除图片选中状态
            $(this).removeClass("selected");
            $(this).next().remove();
        });

        if(hasThumbnail && needSlide){
            $('.left-swiping').css("visibility", "visible");
            $('.right-swiping').show();
            $('.left-swiping').after(thumbnailHtml);
        } else if (hasThumbnail) {
            $('.left-swiping').after(thumbnailHtml);
        }

        $('#page-source').hide();
        $('#page-device').show();
    } else {
        $('.error-tip').show();
    }
}

function get_thumbnail_slide_html(index, imgSrc){
    var thumbnailHtml = "";
    if(index == 0){
        thumbnailHtml = "<span class='active-index thunmb" + index + "'" +  "data-index=" + index + ">";
    } else {
        thumbnailHtml = "<span class='thunmb" + index + "'" + "data-index=" + index + ">";
    }
    thumbnailHtml += "<img src='" + imgSrc + "'>";
    thumbnailHtml += "</span>";
    return thumbnailHtml;
};

function reset_form() {
    // $("#page-choose-source").show();
    $("#page-source, #photo-device").show();
    // $("#page-source").hide();
    $("#photo-face, #photo-ins").hide();
    $("#page-device").hide();
    $('.left-swiping').css("visibility", "hidden");
    $(".right-swiping").hide();

    //清除图片选中状态
    $('.social-img').find("div").each(function () {
        $(this).prev().removeClass("selected");
        $(this).remove();
    });

    //clear slide thumbnail
    $('#show_img_thumbnail').find("span").each(function () {
        $(this).remove();
    });

    changeUserName();
    $("#title_of_review, #comment_content").val('');
    $('#file-social-first, #file-social-two, #file-social-three, #file-social-four, #file-social-five').val("");

    //clear device uploader pic
    errorType = 0;
    uploadFiles = [];
    $('#file_upload_list_id').val("");
    $('#file_upload_list_size').val("");
    $('#file_upload_list_type').val("");
    $('.liar_label').find(".liar_label_div").each(function () {
        $(this).css('display', 'none');
    });
    
    $('.liar_label').find(".liar_label_img").each(function () {
        $(this).attr('src', '');
    });
    $('.liar_label').find(".liar_label_video").each(function () {
        $(this).attr('src', '');
    });
}

function changeUserName(){
    var defauleUserName = $("#defaule_user_name").val();
    var userName = $("#user_name").val();
    if(defauleUserName != userName){
        $("#user_name").val(defauleUserName);
    }
}

function changeBigGalleryImg(index) {
    $('#show_img_thumbnail').find("span").removeClass("active-index");
    $('#show_img_thumbnail').find("span").eq(index).addClass("active-index");
    var realImgSrc = $('#show_img_thumbnail').find("span").eq(index)[0].childNodes[0].currentSrc;
    $('#gallery_img').attr("src", realImgSrc);
}

function init() {
    if ($.inArray(pageData.js_key,scrollPages) >= 0) {
        window.onload = function () {
            Scroll.moniterPageLoad(cookie);
        }
    }
    window.onload = function () {
        // var userPhotosList = $(".user-gallery-list dt.gallery-attach");
        // if (userPhotosList.length > 0) {
        //
        //     var moveUserPhotos = function(pos) {
        //         if(clickFlag){
        //             $(".user-gallery-list").animate({
        //                 left: pos
        //             }, 500, function(){
        //                 clickFlag = true;
        //             });
        //         }
        //         clickFlag = false;
        //
        //     };
            showImage();
        //     var userPhotosNum = userPhotosList.length;
            var screenWidth = window.innerWidth;
        //     $(".user-photos-pre").data("showNum", 0);
        //     $(".user-photos-next").data("showNum", userPhotosNum - 5);
            $(".user-gallery-viewport").data("type", "small");
            if(screenWidth > 1400){
                $(".user-gallery-viewport").data("type", "large");
            }
        //
        //     var updateMoveBtn = function() {
        //         var leftShowNum = $(".user-photos-pre").data("showNum") || 0;
        //         var display = "none";
        //         if (leftShowNum > 0) {
        //             display = "block";
        //         }
        //         $(".user-photos-pre").css("display", display);
        //         display = "none";
        //         var rightShowNum = $(".user-photos-next").data("showNum") || 0;
        //         if (rightShowNum > 0) {
        //             display = "block";
        //         }
        //         $(".user-photos-next").css("display", display);
        //     };
        //
        //     update
        //     updateMoveBtn();
        //     var clickFlag = true;
            $(window).resize(function() {
                var viewWidth = $(".user-gallery-viewport").css("width");
                var screenType = $(".user-gallery-viewport").data("type");
                if(viewWidth == "1366px" && screenType == "small"){
                    $(".user-gallery-viewport").data("type", "large");
        //             $(".user-photos-pre").data("showNum", 0);
        //             $(".user-photos-next").data("showNum", userPhotosNum - 5);
        //             $(".user-gallery-list").css("left",0);
                }else if(viewWidth == "990px" && screenType == "large"){
                    $(".user-gallery-viewport").data("type", "small");
        //             $(".user-photos-pre").data("showNum", 0);
        //             $(".user-photos-next").data("showNum", userPhotosNum - 5);
                    $(".user-gallery-list").css("left",0);
                }
        //         updateMoveBtn();
            });
            //user photo list move
            // $(".user-photos-pre").click(function() {
            //     var screenWidth = window.innerWidth;
            //     var left = $(".user-gallery-list").position().left;
            //     var num = 5;
            //     if(screenWidth > 1400){
            //         left = left + 1295;
            //     }else{
            //         left = left + 930;
            //     }
            //
            //     if(clickFlag){
            //         var leftShowNum = $(".user-photos-pre").data("showNum"),
            //             rightShowNum = $(".user-photos-next").data("showNum");
            //         $(".user-photos-pre").data("showNum", leftShowNum - num);
            //         $(".user-photos-next").data("showNum", rightShowNum + num),
            //             updateMoveBtn();
            //         for(i=0;i<5;i++){
            //             var listImage = $('.rid-'+parseInt(i-leftShowNum+ num + 5));
            //             if(!listImage.hasClass('current-list')){
            //                 listImage.addClass('current-list');
            //             }
            //         }
            //         showImage();
            //     }
            //     moveUserPhotos(left + 'px');
            // })
            //
            // $(".user-photos-next").click(function() {
            //     var screenWidth = window.innerWidth;
            //     var left = $(".user-gallery-list").position().left;
            //     var num = 5;
            //     if(screenWidth > 1400){
            //         left = left - 1295;
            //     }else{
            //         left = left - 930;
            //     }
            //
            //     if(clickFlag){
            //         var leftShowNum = $(".user-photos-pre").data("showNum"),
            //             rightShowNum = $(".user-photos-next").data("showNum");
            //         $(".user-photos-pre").data("showNum", leftShowNum + num);
            //         $(".user-photos-next").data("showNum", rightShowNum - num),
            //             updateMoveBtn();
            //         for(i=0;i<5;i++){
            //             var listImage = $('.rid-'+parseInt(i+leftShowNum+ num +5));
            //             if(!listImage.hasClass('current-list')){
            //                 listImage.addClass('current-list');
            //             }
            //         }
            //         showImage();
            //     }
            //     moveUserPhotos(left + 'px');
            // })
            //
            $(".upload").click(function() {
                var PopLogin = require('../mod/popLogin');
                var popLogin = new PopLogin();
                if (window.login_status === false){
                    var scrollTop = Scroll.getScroll().top;
                    var scrollLeft = Scroll.getScroll().left;
                    cookie.setCookie('scrollTop', scrollTop, 30);
                    cookie.setCookie('scrollLeft', scrollLeft, 30);
                }
                popLogin.requestFloatingSign(function () {
                    openContentWrite();
                }, document.URL, is_callback);
                return true;
            });

            $(".dialog-close").click(function() {
                reset_form();
                $("#style-gallery-write").hide();
                var layer = $('#dialogOverlay');
                layer.children('div').stop().fadeTo("fast", 0.1, function() {
                    layer.hide();
                    layer.unbind();
                });

            });

            handler_focus();

            var maxImageLen = pageData && pageData.maxImageLen ? pageData.maxImageLen : 5;
            var maxFileSize = pageData && pageData.maxFileSize ? pageData.maxFileSize : 5*1024*1024;
            var maxVideoLen = pageData && pageData.maxVideoLen ? pageData.maxVideoLen : 1;
            var maxVideoSize = pageData && pageData.maxVideoSize ? pageData.maxVideoSize : 50*1024*1024;
            var picUploadUrl = pageData && pageData.picUploadUrl ? pageData.picUploadUrl : '';

            $('#_file').on('change',function(){
                var fileList = Array.from(this.files);
                var allFileList = uploadFiles.concat(fileList);
                if (!fileList.length) return;
                if(hasVideo(allFileList)) {
                    fileCheck(allFileList, 'video', maxVideoLen, maxVideoSize);
                    preview_video();
                } else {
                    fileCheck(allFileList, 'image', maxImageLen ,maxFileSize);
                    preview_pic();
                }                
                this.value = '';
            });

            $('.close').on('click',function(){
                var index = $(this).attr('index');
                if(typeof index !== 'undefined') {
                    uploadFiles.splice(index-1, 1);
                    preview_pic();
                    preview_video();
                }
            });

            function hasVideo(fileList) {
                var rs = false;
                for(var i=0; i<fileList.length; i++) {
                    if(fileList[i].type.match('video\.mp4')) {
                        rs = true;
                        break;
                    }
                }
                return rs;
            }

            function imageFilter (file) {
                return fileFilter(file, 'image.*', maxFileSize);                    
            }

            function videoFilter (file) {
                return fileFilter(file, 'video\.mp4', maxVideoSize);
            }

            function fileCheck (fileList, filterType, maxLen, maxSize) {
                var newFileList = [];
                if(filterType == 'video') {
                    newFileList = fileList.filter(videoFilter);
                } else {
                    newFileList = fileList.filter(imageFilter);
                }
                var allFileListLength = fileList.length;
                var hasFilterFile = (allFileListLength !== newFileList.length || allFileListLength > maxLen);
                uploadFiles = newFileList.concat();
                if(uploadFiles.length > maxLen) {
                    uploadFiles = uploadFiles.slice(0, maxLen);
                    errorType = 2;
                }
                if (hasFilterFile) {
                    if (errorType === 1) {
                        alert(_lang.page_gallery_upload_mime_limit);
                    } else {
                        alert(_lang.page_gallery_upload_file_limit);
                    }
                }
            }

            function fileFilter(file, matchStr, maxSize) {
                var valid = true;
                if (!file.type.match(matchStr)) {
                    valid = false;
                    errorType = 1;
                } else if (file.size > maxSize) {
                    valid = false;
                    errorType = 2;
                }
                return valid;
            }

            function preview_video () {
                removeAllFiles();

                if(uploadFiles.lenth < 1) return;
                if(!hasVideo(uploadFiles)) return;

                var file = uploadFiles[0];
                var blobURL = URL.createObjectURL(file);
                
                var video = $('#liar_label_video_1');
                video.attr('src', blobURL);
                video.parent().css('display', 'inline-block');
            }

            function preview_pic () {
                removeAllFiles();
                
                var len = uploadFiles.length;
                for(var i = 1; i <= len; i++) {
                    var file = uploadFiles[i-1];
                    var reader = new FileReader();
                    reader.readAsDataURL(file);
                    reader.onload = function(i) {
                        return function() {
                            var pic = $('#liar_label_' + i);
                            pic.attr('src', this.result);
                            pic.parent().css('display', 'inline-block');
                        }
                    } (i);
                }
            }

            function removeAllFiles()
            {
                var video = $('#liar_label_video_1');
                video.attr('src', '');
                video.parent().css('display', 'none');

                for(var i = 1; i <= 5; i++) {
                    var pic = $('#liar_label_' + i);
                    pic.attr('src', '');
                    pic.parent().css('display', 'none');
                }
            }

            function upload () {
                btn_sm.prop('disabled', true);
                var btn_text = ffh.getBtnText(btn_sm);
                ffh.setBtnText(btn_sm, _lang.page_order_progress_processing + '...');

                var len = uploadFiles.length;
                if(len > 0) {
                    var formData = new FormData();
                    for (var i = 0; i < len; i++) {
                        formData.append("fileList[]", uploadFiles[i])
                    }
                    formData.append('fileNumMax', String(maxImageLen));
                    formData.append('fileSizeMax', String(maxFileSize));

                    $.ajax({
                        url : picUploadUrl,
                        type : 'POST',
                        data : formData,
                        dataType : 'json',
                        contentType : false,
                        processData : false,
                        cache : false,
                        success : function(r) {
                            if (r.error == 0) {
                                $('#file_upload_list_id').val(r.datas.data_str);
                                $('#file_upload_list_size').val(r.datas.size_str);
                                $('#file_upload_list_type' ).val(r.datas.filetype_str);
                                ticket_form.submit();
                            } else {
                                alert(_lang.page_goods_photo_rule_5);
                                // btn_sm.prop('disabled', false);
                                ffh.setBtnText(btn_sm, btn_text);
                            }
                        },
                        error : function() {
                            alert(_lang.page_common_unknow_error + ' ' + _lang.page_common_try_again);
                            // btn_sm.prop('disabled', false);
                            ffh.setBtnText(btn_sm, btn_text);
                        }
                    });
                }
            }

            var ticket_form = $('#form_style_gallery');
            var btn_sm = ticket_form.find('#sbmt_style_gallery');
            btn_sm.on('click', function() {
                if (check_form()) {
                    upload();
                }
                return false;
            });

            ticket_form.on('submit', function() {
                var btn_text = ffh.getBtnText(btn_sm);
                var opt = {
                    'dataType': 'json',
                    'complete': function() {
                        // btn_sm.prop('disabled', false);
                        // ffh.setBtnText(btn_sm, btn_text);
                    },
                    'error': function() {},
                    'success': function(r) {
                        if (r.code == 0) {
                            submit_success(ticket_form);
                            writeGallerySuccessDialog(r.data.lotteryCoupon);
                        } else if (r.code == -1) {
                            alert(r.msg);
                            location.href = r.url;
                        } else if (r.code == 2) {
                            btn_sm.val(_lang.page_gallery_upload_submit);
                            alert(_lang.page_gallery_photo_video_limit);
                            btn_sm.prop('disabled', false);
                            return false;
                        } else {
                            btn_sm.prop('disabled', false);
                            ffh.setBtnText(btn_sm, _lang.page_goods_submit_review);
                            return false;
                        }
                    }
                };
                ticket_form.ajaxSubmit(opt);
                return false;
            });
            window.alertMsg =  function(s) {
                alert(s);
            }

            $("#device").click(function () {
                $('#page-choose-source').hide();
                $('#photo-face').hide();
                $('#photo-ins').hide();
                $('#page-source').show();
                $('#photo-device').show();
            });

            $("#facebook").click(function () {
                if ($('#face').has("img").length > 0) {
                    $('#page-choose-source').hide();
                    $('#photo-device').hide();
                    $('#photo-ins').hide();
                    $('#page-source').show();
                    $('#photo-face').show();
                } else {
                    get_facebook_media();
                }
            });

            $("#instagram").click(function () {
                if ($('#ins').has("img").length > 0) {
                    $('#page-choose-source').hide();
                    $('#photo-device').hide();
                    $('#photo-face').hide();
                    $('#page-source').show();
                    $('#photo-ins').show();
                } else {
                    get_instagram_media();
                }
            });

            //instagram/facebook choose pic
            $('#page-source').on('click', '.social-img', function () {
                //再次选中就取消
                if($(this).find("div").length > 0){
                    $('.max-tip').hide();
                    $(this).find("img").removeClass("selected");
                    $(this).find("div").remove();
                } else if ($(this).parent().find(".selected").length > 4){
                    $('.max-tip').show();
                } else {
                    $('.error-tip').hide();
                    $('.max-tip').hide();
                    $(this).append("<div class='select-pic'></div>");
                    $(this).find("img").addClass("selected");
                }
            });

            //choose photo page click back
            $("#page-source .progress-pre-button").click(function () {
                $('#face_select_photo').hide();
                $('#ins_select_photo').hide();
                $('.max-tip').hide();
                $('#page-source').hide();
                $('#photo-device, #photo-face, #photo-face').hide();
                $('#page-choose-source').show();

                //清除图片选中状态
                $('.social-img').find("div").each(function () {
                    $(this).prev().removeClass("selected");
                    $(this).remove();
                });

                //clear pic_source html
                $('#page-source').find("input[name='pic_source']").each(function () {
                    $(this).remove();
                });
            });

            //submit review page click back
            $("#prev").click(function () {
                $('#page-device').hide();
                $('#page-source').show();
                $("#gallery_img").attr("src", '');

                changeUserName();
                $("#title_of_review, #comment_content").val('');
                $('#comment_content_tip').html('').show();
                $('#comment_title_tip').html('').show();

                //clear hidden pic info
                $('#file-social-first, #file-social-two, #file-social-three, #file-social-four, #file-social-five').val("");

                //clear slide thumbnail
                $('#show_img_thumbnail').find("span").each(function () {
                    $(this).remove();
                });

                //clear slide cion
                $('.left-swiping').css("visibility", "hidden");
                $('.right-swiping').hide();
                $('#sbmt_style_gallery').val(_lang.page_gallery_upload_submit);
            });

            //device page click next
            $('#page-source').on('click', '#progress-next-device', function () {
                $('#form_style_gallery').find('#sbmt_style_gallery').prop('disabled', false);
                $('#photo-device').append('<input type="hidden" name="pic_source" value="device">');

                if(hasVideo(uploadFiles)) {
                    uploadImageHide();
                    uploadVideoShow();                    
                } else {
                    uploadVideoHide();
                    uploadImageShow();
                }  
            });

            function uploadVideoShow()
            {                
                var videoSrc = $('#liar_label_video_1').attr('src');
                $('#gallery_video').attr('src', videoSrc).show();
                $('#page-source').hide();
                $('#page-device').show();
            }

            function uploadVideoHide()
            {
                $('#gallery_video').attr('src', '').hide();
            }

            function uploadImageShow()
            {
                $('#gallery_img').show();
                var img_num = uploadFiles.length;

                var src = Array();
                for(var i = 0; i < img_num; i++){
                    src[i] = $('.liar_label').find(".liar_label_img")[i].src;
                }                

                if(img_num > 0) {
                    //src 是一个图片src 的数组
                    if(src[0] != ''){

                        var thumbnailHtml = "";
                        var hasThumbnail = false;
                        var needSlide = false;

                        for (var i = 0; i < img_num; i++) {
                            var imgSrc = src[i];
                            switch (i) {
                                case 0:
                                    $('#gallery_img').attr('src', imgSrc);
                                    thumbnailHtml += get_thumbnail_slide_html(i, imgSrc);
                                    hasThumbnail = true;
                                    break;
                                case 1:
                                    thumbnailHtml += get_thumbnail_slide_html(i, imgSrc);
                                    break;
                                case 2:
                                    thumbnailHtml += get_thumbnail_slide_html(i, imgSrc);
                                    break;
                                case 3:
                                    thumbnailHtml += get_thumbnail_slide_html(i, imgSrc);
                                    needSlide = true;
                                    break;
                                case 4:
                                    thumbnailHtml += get_thumbnail_slide_html(i, imgSrc);
                                    break;
                                default:
                                    break;
                            };
                        }

                        if(hasThumbnail && needSlide){
                            $('.right-swiping').show();
                            $('.left-swiping').after(thumbnailHtml);
                        } else if (hasThumbnail) {
                            $('.left-swiping').after(thumbnailHtml);
                        }

                        $('#page-source').hide();
                        $('#page-device').show();
                    }
                } else {
                    alert(_lang.page_gallery_select_photo);
                }
            }

            function uploadImageHide()
            {
                var img_num = 5;
                for(var i = 0; i < img_num; i++){
                    $('.liar_label').find(".liar_label_img")[i].src = '';                    
                }
                $('#gallery_img').hide();
            }

            //instagram page click next
            $('#page-source').on('click', '#progress-next-instagram', function () {
                $('#photo-ins').append('<input type="hidden" name="pic_source" value="instagram">');
                get_social_img_html();
            });

            //facebook page click next
            $('#page-source').on('click', '#progress-next-facebook', function () {
                $('#photo-face').append('<input type="hidden" name="pic_source" value="facebook">');
                get_social_img_html();
            });

            $(".left-swiping").click(function () {
                $(".right-swiping").show();
                var index = $('#show_img_thumbnail').find(".active-index").attr("data-index");
                index = parseInt(index);
                if(index == 1){
                    $('.left-swiping').css("visibility", "hidden");
                }
                if(index == 0){
                    return
                } else if(index < 2){
                    $('#show_img_thumbnail').find("span").eq(index + 2).hide();
                    $('#show_img_thumbnail').find("span").eq(index + 1).show();
                }
                $('#show_img_thumbnail').find("span").eq(index).removeClass("active-index");
                $('#show_img_thumbnail').find("span").eq(index - 1).show().addClass("active-index");
                var realImgSrc = $('#show_img_thumbnail').find("span").eq(index - 1)[0].childNodes[0].currentSrc;
                $('#gallery_img').attr("src", realImgSrc);
            });

            $(".right-swiping").click(function () {
                var index = $('#show_img_thumbnail').find(".active-index").attr("data-index");
                index = parseInt(index);
                var thumbnailNum = $('#show_img_thumbnail').find("span").length;
                if(thumbnailNum - index == 2){
                    $(".right-swiping").hide();
                } else {
                    $(".right-swiping").show();
                }
                if(index > 1){
                    $('.left-swiping').css("visibility", "visible");
                    $('#show_img_thumbnail').find("span").eq(index - 2).hide();
                    $('#show_img_thumbnail').find("span").eq(index - 1).show();
                }
                $('#show_img_thumbnail').find("span").eq(index).removeClass("active-index");
                $('#show_img_thumbnail').find("span").eq(index + 1).show().addClass("active-index");
                if($('#show_img_thumbnail').find("span").eq(index + 1).length != 0){
                    var realImgSrc = $('#show_img_thumbnail').find("span").eq(index + 1)[0].childNodes[0].currentSrc;
                    $('#gallery_img').attr("src", realImgSrc);
                }
            });

            //active thumbnail image
            $('#show_img_thumbnail').on('click', '.thunmb0', function () {
                changeBigGalleryImg(0);
            });

            $('#show_img_thumbnail').on('click', '.thunmb1', function () {
                changeBigGalleryImg(1);
            });

            $('#show_img_thumbnail').on('click', '.thunmb2', function () {
                changeBigGalleryImg(2);
            });

            $('#show_img_thumbnail').on('click', '.thunmb3', function () {
                changeBigGalleryImg(3);
            });

            $('#show_img_thumbnail').on('click', '.thunmb4', function () {
                changeBigGalleryImg(4);
                $(".right-swiping").hide();
            });

            //continue uploading
            $(document).on('click', '#reUpload', function(e) {
                dialog.close('#successDialog', true);

                var layer = $('#dialogOverlay');
                layer.children('div').stop().fadeTo("fast", 0.5, function () {
                    layer.show();
                });

                $("#style-gallery-write").show();
                // $("#page-choose-source").show();
                $("#page-source, #photo-device").show();
                $('#photo-face, #photo-ins').hide();
                $("#page-device").hide();

                //清除图片选中状态
                $('.social-img').find("div").each(function () {
                    $(this).prev().removeClass("selected");
                    $(this).remove();
                });

                //clear pic source html
                $('#page-source').find("input[name='pic_source']").each(function () {
                    $(this).remove();
                });

                $("#title_of_review, #comment_content").val('');
                $('#file-social-first, #file-social-two, #file-social-three, #file-social-four, #file-social-five').val("");

                //clear slide thumbnail
                $('#show_img_thumbnail').find("span").each(function () {
                    $(this).remove();
                });

                //clear slide cion
                $('.left-swiping').css("visibility", "hidden");
                $('.right-swiping').hide();
                $('#sbmt_style_gallery').val(_lang.page_gallery_upload_submit);

                //clear device uploader pic
                errorType = 0;
                uploadFiles = [];
                $('#file_upload_list_id').val("");
                $('#file_upload_list_size').val("");
                $('#file_upload_list_type').val("");
                $('.liar_label').find(".liar_label_div").each(function () {
                    $(this).css('display', 'none');
                });
                hideAllFileShow();
            });
    };
}

module.exports = {
    "init": init
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc3R5bGVHYWxsZXJ5L3VzZXJfZ2FsbGVyeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogZm9yIGxpc3QgZ2FsbGVyeVxyXG4gKi9cclxudmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbnJlcXVpcmUoJy4uL2xpYi9qcXVlcnlGb3JtJyk7XHJcbnZhciBkaWFsb2cgPSByZXF1aXJlKCcuLi9tb2QvZGlhbG9nJyk7XHJcbnZhciBVc2VyRGlhbG9nID0gcmVxdWlyZSgnLi4vbW9kL3VzZXJQaG90b0RpYWxvZycpO1xyXG52YXIgZmZoID0gcmVxdWlyZSgnLi4vbW9kL2Zvcm1GaWVsZHNIYW5kbGUnKTtcclxudmFyIFNjcm9sbCA9IHJlcXVpcmUoJy4uL3BhZ2VzL3BhZ2Vfc2Nyb2xsJyk7XHJcbnZhciBpc19jYWxsYmFjayA9IGZhbHNlO1xyXG5cclxudmFyIGVsZW1fbGlzdCA9ICQoJy51c2VyLWdhbGxlcnktbGlzdCcpO1xyXG52YXIgQ29va2llID0gcmVxdWlyZSgnLi4vbW9kL2Nvb2tpZScpO1xyXG52YXIgY29va2llID0gbmV3IENvb2tpZSgpO1xyXG5cclxudmFyIHNjcm9sbFBhZ2VzID0gWydpbmRleCcsICdjYXRlZ29yeSddO1xyXG5cclxucmVxdWlyZSgnLi4vc3R5bGVHYWxsZXJ5L2xpc3RHYWxsZXJ5QXR0YWNoJykuaW5pdChlbGVtX2xpc3QpO1xyXG5zdHlsZV9nYWxsZXJ5X3V0aWwgPSByZXF1aXJlKCcuLi9zdHlsZUdhbGxlcnkvc3R5bGVfZ2FsbGVyeV91dGlsJyk7XHJcblxyXG4vL2RldmljZSDlrZjmlL7kuIrkvKDnmoTlm77niYdcclxudmFyIGVycm9yVHlwZSA9IDA7XHJcbnZhciB1cGxvYWRGaWxlcyA9IFtdO1xyXG5cclxudmFyIGdhbGxlcmllcyA9IHR5cGVvZihnYWxsZXJ5RGF0YSkgIT0gXCJ1bmRlZmluZWRcIiAmJiBnYWxsZXJ5RGF0YSAmJiBnYWxsZXJ5RGF0YS5nYWxsZXJpZXMgPyBnYWxsZXJ5RGF0YS5nYWxsZXJpZXMuc2xpY2UoMCw1KSA6IFtdO1xyXG52YXIgY2F0SWQgPSB0eXBlb2YoZ2FsbGVyeURhdGEpICE9IFwidW5kZWZpbmVkXCIgJiYgZ2FsbGVyeURhdGEgJiYgKGdhbGxlcnlEYXRhLmNhdElkID4gMCkgPyBnYWxsZXJ5RGF0YS5jYXRJZCA6IFwiXCI7XHJcbnZhciBjdXJyZW50R2FsbGVyeUdyb3VwID0gMTsgICAgICAgIC8v5b2T5YmN5pi+56S655qEZ2FsbGVyeee7hOaVsFxyXG52YXIgbnVtT2ZHYWxsZXJ5VG90YWxHcm91cCA9IDEwOyAgICAvL2dhbGxlcnnnmoTmgLvnu4TmlbBcclxudmFyIGluQWpheCA9IGZhbHNlO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlTW92ZUJ0bigpIHtcclxuICAgIGlmKGN1cnJlbnRHYWxsZXJ5R3JvdXAgPiAxKVxyXG4gICAgICAgICQoJy51c2VyLXBob3Rvcy1wcmUnKS5zaG93KCk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgJCgnLnVzZXItcGhvdG9zLXByZScpLmhpZGUoKTtcclxuICAgIGlmKGN1cnJlbnRHYWxsZXJ5R3JvdXAgPT0gbnVtT2ZHYWxsZXJ5VG90YWxHcm91cCB8fCBnYWxsZXJpZXNbZ2FsbGVyaWVzLmxlbmd0aC0xXSA9PXVuZGVmaW5lZClcclxuICAgICAgICAkKCcudXNlci1waG90b3MtbmV4dCcpLmhpZGUoKTtcclxuICAgIGVsc2VcclxuICAgICAgICAkKCcudXNlci1waG90b3MtbmV4dCcpLnNob3coKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZUFsbEZpbGVTaG93KClcclxue1xyXG4gICAgJCgnLmxpYXJfbGFiZWwnKS5maW5kKFwiLmxpYXJfbGFiZWxfaW1nXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykuYXR0cignc3JjJywgJycpO1xyXG4gICAgfSk7XHJcbiAgICAkKCcubGlhcl9sYWJlbCcpLmZpbmQoXCIubGlhcl9sYWJlbF92aWRlb1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ3NyYycsICcnKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI2dhbGxlcnlfaW1nJykuYXR0cignc3JjJywgJycpO1xyXG4gICAgJCgnI2dhbGxlcnlfdmlkZW8nKS5hdHRyKCdzcmMnLCAnJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dfZ2FsbGVyaWVzKGdyb3VwKSB7XHJcbiAgICB2YXIgc3RhcnQgPSBncm91cCo1LTU7ICAgICAgIC8vc3RhcnQgPSAoZ3JvdXAtMSkqNVxyXG4gICAgdmFyIGh0bWwgPSAnJztcclxuICAgIGZvcih2YXIga2V5ID0gc3RhcnQgOyBrZXkgPCBzdGFydCArIDUgJiYgZ2FsbGVyaWVzW2tleV0gIT0gdW5kZWZpbmVkIDsga2V5KyspIHtcclxuICAgICAgICB2YXIgZ2FsbGVyeSA9IGdhbGxlcmllc1trZXldO1xyXG4gICAgICAgIGh0bWwgKz0gJzxkbCBjbGFzcz1cInJpZC0nICsga2V5ICsnIGN1cnJlbnQtbGlzdFwiPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImNvbW1lbnRcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5LmNvbW1lbnQgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJuaWNrXCIgdmFsdWU9XCInICsgZ2FsbGVyeS5uaWNrICsgJ1wiIC8+XFxuJyArXHJcbiAgICAgICAgICAgICcgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiZ2FsbGVyeUdvb2RJZFwiIHZhbHVlPVwiJyArIGdhbGxlcnkuZ29vZHNfaWQgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJjYXRJZFwiIHZhbHVlPVwiJyArIGdhbGxlcnkuY2F0ZWdvcnlfaWQgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJnYWxsZXJ5Q2F0TmFtZVwiIHZhbHVlPVwiJyArIGdhbGxlcnkuY2F0TmFtZSArICdcIiAvPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImdhbGxlcnlMaWtlXCIgdmFsdWU9XCInICsgZ2FsbGVyeS5saWtlICsgJ1wiIC8+JyArXHJcbiAgICAgICAgICAgICcgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwibGlrZUNvdW50XCIgdmFsdWU9XCInICsgZ2FsbGVyeS5saWtlQ291bnQgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJnYWxsZXJ5SWRcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5LmdhbGxlcnlfaWQgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJ1cmxDb2xvclwiIHZhbHVlPVwiJyArIGdhbGxlcnkudXJsQ29sb3IgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJzaG93Q29sb3JcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5LnNob3dDb2xvciArICdcIiAvPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInRpdGxlXCIgdmFsdWU9XCInICsgZ2FsbGVyeS50aXRsZV9vZl9yZXZpZXcgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJwb3N0RGF0ZXRpbWVcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5LnBvc3RfZGF0ZXRpbWUgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJjYXROYW1lXCIgdmFsdWU9XCInICsgZ2FsbGVyeS5jYXROYW1lICsgJ1wiIC8+JyArXHJcbiAgICAgICAgICAgICcgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiZ29vZHNJc09uU2FsZVwiIHZhbHVlPVwiJyArIGdhbGxlcnkuZ29vZHNJc09uU2FsZSArICdcIiAvPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImdvb2RzVXJsXCIgdmFsdWU9XCInICsgZ2FsbGVyeS5nb29kc1VybCArICdcIiAvPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImdvb2RzVGh1bWJQaWNcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5Lmdvb2RzVGh1bWJQaWMgKyAnXCIgLz4nICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAnICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInByb2R1Y3RMaXN0XCIgdmFsdWU9XFwnJytKU09OLnN0cmluZ2lmeShnYWxsZXJ5LnByb2R1Y3RMaXN0KSsnXFwnIC8+JyArXHJcbiAgICAgICAgICAgICcgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiZmF2b3VyaXRlXCIgdmFsdWU9XCInICsgZ2FsbGVyeS5mYXZvdXJpdGUgKyAnXCIgLz4nICsgICAgICAgICAgXHJcbiAgICAgICAgICAgICcgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiaXNGYXZvdXJpdGVcIiB2YWx1ZT1cIicgKyBnYWxsZXJ5LmlzRmF2b3VyaXRlICsgJ1wiIC8+JyArICAgICBcclxuICAgICAgICAgICAgJyAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJjdXJyZW50SW5kZXhcIiB2YWx1ZT1cIicgKyBrZXkgKyAnXCIgLz4nICtcclxuICAgICAgICAgICAgJyAgICAgICA8ZHQgY2xhc3M9XCJnYWxsZXJ5LWF0dGFjaFwiPicgK1xyXG4gICAgICAgICAgICAnICAgICAgICAgICA8aW1nIGFsdD1cIicgKyBfbGFuZy5wYWdlX2dhbGxlcnlfcGludGVyZXN0X2Rlc2NyaXB0aW9uICsgJ1wiICBkYXRhLXNyYz1cIicgKyBnYWxsZXJ5LnBpY18xICsgJ1wiPjwvaW1nPic7XHJcbiAgICAgICAgaWYoZ2FsbGVyeS5waWNfMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGh0bWwrPSAnPGltZyBhbHQ9XCInICsgX2xhbmcucGFnZV9nYWxsZXJ5X3BpbnRlcmVzdF9kZXNjcmlwdGlvbiArICdcIiAgZGF0YS1zcmM9XCInICsgZ2FsbGVyeS5waWNfMiArICdcIiBjbGFzcz1cInVuZGlzcGxheVwiPjwvaW1nPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGdhbGxlcnkucGljXzMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBodG1sKz0gJzxpbWcgYWx0PVwiJyArIF9sYW5nLnBhZ2VfZ2FsbGVyeV9waW50ZXJlc3RfZGVzY3JpcHRpb24gKyAnXCIgIGRhdGEtc3JjPVwiJyArIGdhbGxlcnkucGljXzMgKyAnXCIgY2xhc3M9XCJ1bmRpc3BsYXlcIj48L2ltZz4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihnYWxsZXJ5LnBpY180KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaHRtbCs9ICc8aW1nIGFsdD1cIicgKyBfbGFuZy5wYWdlX2dhbGxlcnlfcGludGVyZXN0X2Rlc2NyaXB0aW9uICsgJ1wiICBkYXRhLXNyYz1cIicgKyBnYWxsZXJ5LnBpY180ICsgJ1wiIGNsYXNzPVwidW5kaXNwbGF5XCI+PC9pbWc+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoZ2FsbGVyeS5waWNfNSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGh0bWwrPSAnPGltZyBhbHQ9XCInICsgX2xhbmcucGFnZV9nYWxsZXJ5X3BpbnRlcmVzdF9kZXNjcmlwdGlvbiArICdcIiAgZGF0YS1zcmM9XCInICsgZ2FsbGVyeS5waWNfNSArICdcIiBjbGFzcz1cInVuZGlzcGxheVwiPjwvaW1nPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGh0bWwgKz0gJzwvZHQ+PC9kbD4nXHJcbiAgICB9XHJcbiAgICAkKCcudXNlci1nYWxsZXJ5LWxpc3QnKS5odG1sKGh0bWwpO1xyXG4gICAgY3VycmVudEdhbGxlcnlHcm91cCA9IGdyb3VwIDtcclxuICAgIHVwZGF0ZU1vdmVCdG4oKTtcclxuICAgIHNob3dJbWFnZSgpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0X2dhbGxlcmllcyhncm91cCkge1xyXG4gICAgaW5BamF4ID0gdHJ1ZTtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgJ3R5cGUnOiAnUE9TVCcsXHJcbiAgICAgICAgJ3VybCc6IHdlYkRhdGEuV0VCX1JPT1QgKyAnYWpheC5waHAnLFxyXG4gICAgICAgICdkYXRhJzogJ2FjdD1nZXRfZ2FsbGVyaWVzJmdyb3VwPScgKyBncm91cCArICcmY2F0SWQ9JyArIGNhdElkLFxyXG4gICAgICAgICdjYWNoZSc6IHRydWUsXHJcbiAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLFxyXG4gICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICBpZiAoci5jb2RlID09IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhQcmV2ID0gZ2FsbGVyaWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGdhbGxlcmllcyA9IGdhbGxlcmllcy5jb25jYXQoci5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhBZnRlciA9IGdhbGxlcmllcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZihsZW5ndGhBZnRlciAtIGxlbmd0aFByZXYgPCA1KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG51bU9mR2FsbGVyeVRvdGFsR3JvdXAgPSBncm91cDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluQWpheCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc2hvd19nYWxsZXJpZXMoZ3JvdXApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5BamF4ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBudW1PZkdhbGxlcnlUb3RhbEdyb3VwID0gY3VycmVudEdhbGxlcnlHcm91cDtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1vdmVCdG4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc2hvd19nYWxsZXJ5X0dyb3VwKGdyb3VwKSB7XHJcbiAgICBpZihncm91cCA+IDAgJiYgZ3JvdXAgPD0gbnVtT2ZHYWxsZXJ5VG90YWxHcm91cCAmJiAoTWF0aC5jZWlsKGdhbGxlcmllcy5sZW5ndGggLyA1KSkgPj0gZ3JvdXApIHtcclxuICAgICAgICBzaG93X2dhbGxlcmllcyhncm91cCk7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgaWYgKGluQWpheCA9PSBmYWxzZSAmJiBncm91cCA8PSBudW1PZkdhbGxlcnlUb3RhbEdyb3VwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0X2dhbGxlcmllcyhncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuJCgnLnVzZXItcGhvdG9zLXByZScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmKGN1cnJlbnRHYWxsZXJ5R3JvdXAgPT0gMSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgc2hvd19nYWxsZXJ5X0dyb3VwKGN1cnJlbnRHYWxsZXJ5R3JvdXAgLSAxKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufSk7XHJcblxyXG4kKCcudXNlci1waG90b3MtbmV4dCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmKGN1cnJlbnRHYWxsZXJ5R3JvdXAgPT0gMTApIHJldHVybiBmYWxzZTtcclxuICAgIHNob3dfZ2FsbGVyeV9Hcm91cChjdXJyZW50R2FsbGVyeUdyb3VwICsgMSk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn0pO1xyXG5cclxuLy8gZnVuY3Rpb24gbW92ZUdhbGxlcnlCeUdyb3VwKHBvcykge1xyXG4vLyAgICAgJChcIi51c2VyLWdhbGxlcnktbGlzdFwiKS5hbmltYXRlKHtcclxuLy8gICAgICAgICBsZWZ0OiBwb3NcclxuLy8gICAgIH0sIDUwMCk7XHJcbi8vIH07XHJcblxyXG5mdW5jdGlvbiBvcGVuQ29udGVudFdyaXRlKCkge1xyXG4gICAgaWYgKCQoJyNkaWFsb2dPdmVybGF5Jykuc2l6ZSgpID4gMCkge1xyXG4gICAgICAgIHZhciBsYXllciA9ICQoJyNkaWFsb2dPdmVybGF5Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBsYXllciA9ICQoJzxkaXYgaWQ9XCJkaWFsb2dPdmVybGF5XCI+PGRpdiBzdHlsZT1cImJhY2tncm91bmQ6cmdiKDAsMCwwKTtcIj48L2Rpdj48L2Rpdj4nKS5wcmVwZW5kVG8oJ2JvZHknKTtcclxuICAgIH07XHJcblxyXG4gICAgbGF5ZXIuc2hvdygpLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKDAsIDAuMSkuZmFkZVRvKFwiZmFzdFwiLCAwLjUpO1xyXG5cclxuICAgICQoXCIjc3R5bGUtZ2FsbGVyeS13cml0ZVwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IDtcclxuICAgIGlmKGNsaWVudEhlaWdodCA+IDY1MCl7XHJcbiAgICAgICAgJChcIiNzdHlsZS1nYWxsZXJ5LXdyaXRlXCIpLmNzcyhcInRvcFwiLCQod2luZG93KS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKSAvIDcpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgJChcIiNzdHlsZS1nYWxsZXJ5LXdyaXRlXCIpLmNzcyhcInRvcFwiLCQod2luZG93KS5zY3JvbGxUb3AoKSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBjaGVja19mb3JtKCkge1xyXG4gICAgdmFyIHRpY2tldF9mb3JtID0gJCgnI2Zvcm1fc3R5bGVfZ2FsbGVyeScpO1xyXG4gICAgdmFyIG5pY2sgPSB0aWNrZXRfZm9ybS5maW5kKCcjdXNlcl9uYW1lJykudmFsKCkudHJpbSgpO1xyXG4gICAgaWYgKG5pY2sgPT0gJycpIHtcclxuICAgICAgICB0aWNrZXRfZm9ybS5maW5kKCcjY29tbWVudF9uaWNrX3RpcCcpLmh0bWwoX2xhbmcucGFnZV9nYWxsZXJ5X2VudGVyX25hbWUpLnNob3coKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRpdGxlX29mX3JldmlldyA9IHRpY2tldF9mb3JtLmZpbmQoJyN0aXRsZV9vZl9yZXZpZXcnKS52YWwoKS50cmltKCk7XHJcbiAgICBpZiAodGl0bGVfb2ZfcmV2aWV3ID09ICcnKSB7XHJcbiAgICAgICAgdGlja2V0X2Zvcm0uZmluZCgnI2NvbW1lbnRfdGl0bGVfdGlwJykuaHRtbChfbGFuZy5wYWdlX2dhbGxlcnlfZW50ZXJfdGl0bGVfb2ZfcmV2aWV3KS5zaG93KCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb250ZW50ID0gdGlja2V0X2Zvcm0uZmluZCgnI2NvbW1lbnRfY29udGVudCcpLnZhbCgpLnRyaW0oKTtcclxuICAgIGlmIChjb250ZW50ID09ICcnKSB7XHJcbiAgICAgICAgdGlja2V0X2Zvcm0uZmluZCgnI2NvbW1lbnRfY29udGVudF90aXAnKS5odG1sKF9sYW5nLnBhZ2VfZ2FsbGVyeV9lbnRlcl9yZXZpZXcpLnNob3coKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnQubGVuZ3RoID4gMzAwMCkge1xyXG4gICAgICAgIGFsZXJ0KF9sYW5nLnBhZ2VfZ29vZHNfcmV2aWV3X3F1ZXN0aW9uX2NvbnRlbnRfbGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVyX2ZvY3VzKCkge1xyXG4gICAgdmFyIHRpY2tldF9mb3JtID0gJCgnI2Zvcm1fc3R5bGVfZ2FsbGVyeScpO1xyXG4gICAgdGlja2V0X2Zvcm0uZmluZCgnI2NvbW1lbnRfY29udGVudCcpLmZvY3VzKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRpY2tldF9mb3JtLmZpbmQoJyNjb21tZW50X2NvbnRlbnRfdGlwJykuaHRtbCgnJyk7XHJcbiAgICB9KTtcclxuICAgIHRpY2tldF9mb3JtLmZpbmQoJyN1c2VyX25hbWUnKS5mb2N1cyhmdW5jdGlvbigpIHtcclxuICAgICAgICB0aWNrZXRfZm9ybS5maW5kKCcjY29tbWVudF9uaWNrX3RpcCcpLmh0bWwoJycpO1xyXG4gICAgfSk7XHJcbiAgICB0aWNrZXRfZm9ybS5maW5kKCcjdGl0bGVfb2ZfcmV2aWV3JykuZm9jdXMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRpY2tldF9mb3JtLmZpbmQoJyNjb21tZW50X3RpdGxlX3RpcCcpLmh0bWwoJycpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB3cml0ZUdhbGxlcnlTdWNjZXNzRGlhbG9nKGNvdXBvbikge1xyXG4gICAgdmFyIGNvdXBvbkh0bWwgPSAnJztcclxuICAgIGlmIChKU09OLnN0cmluZ2lmeShjb3Vwb24pICE9IFwie31cIikge1xyXG4gICAgICAgIGNvdXBvbkh0bWwgPSAnPGRpdiBjbGFzcz1cImdhbGxlcnktc3VjY2Vzcy1jb3Vwb25cIj4nXHJcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJjb3Vwb25fdmFsdWVcIj4nICsgY291cG9uLnZhbHVlMmRpc3BsYXkgKyAnPC9kaXY+J1xyXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiY291cG9uX21pbmltdW1fdmFsdWVcIj4nICsgY291cG9uLm1pbmltdW0yZGlzcGxheSArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJjb3Vwb25fY29kZVwiPicgKyBfbGFuZy5wYWdlX2NvbW1vbl9jb2RlICsgJzogJyArIGNvdXBvbi5jb3Vwb25Db2RlICsgJzwvZGl2PidcclxuICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz1cInNlcGFyYXRvci1saW5lXCI+PC9kaXY+J1xyXG4gICAgICAgICAgICArICc8ZGl2IGNsYXNzPVwiY291cG9uX2V4cGlyZXNcIj4nICsgY291cG9uLmVUaW1lRGlzcGxheSArICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICsgJzwvZGl2Pic7XHJcbiAgICB9XHJcbiAgICB2YXIgZGV0YWlsRGlhbG9nSHRtbCA9ICc8ZGl2IGlkPVwic3R5bGUtZ2FsbGVyeS1zdWNjZXNzXCI+JyArXHJcbiAgICAgICAgJzxkaXYgaWQ9XCJnYWxsZXJ5LXdyaXRlLWhlYWRcIj48ZGl2IGNsYXNzPVwiZ2FsbGVyeS1zdWNjZXNzLWljb25cIj48aW1nIHNyYz1cIicgKyB3ZWJEYXRhLklNR19QQVRIICsgJ3N0eWxlLWdhbGxlcnkvc3R5bGUtZ2FsbGVyeS1zdWNjZXNzLnBuZ1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJnYWxsZXJ5LWNvbW1lbnQtdGl0bGVcIj4nICsgX2xhbmcucGFnZV9nYWxsZXJ5X3NoYXJlX3lvdXJfbG9vayArICc8L2Rpdj4gPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiZGlhbG9nLWNsb3NlXCI+PC9hPjwvZGl2PicgK1xyXG4gICAgICAgIGNvdXBvbkh0bWwgK1xyXG4gICAgICAgICc8YnV0dG9uIGlkPVwicmVVcGxvYWRcIj4nICsgX2xhbmcucGFnZV9nYWxsZXJ5X2NvbnRpbnVlX3VwbG9hZGluZyArICc8L2J1dHRvbj48YSBocmVmPVwiL3N0eWxlLWdhbGxlcnlcIj48YnV0dG9uIGlkPVwidmlld19nYWxsZXJ5XCI+JyArIF9sYW5nLnBhZ2VfZ2FsbGVyeV92aWV3X2dhbGxlcnkgKyAnPC9idXR0b24+PC9hPjwvZGl2Pic7XHJcblxyXG4gICAgJCgnI3N1Y2Nlc3NEaWFsb2cnKS5yZW1vdmUoKTtcclxuICAgIC8vIHZhciBkZXRhaWxEaWFsb2dIdG1sID0gc3R5bGVfZ2FsbGVyeV91dGlsLmdldFBhZ2VHYWxsZXJ5VXBsb2FkU3VjY2Vzc0h0bWwoKTtcclxuICAgIHZhciBzdWNjZXNzRGlhbG9nID0gZGlhbG9nLm9wZW4oe1xyXG4gICAgICAgIG1vZElkOiAnc3VjY2Vzc0RpYWxvZycsXHJcbiAgICAgICAgd2lkdGg6IDU2MCxcclxuICAgICAgICBodG1sOiBkZXRhaWxEaWFsb2dIdG1sLFxyXG4gICAgICAgIGNsb3NlV2hlbkNsaWNraW5nQmc6IHRydWVcclxuICAgIH0pO1xyXG4gICAgc3VjY2Vzc0RpYWxvZy5jc3MoJ3RvcCcsIDApO1xyXG4gICAgc3VjY2Vzc0RpYWxvZy5maW5kKCcubmF2LXRhYnMgYTplcSgwKScpLmNsaWNrKCk7XHJcbn07XHJcblxyXG4vL19wcm90b1/mjIflkJHniLbnuqfnmoTljp/lnovlr7nosaFcclxuZGlhbG9nLl9fcHJvdG9fXy5jbG9zZSA9IGZ1bmN0aW9uKHdpbmJveCwgaXNIaWRlT3ZlcmxheSkge1xyXG4gICAgcmVzZXRTdHlsZUdhbGxlcnlGb3JtKCk7XHJcbiAgICAkKHdpbmJveCkuaGlkZSgpO1xyXG4gICAgaWYoaXNIaWRlT3ZlcmxheSkge1xyXG4gICAgICAgIHZhciBsYXllciA9ICQoJyNkaWFsb2dPdmVybGF5Jyk7XHJcbiAgICAgICAgbGF5ZXIuY2hpbGRyZW4oJ2RpdicpLnN0b3AoKS5mYWRlVG8oXCJmYXN0XCIsIDAuMSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsYXllci5oaWRlKCk7XHJcbiAgICAgICAgICAgIGxheWVyLnVuYmluZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgJChkb2N1bWVudCkudW5iaW5kKCdrZXlkb3duJywgZW5hYmxlRXNjKTtcclxufTtcclxuXHJcbi8vdXNlciBzdHlsZSBnYWxsZXJ5IGNsaWNrIEVzYyBrZXkgdG8gaGlkZSBhbGwgZGlhbG9nc1xyXG4kKGRvY3VtZW50KS5iaW5kKCdrZXlkb3duJywgZW5hYmxlRXNjKTtcclxuXHJcbmZ1bmN0aW9uIGVuYWJsZUVzYyhlKSB7XHJcbiAgICB2YXIgdW5pY29kZSA9IGUua2V5Q29kZSA/IGUua2V5Q29kZSA6IGUuY2hhckNvZGU7XHJcbiAgICBpZiAodW5pY29kZSA9PSAyNykge1xyXG4gICAgICAgIHJlc2V0U3R5bGVHYWxsZXJ5Rm9ybSgpO1xyXG4gICAgICAgICQoJy5kaWFsb2c6dmlzaWJsZScpLmhpZGUoKTtcclxuICAgICAgICB2YXIgbGF5ZXIgPSAkKCcjZGlhbG9nT3ZlcmxheScpO1xyXG4gICAgICAgIGxheWVyLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKFwiZmFzdFwiLCAwLjEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGF5ZXIuaGlkZSgpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAkKGRvY3VtZW50KS51bmJpbmQoJ2tleWRvd24nLCBlbmFibGVFc2MpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0U3R5bGVHYWxsZXJ5Rm9ybSgpIHtcclxuICAgICQoXCIjc3R5bGUtZ2FsbGVyeS13cml0ZVwiKS5oaWRlKCk7XHJcbiAgICAvLyAkKFwiI3BhZ2UtY2hvb3NlLXNvdXJjZVwiKS5zaG93KCk7XHJcbiAgICAkKFwiI3BhZ2Utc291cmNlLCAjcGhvdG8tZGV2aWNlXCIpLnNob3coKTtcclxuICAgIC8vICQoXCIjcGFnZS1zb3VyY2VcIikuaGlkZSgpO1xyXG4gICAgJChcIiNwaG90by1mYWNlLCAjcGhvdG8taW5zXCIpLmhpZGUoKTtcclxuICAgICQoXCIjcGFnZS1kZXZpY2VcIikuaGlkZSgpO1xyXG4gICAgJCgnLnNvY2lhbC1pbWcnKS5maW5kKFwiZGl2XCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykucHJldigpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGRlZmF1bGVVc2VyTmFtZSA9ICQoXCIjZGVmYXVsZV91c2VyX25hbWVcIikudmFsKCk7XHJcbiAgICB2YXIgdXNlck5hbWUgPSAkKFwiI3VzZXJfbmFtZVwiKS52YWwoKTtcclxuICAgIGlmKGRlZmF1bGVVc2VyTmFtZSAhPSB1c2VyTmFtZSl7XHJcbiAgICAgICAgJChcIiN1c2VyX25hbWVcIikudmFsKGRlZmF1bGVVc2VyTmFtZSk7XHJcbiAgICB9XHJcbiAgICAkKFwiI3RpdGxlX29mX3JldmlldywgI2NvbW1lbnRfY29udGVudFwiKS52YWwoJycpO1xyXG4gICAgJCgnI2ZpbGUtc29jaWFsLWZpcnN0LCAjZmlsZS1zb2NpYWwtdHdvLCAjZmlsZS1zb2NpYWwtdGhyZWUsICNmaWxlLXNvY2lhbC1mb3VyLCAjZmlsZS1zb2NpYWwtZml2ZScpLnZhbChcIlwiKTtcclxuXHJcbiAgICAvL2NsZWFyIHNsaWRlIHRodW1ibmFpbFxyXG4gICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLmZpbmQoXCJzcGFuXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2NsZWFyIHNsaWRlIGNpb25cclxuICAgICQoJy5sZWZ0LXN3aXBpbmcnKS5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgJCgnLnJpZ2h0LXN3aXBpbmcnKS5oaWRlKCk7XHJcbiAgICAkKCcjc2JtdF9zdHlsZV9nYWxsZXJ5JykudmFsKF9sYW5nLnBhZ2VfZ2FsbGVyeV91cGxvYWRfc3VibWl0KTtcclxuXHJcbiAgICAvL2NsZWFyIGRldmljZSB1cGxvYWRlciBwaWNcclxuICAgIGVycm9yVHlwZSA9IDA7XHJcbiAgICB1cGxvYWRGaWxlcyA9IFtdO1xyXG4gICAgJCgnI2ZpbGVfdXBsb2FkX2xpc3RfaWQnKS52YWwoXCJcIik7XHJcbiAgICAkKCcjZmlsZV91cGxvYWRfbGlzdF9zaXplJykudmFsKFwiXCIpO1xyXG4gICAgJCgnI2ZpbGVfdXBsb2FkX2xpc3RfdHlwZScpLnZhbChcIlwiKTtcclxuICAgICQoJy5saWFyX2xhYmVsJykuZmluZChcIi5saWFyX2xhYmVsX2RpdlwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBoaWRlQWxsRmlsZVNob3coKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3VibWl0X3N1Y2Nlc3ModGlja2V0X2Zvcm0pIHtcclxuICAgIHZhciBidG5fc20gPSB0aWNrZXRfZm9ybS5maW5kKCcjc2JtdF9zdHlsZV9nYWxsZXJ5Jyk7XHJcbiAgICAkKFwiI3N0eWxlLWdhbGxlcnktd3JpdGVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICBjaGFuZ2VVc2VyTmFtZSgpO1xyXG4gICAgdGlja2V0X2Zvcm0uZmluZCgnI3RpdGxlX29mX3JldmlldycpLnZhbChcIlwiKTtcclxuICAgIHRpY2tldF9mb3JtLmZpbmQoJyNjb21tZW50X2NvbnRlbnQnKS52YWwoXCJcIik7XHJcblxyXG4gICAgYnRuX3NtLnZhbChfbGFuZy5wYWdlX2dhbGxlcnlfdXBsb2FkX3N1Ym1pdCk7XHJcbiAgICAvLyBidG5fc20ucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzaG93SW1hZ2UoKXtcclxuICAgICQoXCIuY3VycmVudC1saXN0XCIpLmZpbmQoXCJpbWdcIikuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICQodGhpcykuYXR0cignc3JjJywkKHRoaXMpLmF0dHIoJ2RhdGEtc3JjJykpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldF9pbnN0YWdyYW1fbWVkaWEoKXtcclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgJ3R5cGUnOiAnR0VUJyxcclxuICAgICAgICAndXJsJzogd2ViRGF0YS5XRUJfUk9PVCArIFwic29jaWFsLW5ldC9pbnN0YWdyYW0ucGhwXCIsXHJcbiAgICAgICAgJ2RhdGEnOiAnJyxcclxuICAgICAgICAnY2FjaGUnOiBmYWxzZSxcclxuICAgICAgICAnZGF0YVR5cGUnOiAnanNvbicsXHJcbiAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICB3aW5kb3cub3BlbihyLmxvZ2luVXJsLCBcIlwiLCAnaGVpZ2h0PTUwMCx3aWR0aD05MDAsdG9wPTEwMCxsZWZ0PScgKyAwICsgJyx0b29sYmFyPW5vLG1lbnViYXI9bm8sc2Nyb2xsYmFycz1ubywgcmVzaXphYmxlPW5vLGxvY2F0aW9uPW5vLCBzdGF0dXM9bm8nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldF9mYWNlYm9va19tZWRpYSgpe1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICAndHlwZSc6ICdHRVQnLFxyXG4gICAgICAgICd1cmwnOiB3ZWJEYXRhLldFQl9ST09UICsgXCJzb2NpYWwtbmV0L2ZiLnBocFwiLFxyXG4gICAgICAgICdkYXRhJzogJycsXHJcbiAgICAgICAgJ2NhY2hlJzogZmFsc2UsXHJcbiAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLFxyXG4gICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgd2luZG93Lm9wZW4oci5kYXRhLCBcIlwiLCAnaGVpZ2h0PTUwMCx3aWR0aD05MDAsdG9wPTEwMCxsZWZ0PScgKyAwICsgJyx0b29sYmFyPW5vLG1lbnViYXI9bm8sc2Nyb2xsYmFycz1ubywgcmVzaXphYmxlPW5vLGxvY2F0aW9uPW5vLCBzdGF0dXM9bm8nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldF9zb2NpYWxfaW1nX2h0bWwoKXtcclxuICAgIHZhciBzZWxlY3RJbWdOdW0gPSAkKCcuc29jaWFsLWltZycpLmZpbmQoXCJkaXZcIikubGVuZ3RoO1xyXG4gICAgaWYoc2VsZWN0SW1nTnVtID4gMCkge1xyXG4gICAgICAgICQoJy5lcnJvci10aXAnKS5oaWRlKCk7XHJcbiAgICAgICAgJCgnLm1heC10aXAnKS5oaWRlKCk7XHJcblxyXG4gICAgICAgIHZhciB0aHVtYm5haWxIdG1sID0gXCJcIjtcclxuICAgICAgICB2YXIgaGFzVGh1bWJuYWlsID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5lZWRTbGlkZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL+Wvu+aJvuiiq+mAieS4reeahOWbvueJh1xyXG4gICAgICAgICQoJy5zb2NpYWwtaW1nJykuZmluZChcIi5zZWxlY3RlZFwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgaW1nU3JjID0gJCh0aGlzKVswXS5zcmM7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAkKCcjZmlsZS1zb2NpYWwtZmlyc3QnKS52YWwoaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjZ2FsbGVyeV9pbWcnKS5hdHRyKCdzcmMnLCBpbWdTcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNmaWxlLXNvY2lhbC10d28nKS52YWwoaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxIdG1sICs9IGdldF90aHVtYm5haWxfc2xpZGVfaHRtbChpbmRleCwgaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNUaHVtYm5haWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNmaWxlLXNvY2lhbC10aHJlZScpLnZhbChpbWdTcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbEh0bWwgKz0gZ2V0X3RodW1ibmFpbF9zbGlkZV9odG1sKGluZGV4LCBpbWdTcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNmaWxlLXNvY2lhbC1mb3VyJykudmFsKGltZ1NyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsSHRtbCArPSBnZXRfdGh1bWJuYWlsX3NsaWRlX2h0bWwoaW5kZXgsIGltZ1NyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2ZpbGUtc29jaWFsLWZpdmUnKS52YWwoaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxIdG1sICs9IGdldF90aHVtYm5haWxfc2xpZGVfaHRtbChpbmRleCwgaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICBuZWVkU2xpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8v5riF6Zmk5Zu+54mH6YCJ5Lit54q25oCBXHJcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgJCh0aGlzKS5uZXh0KCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmKGhhc1RodW1ibmFpbCAmJiBuZWVkU2xpZGUpe1xyXG4gICAgICAgICAgICAkKCcubGVmdC1zd2lwaW5nJykuY3NzKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XHJcbiAgICAgICAgICAgICQoJy5yaWdodC1zd2lwaW5nJykuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcubGVmdC1zd2lwaW5nJykuYWZ0ZXIodGh1bWJuYWlsSHRtbCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoYXNUaHVtYm5haWwpIHtcclxuICAgICAgICAgICAgJCgnLmxlZnQtc3dpcGluZycpLmFmdGVyKHRodW1ibmFpbEh0bWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnI3BhZ2Utc291cmNlJykuaGlkZSgpO1xyXG4gICAgICAgICQoJyNwYWdlLWRldmljZScpLnNob3coKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnLmVycm9yLXRpcCcpLnNob3coKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0X3RodW1ibmFpbF9zbGlkZV9odG1sKGluZGV4LCBpbWdTcmMpe1xyXG4gICAgdmFyIHRodW1ibmFpbEh0bWwgPSBcIlwiO1xyXG4gICAgaWYoaW5kZXggPT0gMCl7XHJcbiAgICAgICAgdGh1bWJuYWlsSHRtbCA9IFwiPHNwYW4gY2xhc3M9J2FjdGl2ZS1pbmRleCB0aHVubWJcIiArIGluZGV4ICsgXCInXCIgKyAgXCJkYXRhLWluZGV4PVwiICsgaW5kZXggKyBcIj5cIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGh1bWJuYWlsSHRtbCA9IFwiPHNwYW4gY2xhc3M9J3RodW5tYlwiICsgaW5kZXggKyBcIidcIiArIFwiZGF0YS1pbmRleD1cIiArIGluZGV4ICsgXCI+XCI7XHJcbiAgICB9XHJcbiAgICB0aHVtYm5haWxIdG1sICs9IFwiPGltZyBzcmM9J1wiICsgaW1nU3JjICsgXCInPlwiO1xyXG4gICAgdGh1bWJuYWlsSHRtbCArPSBcIjwvc3Bhbj5cIjtcclxuICAgIHJldHVybiB0aHVtYm5haWxIdG1sO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzZXRfZm9ybSgpIHtcclxuICAgIC8vICQoXCIjcGFnZS1jaG9vc2Utc291cmNlXCIpLnNob3coKTtcclxuICAgICQoXCIjcGFnZS1zb3VyY2UsICNwaG90by1kZXZpY2VcIikuc2hvdygpO1xyXG4gICAgLy8gJChcIiNwYWdlLXNvdXJjZVwiKS5oaWRlKCk7XHJcbiAgICAkKFwiI3Bob3RvLWZhY2UsICNwaG90by1pbnNcIikuaGlkZSgpO1xyXG4gICAgJChcIiNwYWdlLWRldmljZVwiKS5oaWRlKCk7XHJcbiAgICAkKCcubGVmdC1zd2lwaW5nJykuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICQoXCIucmlnaHQtc3dpcGluZ1wiKS5oaWRlKCk7XHJcblxyXG4gICAgLy/muIXpmaTlm77niYfpgInkuK3nirbmgIFcclxuICAgICQoJy5zb2NpYWwtaW1nJykuZmluZChcImRpdlwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLnByZXYoKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2NsZWFyIHNsaWRlIHRodW1ibmFpbFxyXG4gICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLmZpbmQoXCJzcGFuXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjaGFuZ2VVc2VyTmFtZSgpO1xyXG4gICAgJChcIiN0aXRsZV9vZl9yZXZpZXcsICNjb21tZW50X2NvbnRlbnRcIikudmFsKCcnKTtcclxuICAgICQoJyNmaWxlLXNvY2lhbC1maXJzdCwgI2ZpbGUtc29jaWFsLXR3bywgI2ZpbGUtc29jaWFsLXRocmVlLCAjZmlsZS1zb2NpYWwtZm91ciwgI2ZpbGUtc29jaWFsLWZpdmUnKS52YWwoXCJcIik7XHJcblxyXG4gICAgLy9jbGVhciBkZXZpY2UgdXBsb2FkZXIgcGljXHJcbiAgICBlcnJvclR5cGUgPSAwO1xyXG4gICAgdXBsb2FkRmlsZXMgPSBbXTtcclxuICAgICQoJyNmaWxlX3VwbG9hZF9saXN0X2lkJykudmFsKFwiXCIpO1xyXG4gICAgJCgnI2ZpbGVfdXBsb2FkX2xpc3Rfc2l6ZScpLnZhbChcIlwiKTtcclxuICAgICQoJyNmaWxlX3VwbG9hZF9saXN0X3R5cGUnKS52YWwoXCJcIik7XHJcbiAgICAkKCcubGlhcl9sYWJlbCcpLmZpbmQoXCIubGlhcl9sYWJlbF9kaXZcIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgICQoJy5saWFyX2xhYmVsJykuZmluZChcIi5saWFyX2xhYmVsX2ltZ1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLmF0dHIoJ3NyYycsICcnKTtcclxuICAgIH0pO1xyXG4gICAgJCgnLmxpYXJfbGFiZWwnKS5maW5kKFwiLmxpYXJfbGFiZWxfdmlkZW9cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdzcmMnLCAnJyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlVXNlck5hbWUoKXtcclxuICAgIHZhciBkZWZhdWxlVXNlck5hbWUgPSAkKFwiI2RlZmF1bGVfdXNlcl9uYW1lXCIpLnZhbCgpO1xyXG4gICAgdmFyIHVzZXJOYW1lID0gJChcIiN1c2VyX25hbWVcIikudmFsKCk7XHJcbiAgICBpZihkZWZhdWxlVXNlck5hbWUgIT0gdXNlck5hbWUpe1xyXG4gICAgICAgICQoXCIjdXNlcl9uYW1lXCIpLnZhbChkZWZhdWxlVXNlck5hbWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VCaWdHYWxsZXJ5SW1nKGluZGV4KSB7XHJcbiAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmUtaW5kZXhcIik7XHJcbiAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXgpLmFkZENsYXNzKFwiYWN0aXZlLWluZGV4XCIpO1xyXG4gICAgdmFyIHJlYWxJbWdTcmMgPSAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXgpWzBdLmNoaWxkTm9kZXNbMF0uY3VycmVudFNyYztcclxuICAgICQoJyNnYWxsZXJ5X2ltZycpLmF0dHIoXCJzcmNcIiwgcmVhbEltZ1NyYyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICBpZiAoJC5pbkFycmF5KHBhZ2VEYXRhLmpzX2tleSxzY3JvbGxQYWdlcykgPj0gMCkge1xyXG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIFNjcm9sbC5tb25pdGVyUGFnZUxvYWQoY29va2llKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHZhciB1c2VyUGhvdG9zTGlzdCA9ICQoXCIudXNlci1nYWxsZXJ5LWxpc3QgZHQuZ2FsbGVyeS1hdHRhY2hcIik7XHJcbiAgICAgICAgLy8gaWYgKHVzZXJQaG90b3NMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vICAgICB2YXIgbW92ZVVzZXJQaG90b3MgPSBmdW5jdGlvbihwb3MpIHtcclxuICAgICAgICAvLyAgICAgICAgIGlmKGNsaWNrRmxhZyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgJChcIi51c2VyLWdhbGxlcnktbGlzdFwiKS5hbmltYXRlKHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbGVmdDogcG9zXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfSwgNTAwLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjbGlja0ZsYWcgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgY2xpY2tGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICAgfTtcclxuICAgICAgICAgICAgc2hvd0ltYWdlKCk7XHJcbiAgICAgICAgLy8gICAgIHZhciB1c2VyUGhvdG9zTnVtID0gdXNlclBob3Rvc0xpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAvLyAgICAgJChcIi51c2VyLXBob3Rvcy1wcmVcIikuZGF0YShcInNob3dOdW1cIiwgMCk7XHJcbiAgICAgICAgLy8gICAgICQoXCIudXNlci1waG90b3MtbmV4dFwiKS5kYXRhKFwic2hvd051bVwiLCB1c2VyUGhvdG9zTnVtIC0gNSk7XHJcbiAgICAgICAgICAgICQoXCIudXNlci1nYWxsZXJ5LXZpZXdwb3J0XCIpLmRhdGEoXCJ0eXBlXCIsIFwic21hbGxcIik7XHJcbiAgICAgICAgICAgIGlmKHNjcmVlbldpZHRoID4gMTQwMCl7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnVzZXItZ2FsbGVyeS12aWV3cG9ydFwiKS5kYXRhKFwidHlwZVwiLCBcImxhcmdlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICAgdmFyIHVwZGF0ZU1vdmVCdG4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyAgICAgICAgIHZhciBsZWZ0U2hvd051bSA9ICQoXCIudXNlci1waG90b3MtcHJlXCIpLmRhdGEoXCJzaG93TnVtXCIpIHx8IDA7XHJcbiAgICAgICAgLy8gICAgICAgICB2YXIgZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKGxlZnRTaG93TnVtID4gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAkKFwiLnVzZXItcGhvdG9zLXByZVwiKS5jc3MoXCJkaXNwbGF5XCIsIGRpc3BsYXkpO1xyXG4gICAgICAgIC8vICAgICAgICAgZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIC8vICAgICAgICAgdmFyIHJpZ2h0U2hvd051bSA9ICQoXCIudXNlci1waG90b3MtbmV4dFwiKS5kYXRhKFwic2hvd051bVwiKSB8fCAwO1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKHJpZ2h0U2hvd051bSA+IDApIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBkaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1uZXh0XCIpLmNzcyhcImRpc3BsYXlcIiwgZGlzcGxheSk7XHJcbiAgICAgICAgLy8gICAgIH07XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAgICAgdXBkYXRlXHJcbiAgICAgICAgLy8gICAgIHVwZGF0ZU1vdmVCdG4oKTtcclxuICAgICAgICAvLyAgICAgdmFyIGNsaWNrRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlld1dpZHRoID0gJChcIi51c2VyLWdhbGxlcnktdmlld3BvcnRcIikuY3NzKFwid2lkdGhcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NyZWVuVHlwZSA9ICQoXCIudXNlci1nYWxsZXJ5LXZpZXdwb3J0XCIpLmRhdGEoXCJ0eXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYodmlld1dpZHRoID09IFwiMTM2NnB4XCIgJiYgc2NyZWVuVHlwZSA9PSBcInNtYWxsXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIudXNlci1nYWxsZXJ5LXZpZXdwb3J0XCIpLmRhdGEoXCJ0eXBlXCIsIFwibGFyZ2VcIik7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1wcmVcIikuZGF0YShcInNob3dOdW1cIiwgMCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1uZXh0XCIpLmRhdGEoXCJzaG93TnVtXCIsIHVzZXJQaG90b3NOdW0gLSA1KTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAkKFwiLnVzZXItZ2FsbGVyeS1saXN0XCIpLmNzcyhcImxlZnRcIiwwKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHZpZXdXaWR0aCA9PSBcIjk5MHB4XCIgJiYgc2NyZWVuVHlwZSA9PSBcImxhcmdlXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIudXNlci1nYWxsZXJ5LXZpZXdwb3J0XCIpLmRhdGEoXCJ0eXBlXCIsIFwic21hbGxcIik7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1wcmVcIikuZGF0YShcInNob3dOdW1cIiwgMCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1uZXh0XCIpLmRhdGEoXCJzaG93TnVtXCIsIHVzZXJQaG90b3NOdW0gLSA1KTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLnVzZXItZ2FsbGVyeS1saXN0XCIpLmNzcyhcImxlZnRcIiwwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICAgIHVwZGF0ZU1vdmVCdG4oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vdXNlciBwaG90byBsaXN0IG1vdmVcclxuICAgICAgICAgICAgLy8gJChcIi51c2VyLXBob3Rvcy1wcmVcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vICAgICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgICAgLy8gICAgIHZhciBsZWZ0ID0gJChcIi51c2VyLWdhbGxlcnktbGlzdFwiKS5wb3NpdGlvbigpLmxlZnQ7XHJcbiAgICAgICAgICAgIC8vICAgICB2YXIgbnVtID0gNTtcclxuICAgICAgICAgICAgLy8gICAgIGlmKHNjcmVlbldpZHRoID4gMTQwMCl7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgbGVmdCA9IGxlZnQgKyAxMjk1O1xyXG4gICAgICAgICAgICAvLyAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgbGVmdCA9IGxlZnQgKyA5MzA7XHJcbiAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vICAgICBpZihjbGlja0ZsYWcpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHZhciBsZWZ0U2hvd051bSA9ICQoXCIudXNlci1waG90b3MtcHJlXCIpLmRhdGEoXCJzaG93TnVtXCIpLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICByaWdodFNob3dOdW0gPSAkKFwiLnVzZXItcGhvdG9zLW5leHRcIikuZGF0YShcInNob3dOdW1cIik7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1wcmVcIikuZGF0YShcInNob3dOdW1cIiwgbGVmdFNob3dOdW0gLSBudW0pO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICQoXCIudXNlci1waG90b3MtbmV4dFwiKS5kYXRhKFwic2hvd051bVwiLCByaWdodFNob3dOdW0gKyBudW0pLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB1cGRhdGVNb3ZlQnRuKCk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgZm9yKGk9MDtpPDU7aSsrKXtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgdmFyIGxpc3RJbWFnZSA9ICQoJy5yaWQtJytwYXJzZUludChpLWxlZnRTaG93TnVtKyBudW0gKyA1KSk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGlmKCFsaXN0SW1hZ2UuaGFzQ2xhc3MoJ2N1cnJlbnQtbGlzdCcpKXtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGxpc3RJbWFnZS5hZGRDbGFzcygnY3VycmVudC1saXN0Jyk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgc2hvd0ltYWdlKCk7XHJcbiAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICBtb3ZlVXNlclBob3RvcyhsZWZ0ICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIC8vIH0pXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vICQoXCIudXNlci1waG90b3MtbmV4dFwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gICAgIHZhciBzY3JlZW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICAvLyAgICAgdmFyIGxlZnQgPSAkKFwiLnVzZXItZ2FsbGVyeS1saXN0XCIpLnBvc2l0aW9uKCkubGVmdDtcclxuICAgICAgICAgICAgLy8gICAgIHZhciBudW0gPSA1O1xyXG4gICAgICAgICAgICAvLyAgICAgaWYoc2NyZWVuV2lkdGggPiAxNDAwKXtcclxuICAgICAgICAgICAgLy8gICAgICAgICBsZWZ0ID0gbGVmdCAtIDEyOTU7XHJcbiAgICAgICAgICAgIC8vICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgLy8gICAgICAgICBsZWZ0ID0gbGVmdCAtIDkzMDtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gICAgIGlmKGNsaWNrRmxhZyl7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdmFyIGxlZnRTaG93TnVtID0gJChcIi51c2VyLXBob3Rvcy1wcmVcIikuZGF0YShcInNob3dOdW1cIiksXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJpZ2h0U2hvd051bSA9ICQoXCIudXNlci1waG90b3MtbmV4dFwiKS5kYXRhKFwic2hvd051bVwiKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAkKFwiLnVzZXItcGhvdG9zLXByZVwiKS5kYXRhKFwic2hvd051bVwiLCBsZWZ0U2hvd051bSArIG51bSk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgJChcIi51c2VyLXBob3Rvcy1uZXh0XCIpLmRhdGEoXCJzaG93TnVtXCIsIHJpZ2h0U2hvd051bSAtIG51bSksXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIHVwZGF0ZU1vdmVCdG4oKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBmb3IoaT0wO2k8NTtpKyspe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB2YXIgbGlzdEltYWdlID0gJCgnLnJpZC0nK3BhcnNlSW50KGkrbGVmdFNob3dOdW0rIG51bSArNSkpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBpZighbGlzdEltYWdlLmhhc0NsYXNzKCdjdXJyZW50LWxpc3QnKSl7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBsaXN0SW1hZ2UuYWRkQ2xhc3MoJ2N1cnJlbnQtbGlzdCcpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgICAgIHNob3dJbWFnZSgpO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgbW92ZVVzZXJQaG90b3MobGVmdCArICdweCcpO1xyXG4gICAgICAgICAgICAvLyB9KVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAkKFwiLnVwbG9hZFwiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBQb3BMb2dpbiA9IHJlcXVpcmUoJy4uL21vZC9wb3BMb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvcExvZ2luID0gbmV3IFBvcExvZ2luKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvZ2luX3N0YXR1cyA9PT0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBTY3JvbGwuZ2V0U2Nyb2xsKCkudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gU2Nyb2xsLmdldFNjcm9sbCgpLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnc2Nyb2xsVG9wJywgc2Nyb2xsVG9wLCAzMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29va2llLnNldENvb2tpZSgnc2Nyb2xsTGVmdCcsIHNjcm9sbExlZnQsIDMwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBvcExvZ2luLnJlcXVlc3RGbG9hdGluZ1NpZ24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5Db250ZW50V3JpdGUoKTtcclxuICAgICAgICAgICAgICAgIH0sIGRvY3VtZW50LlVSTCwgaXNfY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChcIi5kaWFsb2ctY2xvc2VcIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXNldF9mb3JtKCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3N0eWxlLWdhbGxlcnktd3JpdGVcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gJCgnI2RpYWxvZ092ZXJsYXknKTtcclxuICAgICAgICAgICAgICAgIGxheWVyLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKFwiZmFzdFwiLCAwLjEsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXllci51bmJpbmQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBoYW5kbGVyX2ZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbWF4SW1hZ2VMZW4gPSBwYWdlRGF0YSAmJiBwYWdlRGF0YS5tYXhJbWFnZUxlbiA/IHBhZ2VEYXRhLm1heEltYWdlTGVuIDogNTtcclxuICAgICAgICAgICAgdmFyIG1heEZpbGVTaXplID0gcGFnZURhdGEgJiYgcGFnZURhdGEubWF4RmlsZVNpemUgPyBwYWdlRGF0YS5tYXhGaWxlU2l6ZSA6IDUqMTAyNCoxMDI0O1xyXG4gICAgICAgICAgICB2YXIgbWF4VmlkZW9MZW4gPSBwYWdlRGF0YSAmJiBwYWdlRGF0YS5tYXhWaWRlb0xlbiA/IHBhZ2VEYXRhLm1heFZpZGVvTGVuIDogMTtcclxuICAgICAgICAgICAgdmFyIG1heFZpZGVvU2l6ZSA9IHBhZ2VEYXRhICYmIHBhZ2VEYXRhLm1heFZpZGVvU2l6ZSA/IHBhZ2VEYXRhLm1heFZpZGVvU2l6ZSA6IDUwKjEwMjQqMTAyNDtcclxuICAgICAgICAgICAgdmFyIHBpY1VwbG9hZFVybCA9IHBhZ2VEYXRhICYmIHBhZ2VEYXRhLnBpY1VwbG9hZFVybCA/IHBhZ2VEYXRhLnBpY1VwbG9hZFVybCA6ICcnO1xyXG5cclxuICAgICAgICAgICAgJCgnI19maWxlJykub24oJ2NoYW5nZScsZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlTGlzdCA9IEFycmF5LmZyb20odGhpcy5maWxlcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWxsRmlsZUxpc3QgPSB1cGxvYWRGaWxlcy5jb25jYXQoZmlsZUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlTGlzdC5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmKGhhc1ZpZGVvKGFsbEZpbGVMaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVDaGVjayhhbGxGaWxlTGlzdCwgJ3ZpZGVvJywgbWF4VmlkZW9MZW4sIG1heFZpZGVvU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld192aWRlbygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlQ2hlY2soYWxsRmlsZUxpc3QsICdpbWFnZScsIG1heEltYWdlTGVuICxtYXhGaWxlU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld19waWMoKTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnLmNsb3NlJykub24oJ2NsaWNrJyxmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCh0aGlzKS5hdHRyKCdpbmRleCcpO1xyXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGluZGV4ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEZpbGVzLnNwbGljZShpbmRleC0xLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aWV3X3BpYygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdfdmlkZW8oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBoYXNWaWRlbyhmaWxlTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxmaWxlTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZpbGVMaXN0W2ldLnR5cGUubWF0Y2goJ3ZpZGVvXFwubXA0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGltYWdlRmlsdGVyIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZUZpbHRlcihmaWxlLCAnaW1hZ2UuKicsIG1heEZpbGVTaXplKTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB2aWRlb0ZpbHRlciAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVGaWx0ZXIoZmlsZSwgJ3ZpZGVvXFwubXA0JywgbWF4VmlkZW9TaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmlsZUNoZWNrIChmaWxlTGlzdCwgZmlsdGVyVHlwZSwgbWF4TGVuLCBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3RmlsZUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmKGZpbHRlclR5cGUgPT0gJ3ZpZGVvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbGVMaXN0ID0gZmlsZUxpc3QuZmlsdGVyKHZpZGVvRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZUxpc3QgPSBmaWxlTGlzdC5maWx0ZXIoaW1hZ2VGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGFsbEZpbGVMaXN0TGVuZ3RoID0gZmlsZUxpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhc0ZpbHRlckZpbGUgPSAoYWxsRmlsZUxpc3RMZW5ndGggIT09IG5ld0ZpbGVMaXN0Lmxlbmd0aCB8fCBhbGxGaWxlTGlzdExlbmd0aCA+IG1heExlbik7XHJcbiAgICAgICAgICAgICAgICB1cGxvYWRGaWxlcyA9IG5ld0ZpbGVMaXN0LmNvbmNhdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYodXBsb2FkRmlsZXMubGVuZ3RoID4gbWF4TGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmlsZXMgPSB1cGxvYWRGaWxlcy5zbGljZSgwLCBtYXhMZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVHlwZSA9IDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzRmlsdGVyRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoX2xhbmcucGFnZV9nYWxsZXJ5X3VwbG9hZF9taW1lX2xpbWl0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2dhbGxlcnlfdXBsb2FkX2ZpbGVfbGltaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmlsZUZpbHRlcihmaWxlLCBtYXRjaFN0ciwgbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghZmlsZS50eXBlLm1hdGNoKG1hdGNoU3RyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUeXBlID0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZS5zaXplID4gbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUeXBlID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcHJldmlld192aWRlbyAoKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxGaWxlcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHVwbG9hZEZpbGVzLmxlbnRoIDwgMSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYoIWhhc1ZpZGVvKHVwbG9hZEZpbGVzKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gdXBsb2FkRmlsZXNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlbyA9ICQoJyNsaWFyX2xhYmVsX3ZpZGVvXzEnKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvLmF0dHIoJ3NyYycsIGJsb2JVUkwpO1xyXG4gICAgICAgICAgICAgICAgdmlkZW8ucGFyZW50KCkuY3NzKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmV2aWV3X3BpYyAoKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVBbGxGaWxlcygpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gdXBsb2FkRmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8PSBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gdXBsb2FkRmlsZXNbaS0xXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGljID0gJCgnI2xpYXJfbGFiZWxfJyArIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljLmF0dHIoJ3NyYycsIHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYy5wYXJlbnQoKS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IChpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQWxsRmlsZXMoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW8gPSAkKCcjbGlhcl9sYWJlbF92aWRlb18xJyk7XHJcbiAgICAgICAgICAgICAgICB2aWRlby5hdHRyKCdzcmMnLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB2aWRlby5wYXJlbnQoKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDE7IGkgPD0gNTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBpYyA9ICQoJyNsaWFyX2xhYmVsXycgKyBpKTtcclxuICAgICAgICAgICAgICAgICAgICBwaWMuYXR0cignc3JjJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBpYy5wYXJlbnQoKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGxvYWQgKCkge1xyXG4gICAgICAgICAgICAgICAgYnRuX3NtLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnRuX3RleHQgPSBmZmguZ2V0QnRuVGV4dChidG5fc20pO1xyXG4gICAgICAgICAgICAgICAgZmZoLnNldEJ0blRleHQoYnRuX3NtLCBfbGFuZy5wYWdlX29yZGVyX3Byb2dyZXNzX3Byb2Nlc3NpbmcgKyAnLi4uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IHVwbG9hZEZpbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmKGxlbiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImZpbGVMaXN0W11cIiwgdXBsb2FkRmlsZXNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZU51bU1heCcsIFN0cmluZyhtYXhJbWFnZUxlbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZVNpemVNYXgnLCBTdHJpbmcobWF4RmlsZVNpemUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogcGljVXBsb2FkVXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhIDogZm9ybURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlIDogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRGF0YSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNmaWxlX3VwbG9hZF9saXN0X2lkJykudmFsKHIuZGF0YXMuZGF0YV9zdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNmaWxlX3VwbG9hZF9saXN0X3NpemUnKS52YWwoci5kYXRhcy5zaXplX3N0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2ZpbGVfdXBsb2FkX2xpc3RfdHlwZScgKS52YWwoci5kYXRhcy5maWxldHlwZV9zdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tldF9mb3JtLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChfbGFuZy5wYWdlX2dvb2RzX3Bob3RvX3J1bGVfNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnRuX3NtLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZmaC5zZXRCdG5UZXh0KGJ0bl9zbSwgYnRuX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoX2xhbmcucGFnZV9jb21tb25fdW5rbm93X2Vycm9yICsgJyAnICsgX2xhbmcucGFnZV9jb21tb25fdHJ5X2FnYWluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ0bl9zbS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZmaC5zZXRCdG5UZXh0KGJ0bl9zbSwgYnRuX3RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0aWNrZXRfZm9ybSA9ICQoJyNmb3JtX3N0eWxlX2dhbGxlcnknKTtcclxuICAgICAgICAgICAgdmFyIGJ0bl9zbSA9IHRpY2tldF9mb3JtLmZpbmQoJyNzYm10X3N0eWxlX2dhbGxlcnknKTtcclxuICAgICAgICAgICAgYnRuX3NtLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrX2Zvcm0oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRpY2tldF9mb3JtLm9uKCdzdWJtaXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBidG5fdGV4dCA9IGZmaC5nZXRCdG5UZXh0KGJ0bl9zbSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhVHlwZSc6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAnY29tcGxldGUnOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnRuX3NtLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmZmguc2V0QnRuVGV4dChidG5fc20sIGJ0bl90ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdlcnJvcic6IGZ1bmN0aW9uKCkge30sXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmNvZGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0X3N1Y2Nlc3ModGlja2V0X2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVHYWxsZXJ5U3VjY2Vzc0RpYWxvZyhyLmRhdGEubG90dGVyeUNvdXBvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5jb2RlID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChyLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gci51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5jb2RlID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bl9zbS52YWwoX2xhbmcucGFnZV9nYWxsZXJ5X3VwbG9hZF9zdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoX2xhbmcucGFnZV9nYWxsZXJ5X3Bob3RvX3ZpZGVvX2xpbWl0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bl9zbS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bl9zbS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZmaC5zZXRCdG5UZXh0KGJ0bl9zbSwgX2xhbmcucGFnZV9nb29kc19zdWJtaXRfcmV2aWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aWNrZXRfZm9ybS5hamF4U3VibWl0KG9wdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWxlcnRNc2cgPSAgZnVuY3Rpb24ocykge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQocyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQoXCIjZGV2aWNlXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLWNob29zZS1zb3VyY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGhvdG8tZmFjZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwaG90by1pbnMnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGFnZS1zb3VyY2UnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGhvdG8tZGV2aWNlJykuc2hvdygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoXCIjZmFjZWJvb2tcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoJyNmYWNlJykuaGFzKFwiaW1nXCIpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjcGFnZS1jaG9vc2Utc291cmNlJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNwaG90by1kZXZpY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Bob3RvLWlucycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjcGFnZS1zb3VyY2UnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Bob3RvLWZhY2UnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldF9mYWNlYm9va19tZWRpYSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoXCIjaW5zdGFncmFtXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkKCcjaW5zJykuaGFzKFwiaW1nXCIpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjcGFnZS1jaG9vc2Utc291cmNlJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNwaG90by1kZXZpY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Bob3RvLWZhY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3BhZ2Utc291cmNlJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNwaG90by1pbnMnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldF9pbnN0YWdyYW1fbWVkaWEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2luc3RhZ3JhbS9mYWNlYm9vayBjaG9vc2UgcGljXHJcbiAgICAgICAgICAgICQoJyNwYWdlLXNvdXJjZScpLm9uKCdjbGljaycsICcuc29jaWFsLWltZycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8v5YaN5qyh6YCJ5Lit5bCx5Y+W5raIXHJcbiAgICAgICAgICAgICAgICBpZigkKHRoaXMpLmZpbmQoXCJkaXZcIikubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1heC10aXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiaW1nXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiZGl2XCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCIuc2VsZWN0ZWRcIikubGVuZ3RoID4gNCl7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1heC10aXAnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5lcnJvci10aXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1heC10aXAnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hcHBlbmQoXCI8ZGl2IGNsYXNzPSdzZWxlY3QtcGljJz48L2Rpdj5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwiaW1nXCIpLmFkZENsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9jaG9vc2UgcGhvdG8gcGFnZSBjbGljayBiYWNrXHJcbiAgICAgICAgICAgICQoXCIjcGFnZS1zb3VyY2UgLnByb2dyZXNzLXByZS1idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2ZhY2Vfc2VsZWN0X3Bob3RvJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2luc19zZWxlY3RfcGhvdG8nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKCcubWF4LXRpcCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLXNvdXJjZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwaG90by1kZXZpY2UsICNwaG90by1mYWNlLCAjcGhvdG8tZmFjZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLWNob29zZS1zb3VyY2UnKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy/muIXpmaTlm77niYfpgInkuK3nirbmgIFcclxuICAgICAgICAgICAgICAgICQoJy5zb2NpYWwtaW1nJykuZmluZChcImRpdlwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByZXYoKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NsZWFyIHBpY19zb3VyY2UgaHRtbFxyXG4gICAgICAgICAgICAgICAgJCgnI3BhZ2Utc291cmNlJykuZmluZChcImlucHV0W25hbWU9J3BpY19zb3VyY2UnXVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9zdWJtaXQgcmV2aWV3IHBhZ2UgY2xpY2sgYmFja1xyXG4gICAgICAgICAgICAkKFwiI3ByZXZcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI3BhZ2UtZGV2aWNlJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3BhZ2Utc291cmNlJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNnYWxsZXJ5X2ltZ1wiKS5hdHRyKFwic3JjXCIsICcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VVc2VyTmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgJChcIiN0aXRsZV9vZl9yZXZpZXcsICNjb21tZW50X2NvbnRlbnRcIikudmFsKCcnKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb21tZW50X2NvbnRlbnRfdGlwJykuaHRtbCgnJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRfdGl0bGVfdGlwJykuaHRtbCgnJykuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgaGlkZGVuIHBpYyBpbmZvXHJcbiAgICAgICAgICAgICAgICAkKCcjZmlsZS1zb2NpYWwtZmlyc3QsICNmaWxlLXNvY2lhbC10d28sICNmaWxlLXNvY2lhbC10aHJlZSwgI2ZpbGUtc29jaWFsLWZvdXIsICNmaWxlLXNvY2lhbC1maXZlJykudmFsKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgc2xpZGUgdGh1bWJuYWlsXHJcbiAgICAgICAgICAgICAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgc2xpZGUgY2lvblxyXG4gICAgICAgICAgICAgICAgJCgnLmxlZnQtc3dpcGluZycpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICAkKCcucmlnaHQtc3dpcGluZycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNzYm10X3N0eWxlX2dhbGxlcnknKS52YWwoX2xhbmcucGFnZV9nYWxsZXJ5X3VwbG9hZF9zdWJtaXQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vZGV2aWNlIHBhZ2UgY2xpY2sgbmV4dFxyXG4gICAgICAgICAgICAkKCcjcGFnZS1zb3VyY2UnKS5vbignY2xpY2snLCAnI3Byb2dyZXNzLW5leHQtZGV2aWNlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnI2Zvcm1fc3R5bGVfZ2FsbGVyeScpLmZpbmQoJyNzYm10X3N0eWxlX2dhbGxlcnknKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICQoJyNwaG90by1kZXZpY2UnKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInBpY19zb3VyY2VcIiB2YWx1ZT1cImRldmljZVwiPicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGhhc1ZpZGVvKHVwbG9hZEZpbGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEltYWdlSGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFZpZGVvU2hvdygpOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFZpZGVvSGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEltYWdlU2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfSAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBsb2FkVmlkZW9TaG93KClcclxuICAgICAgICAgICAgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciB2aWRlb1NyYyA9ICQoJyNsaWFyX2xhYmVsX3ZpZGVvXzEnKS5hdHRyKCdzcmMnKTtcclxuICAgICAgICAgICAgICAgICQoJyNnYWxsZXJ5X3ZpZGVvJykuYXR0cignc3JjJywgdmlkZW9TcmMpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLXNvdXJjZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLWRldmljZScpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdXBsb2FkVmlkZW9IaWRlKClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgJCgnI2dhbGxlcnlfdmlkZW8nKS5hdHRyKCdzcmMnLCAnJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGxvYWRJbWFnZVNob3coKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAkKCcjZ2FsbGVyeV9pbWcnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1nX251bSA9IHVwbG9hZEZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3JjID0gQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpbWdfbnVtOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY1tpXSA9ICQoJy5saWFyX2xhYmVsJykuZmluZChcIi5saWFyX2xhYmVsX2ltZ1wiKVtpXS5zcmM7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGlmKGltZ19udW0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zcmMg5piv5LiA5Liq5Zu+54mHc3JjIOeahOaVsOe7hFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNyY1swXSAhPSAnJyl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGh1bWJuYWlsSHRtbCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNUaHVtYm5haWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5lZWRTbGlkZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWdfbnVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWdTcmMgPSBzcmNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNnYWxsZXJ5X2ltZycpLmF0dHIoJ3NyYycsIGltZ1NyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbEh0bWwgKz0gZ2V0X3RodW1ibmFpbF9zbGlkZV9odG1sKGksIGltZ1NyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1RodW1ibmFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsSHRtbCArPSBnZXRfdGh1bWJuYWlsX3NsaWRlX2h0bWwoaSwgaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxIdG1sICs9IGdldF90aHVtYm5haWxfc2xpZGVfaHRtbChpLCBpbWdTcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbEh0bWwgKz0gZ2V0X3RodW1ibmFpbF9zbGlkZV9odG1sKGksIGltZ1NyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRTbGlkZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsSHRtbCArPSBnZXRfdGh1bWJuYWlsX3NsaWRlX2h0bWwoaSwgaW1nU3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihoYXNUaHVtYm5haWwgJiYgbmVlZFNsaWRlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yaWdodC1zd2lwaW5nJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxlZnQtc3dpcGluZycpLmFmdGVyKHRodW1ibmFpbEh0bWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1RodW1ibmFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmxlZnQtc3dpcGluZycpLmFmdGVyKHRodW1ibmFpbEh0bWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcGFnZS1zb3VyY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNwYWdlLWRldmljZScpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KF9sYW5nLnBhZ2VfZ2FsbGVyeV9zZWxlY3RfcGhvdG8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGxvYWRJbWFnZUhpZGUoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1nX251bSA9IDU7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaW1nX251bTsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubGlhcl9sYWJlbCcpLmZpbmQoXCIubGlhcl9sYWJlbF9pbWdcIilbaV0uc3JjID0gJyc7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoJyNnYWxsZXJ5X2ltZycpLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9pbnN0YWdyYW0gcGFnZSBjbGljayBuZXh0XHJcbiAgICAgICAgICAgICQoJyNwYWdlLXNvdXJjZScpLm9uKCdjbGljaycsICcjcHJvZ3Jlc3MtbmV4dC1pbnN0YWdyYW0nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGhvdG8taW5zJykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJwaWNfc291cmNlXCIgdmFsdWU9XCJpbnN0YWdyYW1cIj4nKTtcclxuICAgICAgICAgICAgICAgIGdldF9zb2NpYWxfaW1nX2h0bWwoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2ZhY2Vib29rIHBhZ2UgY2xpY2sgbmV4dFxyXG4gICAgICAgICAgICAkKCcjcGFnZS1zb3VyY2UnKS5vbignY2xpY2snLCAnI3Byb2dyZXNzLW5leHQtZmFjZWJvb2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGhvdG8tZmFjZScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwicGljX3NvdXJjZVwiIHZhbHVlPVwiZmFjZWJvb2tcIj4nKTtcclxuICAgICAgICAgICAgICAgIGdldF9zb2NpYWxfaW1nX2h0bWwoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiLmxlZnQtc3dpcGluZ1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnJpZ2h0LXN3aXBpbmdcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLmZpbmQoXCIuYWN0aXZlLWluZGV4XCIpLmF0dHIoXCJkYXRhLWluZGV4XCIpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBwYXJzZUludChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZihpbmRleCA9PSAxKXtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubGVmdC1zd2lwaW5nJykuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKGluZGV4IDwgMil7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLmZpbmQoXCJzcGFuXCIpLmVxKGluZGV4ICsgMikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5lcShpbmRleCArIDEpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5lcShpbmRleCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmUtaW5kZXhcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXggLSAxKS5zaG93KCkuYWRkQ2xhc3MoXCJhY3RpdmUtaW5kZXhcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVhbEltZ1NyYyA9ICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5lcShpbmRleCAtIDEpWzBdLmNoaWxkTm9kZXNbMF0uY3VycmVudFNyYztcclxuICAgICAgICAgICAgICAgICQoJyNnYWxsZXJ5X2ltZycpLmF0dHIoXCJzcmNcIiwgcmVhbEltZ1NyYyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChcIi5yaWdodC1zd2lwaW5nXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwiLmFjdGl2ZS1pbmRleFwiKS5hdHRyKFwiZGF0YS1pbmRleFwiKTtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRodW1ibmFpbE51bSA9ICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZih0aHVtYm5haWxOdW0gLSBpbmRleCA9PSAyKXtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLnJpZ2h0LXN3aXBpbmdcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLnJpZ2h0LXN3aXBpbmdcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoaW5kZXggPiAxKXtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubGVmdC1zd2lwaW5nJykuY3NzKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLmZpbmQoXCJzcGFuXCIpLmVxKGluZGV4IC0gMikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5lcShpbmRleCAtIDEpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICQoJyNzaG93X2ltZ190aHVtYm5haWwnKS5maW5kKFwic3BhblwiKS5lcShpbmRleCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmUtaW5kZXhcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXggKyAxKS5zaG93KCkuYWRkQ2xhc3MoXCJhY3RpdmUtaW5kZXhcIik7XHJcbiAgICAgICAgICAgICAgICBpZigkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXggKyAxKS5sZW5ndGggIT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWxJbWdTcmMgPSAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZXEoaW5kZXggKyAxKVswXS5jaGlsZE5vZGVzWzBdLmN1cnJlbnRTcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2dhbGxlcnlfaW1nJykuYXR0cihcInNyY1wiLCByZWFsSW1nU3JjKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2FjdGl2ZSB0aHVtYm5haWwgaW1hZ2VcclxuICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLm9uKCdjbGljaycsICcudGh1bm1iMCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUJpZ0dhbGxlcnlJbWcoMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLm9uKCdjbGljaycsICcudGh1bm1iMScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUJpZ0dhbGxlcnlJbWcoMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLm9uKCdjbGljaycsICcudGh1bm1iMicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUJpZ0dhbGxlcnlJbWcoMik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLm9uKCdjbGljaycsICcudGh1bm1iMycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUJpZ0dhbGxlcnlJbWcoMyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJCgnI3Nob3dfaW1nX3RodW1ibmFpbCcpLm9uKCdjbGljaycsICcudGh1bm1iNCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUJpZ0dhbGxlcnlJbWcoNCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLnJpZ2h0LXN3aXBpbmdcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udGludWUgdXBsb2FkaW5nXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjcmVVcGxvYWQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBkaWFsb2cuY2xvc2UoJyNzdWNjZXNzRGlhbG9nJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gJCgnI2RpYWxvZ092ZXJsYXknKTtcclxuICAgICAgICAgICAgICAgIGxheWVyLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKFwiZmFzdFwiLCAwLjUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllci5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKFwiI3N0eWxlLWdhbGxlcnktd3JpdGVcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgLy8gJChcIiNwYWdlLWNob29zZS1zb3VyY2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNwYWdlLXNvdXJjZSwgI3Bob3RvLWRldmljZVwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjcGhvdG8tZmFjZSwgI3Bob3RvLWlucycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoXCIjcGFnZS1kZXZpY2VcIikuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5riF6Zmk5Zu+54mH6YCJ5Lit54q25oCBXHJcbiAgICAgICAgICAgICAgICAkKCcuc29jaWFsLWltZycpLmZpbmQoXCJkaXZcIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcmV2KCkucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jbGVhciBwaWMgc291cmNlIGh0bWxcclxuICAgICAgICAgICAgICAgICQoJyNwYWdlLXNvdXJjZScpLmZpbmQoXCJpbnB1dFtuYW1lPSdwaWNfc291cmNlJ11cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICQoXCIjdGl0bGVfb2ZfcmV2aWV3LCAjY29tbWVudF9jb250ZW50XCIpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZmlsZS1zb2NpYWwtZmlyc3QsICNmaWxlLXNvY2lhbC10d28sICNmaWxlLXNvY2lhbC10aHJlZSwgI2ZpbGUtc29jaWFsLWZvdXIsICNmaWxlLXNvY2lhbC1maXZlJykudmFsKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgc2xpZGUgdGh1bWJuYWlsXHJcbiAgICAgICAgICAgICAgICAkKCcjc2hvd19pbWdfdGh1bWJuYWlsJykuZmluZChcInNwYW5cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgc2xpZGUgY2lvblxyXG4gICAgICAgICAgICAgICAgJCgnLmxlZnQtc3dpcGluZycpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICAkKCcucmlnaHQtc3dpcGluZycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJyNzYm10X3N0eWxlX2dhbGxlcnknKS52YWwoX2xhbmcucGFnZV9nYWxsZXJ5X3VwbG9hZF9zdWJtaXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgZGV2aWNlIHVwbG9hZGVyIHBpY1xyXG4gICAgICAgICAgICAgICAgZXJyb3JUeXBlID0gMDtcclxuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAkKCcjZmlsZV91cGxvYWRfbGlzdF9pZCcpLnZhbChcIlwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNmaWxlX3VwbG9hZF9saXN0X3NpemUnKS52YWwoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjZmlsZV91cGxvYWRfbGlzdF90eXBlJykudmFsKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnLmxpYXJfbGFiZWwnKS5maW5kKFwiLmxpYXJfbGFiZWxfZGl2XCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaGlkZUFsbEZpbGVTaG93KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBcImluaXRcIjogaW5pdFxyXG59O1xyXG4iXX0=
},{"../lib/jqueryForm":12,"../mod/cookie":14,"../mod/dialog":17,"../mod/formFieldsHandle":20,"../mod/popLogin":23,"../mod/userPhotoDialog":24,"../pages/page_scroll":26,"../styleGallery/listGalleryAttach":27,"../styleGallery/style_gallery_util":32}],34:[function(require,module,exports){
/**
 * Swiper 4.5.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://www.idangero.us/swiper/
 *
 * Copyright 2014-2019 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: February 22, 2019
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.Swiper = factory());
  }(this, function () { 'use strict';
  
    /**
     * SSR Window 1.0.1
     * Better handling for window object in SSR environment
     * https://github.com/nolimits4web/ssr-window
     *
     * Copyright 2018, Vladimir Kharlampidi
     *
     * Licensed under MIT
     *
     * Released on: July 18, 2018
     */
    var doc = (typeof document === 'undefined') ? {
      body: {},
      addEventListener: function addEventListener() {},
      removeEventListener: function removeEventListener() {},
      activeElement: {
        blur: function blur() {},
        nodeName: '',
      },
      querySelector: function querySelector() {
        return null;
      },
      querySelectorAll: function querySelectorAll() {
        return [];
      },
      getElementById: function getElementById() {
        return null;
      },
      createEvent: function createEvent() {
        return {
          initEvent: function initEvent() {},
        };
      },
      createElement: function createElement() {
        return {
          children: [],
          childNodes: [],
          style: {},
          setAttribute: function setAttribute() {},
          getElementsByTagName: function getElementsByTagName() {
            return [];
          },
        };
      },
      location: { hash: '' },
    } : document; // eslint-disable-line
  
    var win = (typeof window === 'undefined') ? {
      document: doc,
      navigator: {
        userAgent: '',
      },
      location: {},
      history: {},
      CustomEvent: function CustomEvent() {
        return this;
      },
      addEventListener: function addEventListener() {},
      removeEventListener: function removeEventListener() {},
      getComputedStyle: function getComputedStyle() {
        return {
          getPropertyValue: function getPropertyValue() {
            return '';
          },
        };
      },
      Image: function Image() {},
      Date: function Date() {},
      screen: {},
      setTimeout: function setTimeout() {},
      clearTimeout: function clearTimeout() {},
    } : window; // eslint-disable-line
  
    /**
     * Dom7 2.1.3
     * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
     * http://framework7.io/docs/dom.html
     *
     * Copyright 2019, Vladimir Kharlampidi
     * The iDangero.us
     * http://www.idangero.us/
     *
     * Licensed under MIT
     *
     * Released on: February 11, 2019
     */
  
    var Dom7 = function Dom7(arr) {
      var self = this;
      // Create array-like object
      for (var i = 0; i < arr.length; i += 1) {
        self[i] = arr[i];
      }
      self.length = arr.length;
      // Return collection with methods
      return this;
    };
  
    function $(selector, context) {
      var arr = [];
      var i = 0;
      if (selector && !context) {
        if (selector instanceof Dom7) {
          return selector;
        }
      }
      if (selector) {
          // String
        if (typeof selector === 'string') {
          var els;
          var tempParent;
          var html = selector.trim();
          if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
            var toCreate = 'div';
            if (html.indexOf('<li') === 0) { toCreate = 'ul'; }
            if (html.indexOf('<tr') === 0) { toCreate = 'tbody'; }
            if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) { toCreate = 'tr'; }
            if (html.indexOf('<tbody') === 0) { toCreate = 'table'; }
            if (html.indexOf('<option') === 0) { toCreate = 'select'; }
            tempParent = doc.createElement(toCreate);
            tempParent.innerHTML = html;
            for (i = 0; i < tempParent.childNodes.length; i += 1) {
              arr.push(tempParent.childNodes[i]);
            }
          } else {
            if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
              // Pure ID selector
              els = [doc.getElementById(selector.trim().split('#')[1])];
            } else {
              // Other selectors
              els = (context || doc).querySelectorAll(selector.trim());
            }
            for (i = 0; i < els.length; i += 1) {
              if (els[i]) { arr.push(els[i]); }
            }
          }
        } else if (selector.nodeType || selector === win || selector === doc) {
          // Node/element
          arr.push(selector);
        } else if (selector.length > 0 && selector[0].nodeType) {
          // Array of elements or instance of Dom
          for (i = 0; i < selector.length; i += 1) {
            arr.push(selector[i]);
          }
        }
      }
      return new Dom7(arr);
    }
  
    $.fn = Dom7.prototype;
    $.Class = Dom7;
    $.Dom7 = Dom7;
  
    function unique(arr) {
      var uniqueArray = [];
      for (var i = 0; i < arr.length; i += 1) {
        if (uniqueArray.indexOf(arr[i]) === -1) { uniqueArray.push(arr[i]); }
      }
      return uniqueArray;
    }
  
    // Classes and attributes
    function addClass(className) {
      if (typeof className === 'undefined') {
        return this;
      }
      var classes = className.split(' ');
      for (var i = 0; i < classes.length; i += 1) {
        for (var j = 0; j < this.length; j += 1) {
          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') { this[j].classList.add(classes[i]); }
        }
      }
      return this;
    }
    function removeClass(className) {
      var classes = className.split(' ');
      for (var i = 0; i < classes.length; i += 1) {
        for (var j = 0; j < this.length; j += 1) {
          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') { this[j].classList.remove(classes[i]); }
        }
      }
      return this;
    }
    function hasClass(className) {
      if (!this[0]) { return false; }
      return this[0].classList.contains(className);
    }
    function toggleClass(className) {
      var classes = className.split(' ');
      for (var i = 0; i < classes.length; i += 1) {
        for (var j = 0; j < this.length; j += 1) {
          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') { this[j].classList.toggle(classes[i]); }
        }
      }
      return this;
    }
    function attr(attrs, value) {
      var arguments$1 = arguments;
  
      if (arguments.length === 1 && typeof attrs === 'string') {
        // Get attr
        if (this[0]) { return this[0].getAttribute(attrs); }
        return undefined;
      }
  
      // Set attrs
      for (var i = 0; i < this.length; i += 1) {
        if (arguments$1.length === 2) {
          // String
          this[i].setAttribute(attrs, value);
        } else {
          // Object
          // eslint-disable-next-line
          for (var attrName in attrs) {
            this[i][attrName] = attrs[attrName];
            this[i].setAttribute(attrName, attrs[attrName]);
          }
        }
      }
      return this;
    }
    // eslint-disable-next-line
    function removeAttr(attr) {
      for (var i = 0; i < this.length; i += 1) {
        this[i].removeAttribute(attr);
      }
      return this;
    }
    function data(key, value) {
      var el;
      if (typeof value === 'undefined') {
        el = this[0];
        // Get value
        if (el) {
          if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
            return el.dom7ElementDataStorage[key];
          }
  
          var dataKey = el.getAttribute(("data-" + key));
          if (dataKey) {
            return dataKey;
          }
          return undefined;
        }
        return undefined;
      }
  
      // Set value
      for (var i = 0; i < this.length; i += 1) {
        el = this[i];
        if (!el.dom7ElementDataStorage) { el.dom7ElementDataStorage = {}; }
        el.dom7ElementDataStorage[key] = value;
      }
      return this;
    }
    // Transforms
    // eslint-disable-next-line
    function transform(transform) {
      for (var i = 0; i < this.length; i += 1) {
        var elStyle = this[i].style;
        elStyle.webkitTransform = transform;
        elStyle.transform = transform;
      }
      return this;
    }
    function transition(duration) {
      if (typeof duration !== 'string') {
        duration = duration + "ms"; // eslint-disable-line
      }
      for (var i = 0; i < this.length; i += 1) {
        var elStyle = this[i].style;
        elStyle.webkitTransitionDuration = duration;
        elStyle.transitionDuration = duration;
      }
      return this;
    }
    // Events
    function on() {
      var assign;
  
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
      var eventType = args[0];
      var targetSelector = args[1];
      var listener = args[2];
      var capture = args[3];
      if (typeof args[1] === 'function') {
        (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
        targetSelector = undefined;
      }
      if (!capture) { capture = false; }
  
      function handleLiveEvent(e) {
        var target = e.target;
        if (!target) { return; }
        var eventData = e.target.dom7EventData || [];
        if (eventData.indexOf(e) < 0) {
          eventData.unshift(e);
        }
        if ($(target).is(targetSelector)) { listener.apply(target, eventData); }
        else {
          var parents = $(target).parents(); // eslint-disable-line
          for (var k = 0; k < parents.length; k += 1) {
            if ($(parents[k]).is(targetSelector)) { listener.apply(parents[k], eventData); }
          }
        }
      }
      function handleEvent(e) {
        var eventData = e && e.target ? e.target.dom7EventData || [] : [];
        if (eventData.indexOf(e) < 0) {
          eventData.unshift(e);
        }
        listener.apply(this, eventData);
      }
      var events = eventType.split(' ');
      var j;
      for (var i = 0; i < this.length; i += 1) {
        var el = this[i];
        if (!targetSelector) {
          for (j = 0; j < events.length; j += 1) {
            var event = events[j];
            if (!el.dom7Listeners) { el.dom7Listeners = {}; }
            if (!el.dom7Listeners[event]) { el.dom7Listeners[event] = []; }
            el.dom7Listeners[event].push({
              listener: listener,
              proxyListener: handleEvent,
            });
            el.addEventListener(event, handleEvent, capture);
          }
        } else {
          // Live events
          for (j = 0; j < events.length; j += 1) {
            var event$1 = events[j];
            if (!el.dom7LiveListeners) { el.dom7LiveListeners = {}; }
            if (!el.dom7LiveListeners[event$1]) { el.dom7LiveListeners[event$1] = []; }
            el.dom7LiveListeners[event$1].push({
              listener: listener,
              proxyListener: handleLiveEvent,
            });
            el.addEventListener(event$1, handleLiveEvent, capture);
          }
        }
      }
      return this;
    }
    function off() {
      var assign;
  
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
      var eventType = args[0];
      var targetSelector = args[1];
      var listener = args[2];
      var capture = args[3];
      if (typeof args[1] === 'function') {
        (assign = args, eventType = assign[0], listener = assign[1], capture = assign[2]);
        targetSelector = undefined;
      }
      if (!capture) { capture = false; }
  
      var events = eventType.split(' ');
      for (var i = 0; i < events.length; i += 1) {
        var event = events[i];
        for (var j = 0; j < this.length; j += 1) {
          var el = this[j];
          var handlers = (void 0);
          if (!targetSelector && el.dom7Listeners) {
            handlers = el.dom7Listeners[event];
          } else if (targetSelector && el.dom7LiveListeners) {
            handlers = el.dom7LiveListeners[event];
          }
          if (handlers && handlers.length) {
            for (var k = handlers.length - 1; k >= 0; k -= 1) {
              var handler = handlers[k];
              if (listener && handler.listener === listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              } else if (!listener) {
                el.removeEventListener(event, handler.proxyListener, capture);
                handlers.splice(k, 1);
              }
            }
          }
        }
      }
      return this;
    }
    function trigger() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
  
      var events = args[0].split(' ');
      var eventData = args[1];
      for (var i = 0; i < events.length; i += 1) {
        var event = events[i];
        for (var j = 0; j < this.length; j += 1) {
          var el = this[j];
          var evt = (void 0);
          try {
            evt = new win.CustomEvent(event, {
              detail: eventData,
              bubbles: true,
              cancelable: true,
            });
          } catch (e) {
            evt = doc.createEvent('Event');
            evt.initEvent(event, true, true);
            evt.detail = eventData;
          }
          // eslint-disable-next-line
          el.dom7EventData = args.filter(function (data, dataIndex) { return dataIndex > 0; });
          el.dispatchEvent(evt);
          el.dom7EventData = [];
          delete el.dom7EventData;
        }
      }
      return this;
    }
    function transitionEnd(callback) {
      var events = ['webkitTransitionEnd', 'transitionend'];
      var dom = this;
      var i;
      function fireCallBack(e) {
        /* jshint validthis:true */
        if (e.target !== this) { return; }
        callback.call(this, e);
        for (i = 0; i < events.length; i += 1) {
          dom.off(events[i], fireCallBack);
        }
      }
      if (callback) {
        for (i = 0; i < events.length; i += 1) {
          dom.on(events[i], fireCallBack);
        }
      }
      return this;
    }
    function outerWidth(includeMargins) {
      if (this.length > 0) {
        if (includeMargins) {
          // eslint-disable-next-line
          var styles = this.styles();
          return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
        }
        return this[0].offsetWidth;
      }
      return null;
    }
    function outerHeight(includeMargins) {
      if (this.length > 0) {
        if (includeMargins) {
          // eslint-disable-next-line
          var styles = this.styles();
          return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
        }
        return this[0].offsetHeight;
      }
      return null;
    }
    function offset() {
      if (this.length > 0) {
        var el = this[0];
        var box = el.getBoundingClientRect();
        var body = doc.body;
        var clientTop = el.clientTop || body.clientTop || 0;
        var clientLeft = el.clientLeft || body.clientLeft || 0;
        var scrollTop = el === win ? win.scrollY : el.scrollTop;
        var scrollLeft = el === win ? win.scrollX : el.scrollLeft;
        return {
          top: (box.top + scrollTop) - clientTop,
          left: (box.left + scrollLeft) - clientLeft,
        };
      }
  
      return null;
    }
    function styles() {
      if (this[0]) { return win.getComputedStyle(this[0], null); }
      return {};
    }
    function css(props, value) {
      var i;
      if (arguments.length === 1) {
        if (typeof props === 'string') {
          if (this[0]) { return win.getComputedStyle(this[0], null).getPropertyValue(props); }
        } else {
          for (i = 0; i < this.length; i += 1) {
            // eslint-disable-next-line
            for (var prop in props) {
              this[i].style[prop] = props[prop];
            }
          }
          return this;
        }
      }
      if (arguments.length === 2 && typeof props === 'string') {
        for (i = 0; i < this.length; i += 1) {
          this[i].style[props] = value;
        }
        return this;
      }
      return this;
    }
    // Iterate over the collection passing elements to `callback`
    function each(callback) {
      // Don't bother continuing without a callback
      if (!callback) { return this; }
      // Iterate over the current collection
      for (var i = 0; i < this.length; i += 1) {
        // If the callback returns false
        if (callback.call(this[i], i, this[i]) === false) {
          // End the loop early
          return this;
        }
      }
      // Return `this` to allow chained DOM operations
      return this;
    }
    // eslint-disable-next-line
    function html(html) {
      if (typeof html === 'undefined') {
        return this[0] ? this[0].innerHTML : undefined;
      }
  
      for (var i = 0; i < this.length; i += 1) {
        this[i].innerHTML = html;
      }
      return this;
    }
    // eslint-disable-next-line
    function text(text) {
      if (typeof text === 'undefined') {
        if (this[0]) {
          return this[0].textContent.trim();
        }
        return null;
      }
  
      for (var i = 0; i < this.length; i += 1) {
        this[i].textContent = text;
      }
      return this;
    }
    function is(selector) {
      var el = this[0];
      var compareWith;
      var i;
      if (!el || typeof selector === 'undefined') { return false; }
      if (typeof selector === 'string') {
        if (el.matches) { return el.matches(selector); }
        else if (el.webkitMatchesSelector) { return el.webkitMatchesSelector(selector); }
        else if (el.msMatchesSelector) { return el.msMatchesSelector(selector); }
  
        compareWith = $(selector);
        for (i = 0; i < compareWith.length; i += 1) {
          if (compareWith[i] === el) { return true; }
        }
        return false;
      } else if (selector === doc) { return el === doc; }
      else if (selector === win) { return el === win; }
  
      if (selector.nodeType || selector instanceof Dom7) {
        compareWith = selector.nodeType ? [selector] : selector;
        for (i = 0; i < compareWith.length; i += 1) {
          if (compareWith[i] === el) { return true; }
        }
        return false;
      }
      return false;
    }
    function index() {
      var child = this[0];
      var i;
      if (child) {
        i = 0;
        // eslint-disable-next-line
        while ((child = child.previousSibling) !== null) {
          if (child.nodeType === 1) { i += 1; }
        }
        return i;
      }
      return undefined;
    }
    // eslint-disable-next-line
    function eq(index) {
      if (typeof index === 'undefined') { return this; }
      var length = this.length;
      var returnIndex;
      if (index > length - 1) {
        return new Dom7([]);
      }
      if (index < 0) {
        returnIndex = length + index;
        if (returnIndex < 0) { return new Dom7([]); }
        return new Dom7([this[returnIndex]]);
      }
      return new Dom7([this[index]]);
    }
    function append() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
  
      var newChild;
  
      for (var k = 0; k < args.length; k += 1) {
        newChild = args[k];
        for (var i = 0; i < this.length; i += 1) {
          if (typeof newChild === 'string') {
            var tempDiv = doc.createElement('div');
            tempDiv.innerHTML = newChild;
            while (tempDiv.firstChild) {
              this[i].appendChild(tempDiv.firstChild);
            }
          } else if (newChild instanceof Dom7) {
            for (var j = 0; j < newChild.length; j += 1) {
              this[i].appendChild(newChild[j]);
            }
          } else {
            this[i].appendChild(newChild);
          }
        }
      }
  
      return this;
    }
    function prepend(newChild) {
      var i;
      var j;
      for (i = 0; i < this.length; i += 1) {
        if (typeof newChild === 'string') {
          var tempDiv = doc.createElement('div');
          tempDiv.innerHTML = newChild;
          for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
            this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
          }
        } else if (newChild instanceof Dom7) {
          for (j = 0; j < newChild.length; j += 1) {
            this[i].insertBefore(newChild[j], this[i].childNodes[0]);
          }
        } else {
          this[i].insertBefore(newChild, this[i].childNodes[0]);
        }
      }
      return this;
    }
    function next(selector) {
      if (this.length > 0) {
        if (selector) {
          if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
            return new Dom7([this[0].nextElementSibling]);
          }
          return new Dom7([]);
        }
  
        if (this[0].nextElementSibling) { return new Dom7([this[0].nextElementSibling]); }
        return new Dom7([]);
      }
      return new Dom7([]);
    }
    function nextAll(selector) {
      var nextEls = [];
      var el = this[0];
      if (!el) { return new Dom7([]); }
      while (el.nextElementSibling) {
        var next = el.nextElementSibling; // eslint-disable-line
        if (selector) {
          if ($(next).is(selector)) { nextEls.push(next); }
        } else { nextEls.push(next); }
        el = next;
      }
      return new Dom7(nextEls);
    }
    function prev(selector) {
      if (this.length > 0) {
        var el = this[0];
        if (selector) {
          if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
            return new Dom7([el.previousElementSibling]);
          }
          return new Dom7([]);
        }
  
        if (el.previousElementSibling) { return new Dom7([el.previousElementSibling]); }
        return new Dom7([]);
      }
      return new Dom7([]);
    }
    function prevAll(selector) {
      var prevEls = [];
      var el = this[0];
      if (!el) { return new Dom7([]); }
      while (el.previousElementSibling) {
        var prev = el.previousElementSibling; // eslint-disable-line
        if (selector) {
          if ($(prev).is(selector)) { prevEls.push(prev); }
        } else { prevEls.push(prev); }
        el = prev;
      }
      return new Dom7(prevEls);
    }
    function parent(selector) {
      var parents = []; // eslint-disable-line
      for (var i = 0; i < this.length; i += 1) {
        if (this[i].parentNode !== null) {
          if (selector) {
            if ($(this[i].parentNode).is(selector)) { parents.push(this[i].parentNode); }
          } else {
            parents.push(this[i].parentNode);
          }
        }
      }
      return $(unique(parents));
    }
    function parents(selector) {
      var parents = []; // eslint-disable-line
      for (var i = 0; i < this.length; i += 1) {
        var parent = this[i].parentNode; // eslint-disable-line
        while (parent) {
          if (selector) {
            if ($(parent).is(selector)) { parents.push(parent); }
          } else {
            parents.push(parent);
          }
          parent = parent.parentNode;
        }
      }
      return $(unique(parents));
    }
    function closest(selector) {
      var closest = this; // eslint-disable-line
      if (typeof selector === 'undefined') {
        return new Dom7([]);
      }
      if (!closest.is(selector)) {
        closest = closest.parents(selector).eq(0);
      }
      return closest;
    }
    function find(selector) {
      var foundElements = [];
      for (var i = 0; i < this.length; i += 1) {
        var found = this[i].querySelectorAll(selector);
        for (var j = 0; j < found.length; j += 1) {
          foundElements.push(found[j]);
        }
      }
      return new Dom7(foundElements);
    }
    function children(selector) {
      var children = []; // eslint-disable-line
      for (var i = 0; i < this.length; i += 1) {
        var childNodes = this[i].childNodes;
  
        for (var j = 0; j < childNodes.length; j += 1) {
          if (!selector) {
            if (childNodes[j].nodeType === 1) { children.push(childNodes[j]); }
          } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
            children.push(childNodes[j]);
          }
        }
      }
      return new Dom7(unique(children));
    }
    function remove() {
      for (var i = 0; i < this.length; i += 1) {
        if (this[i].parentNode) { this[i].parentNode.removeChild(this[i]); }
      }
      return this;
    }
    function add() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
  
      var dom = this;
      var i;
      var j;
      for (i = 0; i < args.length; i += 1) {
        var toAdd = $(args[i]);
        for (j = 0; j < toAdd.length; j += 1) {
          dom[dom.length] = toAdd[j];
          dom.length += 1;
        }
      }
      return dom;
    }
  
    var Methods = {
      addClass: addClass,
      removeClass: removeClass,
      hasClass: hasClass,
      toggleClass: toggleClass,
      attr: attr,
      removeAttr: removeAttr,
      data: data,
      transform: transform,
      transition: transition,
      on: on,
      off: off,
      trigger: trigger,
      transitionEnd: transitionEnd,
      outerWidth: outerWidth,
      outerHeight: outerHeight,
      offset: offset,
      css: css,
      each: each,
      html: html,
      text: text,
      is: is,
      index: index,
      eq: eq,
      append: append,
      prepend: prepend,
      next: next,
      nextAll: nextAll,
      prev: prev,
      prevAll: prevAll,
      parent: parent,
      parents: parents,
      closest: closest,
      find: find,
      children: children,
      remove: remove,
      add: add,
      styles: styles,
    };
  
    Object.keys(Methods).forEach(function (methodName) {
      $.fn[methodName] = Methods[methodName];
    });
  
    var Utils = {
      deleteProps: function deleteProps(obj) {
        var object = obj;
        Object.keys(object).forEach(function (key) {
          try {
            object[key] = null;
          } catch (e) {
            // no getter for object
          }
          try {
            delete object[key];
          } catch (e) {
            // something got wrong
          }
        });
      },
      nextTick: function nextTick(callback, delay) {
        if ( delay === void 0 ) delay = 0;
  
        return setTimeout(callback, delay);
      },
      now: function now() {
        return Date.now();
      },
      getTranslate: function getTranslate(el, axis) {
        if ( axis === void 0 ) axis = 'x';
  
        var matrix;
        var curTransform;
        var transformMatrix;
  
        var curStyle = win.getComputedStyle(el, null);
  
        if (win.WebKitCSSMatrix) {
          curTransform = curStyle.transform || curStyle.webkitTransform;
          if (curTransform.split(',').length > 6) {
            curTransform = curTransform.split(', ').map(function (a) { return a.replace(',', '.'); }).join(', ');
          }
          // Some old versions of Webkit choke when 'none' is passed; pass
          // empty string instead in this case
          transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
        } else {
          transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
          matrix = transformMatrix.toString().split(',');
        }
  
        if (axis === 'x') {
          // Latest Chrome and webkits Fix
          if (win.WebKitCSSMatrix) { curTransform = transformMatrix.m41; }
          // Crazy IE10 Matrix
          else if (matrix.length === 16) { curTransform = parseFloat(matrix[12]); }
          // Normal Browsers
          else { curTransform = parseFloat(matrix[4]); }
        }
        if (axis === 'y') {
          // Latest Chrome and webkits Fix
          if (win.WebKitCSSMatrix) { curTransform = transformMatrix.m42; }
          // Crazy IE10 Matrix
          else if (matrix.length === 16) { curTransform = parseFloat(matrix[13]); }
          // Normal Browsers
          else { curTransform = parseFloat(matrix[5]); }
        }
        return curTransform || 0;
      },
      parseUrlQuery: function parseUrlQuery(url) {
        var query = {};
        var urlToParse = url || win.location.href;
        var i;
        var params;
        var param;
        var length;
        if (typeof urlToParse === 'string' && urlToParse.length) {
          urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
          params = urlToParse.split('&').filter(function (paramsPart) { return paramsPart !== ''; });
          length = params.length;
  
          for (i = 0; i < length; i += 1) {
            param = params[i].replace(/#\S+/g, '').split('=');
            query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';
          }
        }
        return query;
      },
      isObject: function isObject(o) {
        return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
      },
      extend: function extend() {
        var args = [], len$1 = arguments.length;
        while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];
  
        var to = Object(args[0]);
        for (var i = 1; i < args.length; i += 1) {
          var nextSource = args[i];
          if (nextSource !== undefined && nextSource !== null) {
            var keysArray = Object.keys(Object(nextSource));
            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
              var nextKey = keysArray[nextIndex];
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== undefined && desc.enumerable) {
                if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                  Utils.extend(to[nextKey], nextSource[nextKey]);
                } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                  to[nextKey] = {};
                  Utils.extend(to[nextKey], nextSource[nextKey]);
                } else {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
          }
        }
        return to;
      },
    };
  
    var Support = (function Support() {
      var testDiv = doc.createElement('div');
      return {
        touch: (win.Modernizr && win.Modernizr.touch === true) || (function checkTouch() {
          return !!((win.navigator.maxTouchPoints > 0) || ('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch));
        }()),
  
        pointerEvents: !!(win.navigator.pointerEnabled || win.PointerEvent || ('maxTouchPoints' in win.navigator && win.navigator.maxTouchPoints > 0)),
        prefixedPointerEvents: !!win.navigator.msPointerEnabled,
  
        transition: (function checkTransition() {
          var style = testDiv.style;
          return ('transition' in style || 'webkitTransition' in style || 'MozTransition' in style);
        }()),
        transforms3d: (win.Modernizr && win.Modernizr.csstransforms3d === true) || (function checkTransforms3d() {
          var style = testDiv.style;
          return ('webkitPerspective' in style || 'MozPerspective' in style || 'OPerspective' in style || 'MsPerspective' in style || 'perspective' in style);
        }()),
  
        flexbox: (function checkFlexbox() {
          var style = testDiv.style;
          var styles = ('alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient').split(' ');
          for (var i = 0; i < styles.length; i += 1) {
            if (styles[i] in style) { return true; }
          }
          return false;
        }()),
  
        observer: (function checkObserver() {
          return ('MutationObserver' in win || 'WebkitMutationObserver' in win);
        }()),
  
        passiveListener: (function checkPassiveListener() {
          var supportsPassive = false;
          try {
            var opts = Object.defineProperty({}, 'passive', {
              // eslint-disable-next-line
              get: function get() {
                supportsPassive = true;
              },
            });
            win.addEventListener('testPassiveListener', null, opts);
          } catch (e) {
            // No support
          }
          return supportsPassive;
        }()),
  
        gestures: (function checkGestures() {
          return 'ongesturestart' in win;
        }()),
      };
    }());
  
    var Browser = (function Browser() {
      function isSafari() {
        var ua = win.navigator.userAgent.toLowerCase();
        return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
      }
      return {
        isIE: !!win.navigator.userAgent.match(/Trident/g) || !!win.navigator.userAgent.match(/MSIE/g),
        isEdge: !!win.navigator.userAgent.match(/Edge/g),
        isSafari: isSafari(),
        isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent),
      };
    }());
  
    var SwiperClass = function SwiperClass(params) {
      if ( params === void 0 ) params = {};
  
      var self = this;
      self.params = params;
  
      // Events
      self.eventsListeners = {};
  
      if (self.params && self.params.on) {
        Object.keys(self.params.on).forEach(function (eventName) {
          self.on(eventName, self.params.on[eventName]);
        });
      }
    };
  
    var staticAccessors = { components: { configurable: true } };
  
    SwiperClass.prototype.on = function on (events, handler, priority) {
      var self = this;
      if (typeof handler !== 'function') { return self; }
      var method = priority ? 'unshift' : 'push';
      events.split(' ').forEach(function (event) {
        if (!self.eventsListeners[event]) { self.eventsListeners[event] = []; }
        self.eventsListeners[event][method](handler);
      });
      return self;
    };
  
    SwiperClass.prototype.once = function once (events, handler, priority) {
      var self = this;
      if (typeof handler !== 'function') { return self; }
      function onceHandler() {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];
  
        handler.apply(self, args);
        self.off(events, onceHandler);
        if (onceHandler.f7proxy) {
          delete onceHandler.f7proxy;
        }
      }
      onceHandler.f7proxy = handler;
      return self.on(events, onceHandler, priority);
    };
  
    SwiperClass.prototype.off = function off (events, handler) {
      var self = this;
      if (!self.eventsListeners) { return self; }
      events.split(' ').forEach(function (event) {
        if (typeof handler === 'undefined') {
          self.eventsListeners[event] = [];
        } else if (self.eventsListeners[event] && self.eventsListeners[event].length) {
          self.eventsListeners[event].forEach(function (eventHandler, index) {
            if (eventHandler === handler || (eventHandler.f7proxy && eventHandler.f7proxy === handler)) {
              self.eventsListeners[event].splice(index, 1);
            }
          });
        }
      });
      return self;
    };
  
    SwiperClass.prototype.emit = function emit () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
  
      var self = this;
      if (!self.eventsListeners) { return self; }
      var events;
      var data;
      var context;
      if (typeof args[0] === 'string' || Array.isArray(args[0])) {
        events = args[0];
        data = args.slice(1, args.length);
        context = self;
      } else {
        events = args[0].events;
        data = args[0].data;
        context = args[0].context || self;
      }
      var eventsArray = Array.isArray(events) ? events : events.split(' ');
      eventsArray.forEach(function (event) {
        if (self.eventsListeners && self.eventsListeners[event]) {
          var handlers = [];
          self.eventsListeners[event].forEach(function (eventHandler) {
            handlers.push(eventHandler);
          });
          handlers.forEach(function (eventHandler) {
            eventHandler.apply(context, data);
          });
        }
      });
      return self;
    };
  
    SwiperClass.prototype.useModulesParams = function useModulesParams (instanceParams) {
      var instance = this;
      if (!instance.modules) { return; }
      Object.keys(instance.modules).forEach(function (moduleName) {
        var module = instance.modules[moduleName];
        // Extend params
        if (module.params) {
          Utils.extend(instanceParams, module.params);
        }
      });
    };
  
    SwiperClass.prototype.useModules = function useModules (modulesParams) {
        if ( modulesParams === void 0 ) modulesParams = {};
  
      var instance = this;
      if (!instance.modules) { return; }
      Object.keys(instance.modules).forEach(function (moduleName) {
        var module = instance.modules[moduleName];
        var moduleParams = modulesParams[moduleName] || {};
        // Extend instance methods and props
        if (module.instance) {
          Object.keys(module.instance).forEach(function (modulePropName) {
            var moduleProp = module.instance[modulePropName];
            if (typeof moduleProp === 'function') {
              instance[modulePropName] = moduleProp.bind(instance);
            } else {
              instance[modulePropName] = moduleProp;
            }
          });
        }
        // Add event listeners
        if (module.on && instance.on) {
          Object.keys(module.on).forEach(function (moduleEventName) {
            instance.on(moduleEventName, module.on[moduleEventName]);
          });
        }
  
        // Module create callback
        if (module.create) {
          module.create.bind(instance)(moduleParams);
        }
      });
    };
  
    staticAccessors.components.set = function (components) {
      var Class = this;
      if (!Class.use) { return; }
      Class.use(components);
    };
  
    SwiperClass.installModule = function installModule (module) {
        var params = [], len = arguments.length - 1;
        while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];
  
      var Class = this;
      if (!Class.prototype.modules) { Class.prototype.modules = {}; }
      var name = module.name || (((Object.keys(Class.prototype.modules).length) + "_" + (Utils.now())));
      Class.prototype.modules[name] = module;
      // Prototype
      if (module.proto) {
        Object.keys(module.proto).forEach(function (key) {
          Class.prototype[key] = module.proto[key];
        });
      }
      // Class
      if (module.static) {
        Object.keys(module.static).forEach(function (key) {
          Class[key] = module.static[key];
        });
      }
      // Callback
      if (module.install) {
        module.install.apply(Class, params);
      }
      return Class;
    };
  
    SwiperClass.use = function use (module) {
        var params = [], len = arguments.length - 1;
        while ( len-- > 0 ) params[ len ] = arguments[ len + 1 ];
  
      var Class = this;
      if (Array.isArray(module)) {
        module.forEach(function (m) { return Class.installModule(m); });
        return Class;
      }
      return Class.installModule.apply(Class, [ module ].concat( params ));
    };
  
    Object.defineProperties( SwiperClass, staticAccessors );
  
    function updateSize () {
      var swiper = this;
      var width;
      var height;
      var $el = swiper.$el;
      if (typeof swiper.params.width !== 'undefined') {
        width = swiper.params.width;
      } else {
        width = $el[0].clientWidth;
      }
      if (typeof swiper.params.height !== 'undefined') {
        height = swiper.params.height;
      } else {
        height = $el[0].clientHeight;
      }
      if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
        return;
      }
  
      // Subtract paddings
      width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
      height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);
  
      Utils.extend(swiper, {
        width: width,
        height: height,
        size: swiper.isHorizontal() ? width : height,
      });
    }
  
    function updateSlides () {
      var swiper = this;
      var params = swiper.params;
  
      var $wrapperEl = swiper.$wrapperEl;
      var swiperSize = swiper.size;
      var rtl = swiper.rtlTranslate;
      var wrongRTL = swiper.wrongRTL;
      var isVirtual = swiper.virtual && params.virtual.enabled;
      var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
      var slides = $wrapperEl.children(("." + (swiper.params.slideClass)));
      var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
      var snapGrid = [];
      var slidesGrid = [];
      var slidesSizesGrid = [];
  
      var offsetBefore = params.slidesOffsetBefore;
      if (typeof offsetBefore === 'function') {
        offsetBefore = params.slidesOffsetBefore.call(swiper);
      }
  
      var offsetAfter = params.slidesOffsetAfter;
      if (typeof offsetAfter === 'function') {
        offsetAfter = params.slidesOffsetAfter.call(swiper);
      }
  
      var previousSnapGridLength = swiper.snapGrid.length;
      var previousSlidesGridLength = swiper.snapGrid.length;
  
      var spaceBetween = params.spaceBetween;
      var slidePosition = -offsetBefore;
      var prevSlideSize = 0;
      var index = 0;
      if (typeof swiperSize === 'undefined') {
        return;
      }
      if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
        spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
      }
  
      swiper.virtualSize = -spaceBetween;
  
      // reset margins
      if (rtl) { slides.css({ marginLeft: '', marginTop: '' }); }
      else { slides.css({ marginRight: '', marginBottom: '' }); }
  
      var slidesNumberEvenToRows;
      if (params.slidesPerColumn > 1) {
        if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
          slidesNumberEvenToRows = slidesLength;
        } else {
          slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
        }
        if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
          slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
        }
      }
  
      // Calc slides
      var slideSize;
      var slidesPerColumn = params.slidesPerColumn;
      var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
      var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);
      for (var i = 0; i < slidesLength; i += 1) {
        slideSize = 0;
        var slide = slides.eq(i);
        if (params.slidesPerColumn > 1) {
          // Set slides order
          var newSlideOrderIndex = (void 0);
          var column = (void 0);
          var row = (void 0);
          if (params.slidesPerColumnFill === 'column') {
            column = Math.floor(i / slidesPerColumn);
            row = i - (column * slidesPerColumn);
            if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
              row += 1;
              if (row >= slidesPerColumn) {
                row = 0;
                column += 1;
              }
            }
            newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
            slide
              .css({
                '-webkit-box-ordinal-group': newSlideOrderIndex,
                '-moz-box-ordinal-group': newSlideOrderIndex,
                '-ms-flex-order': newSlideOrderIndex,
                '-webkit-order': newSlideOrderIndex,
                order: newSlideOrderIndex,
              });
          } else {
            row = Math.floor(i / slidesPerRow);
            column = i - (row * slidesPerRow);
          }
          slide
            .css(
              ("margin-" + (swiper.isHorizontal() ? 'top' : 'left')),
              (row !== 0 && params.spaceBetween) && (((params.spaceBetween) + "px"))
            )
            .attr('data-swiper-column', column)
            .attr('data-swiper-row', row);
        }
        if (slide.css('display') === 'none') { continue; } // eslint-disable-line
  
        if (params.slidesPerView === 'auto') {
          var slideStyles = win.getComputedStyle(slide[0], null);
          var currentTransform = slide[0].style.transform;
          var currentWebKitTransform = slide[0].style.webkitTransform;
          if (currentTransform) {
            slide[0].style.transform = 'none';
          }
          if (currentWebKitTransform) {
            slide[0].style.webkitTransform = 'none';
          }
          if (params.roundLengths) {
            slideSize = swiper.isHorizontal()
              ? slide.outerWidth(true)
              : slide.outerHeight(true);
          } else {
            // eslint-disable-next-line
            if (swiper.isHorizontal()) {
              var width = parseFloat(slideStyles.getPropertyValue('width'));
              var paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));
              var paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));
              var marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));
              var marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));
              var boxSizing = slideStyles.getPropertyValue('box-sizing');
              if (boxSizing && boxSizing === 'border-box') {
                slideSize = width + marginLeft + marginRight;
              } else {
                slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;
              }
            } else {
              var height = parseFloat(slideStyles.getPropertyValue('height'));
              var paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));
              var paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));
              var marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));
              var marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));
              var boxSizing$1 = slideStyles.getPropertyValue('box-sizing');
              if (boxSizing$1 && boxSizing$1 === 'border-box') {
                slideSize = height + marginTop + marginBottom;
              } else {
                slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;
              }
            }
          }
          if (currentTransform) {
            slide[0].style.transform = currentTransform;
          }
          if (currentWebKitTransform) {
            slide[0].style.webkitTransform = currentWebKitTransform;
          }
          if (params.roundLengths) { slideSize = Math.floor(slideSize); }
        } else {
          slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
          if (params.roundLengths) { slideSize = Math.floor(slideSize); }
  
          if (slides[i]) {
            if (swiper.isHorizontal()) {
              slides[i].style.width = slideSize + "px";
            } else {
              slides[i].style.height = slideSize + "px";
            }
          }
        }
        if (slides[i]) {
          slides[i].swiperSlideSize = slideSize;
        }
        slidesSizesGrid.push(slideSize);
  
  
        if (params.centeredSlides) {
          slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
          if (prevSlideSize === 0 && i !== 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
          if (i === 0) { slidePosition = slidePosition - (swiperSize / 2) - spaceBetween; }
          if (Math.abs(slidePosition) < 1 / 1000) { slidePosition = 0; }
          if (params.roundLengths) { slidePosition = Math.floor(slidePosition); }
          if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
          slidesGrid.push(slidePosition);
        } else {
          if (params.roundLengths) { slidePosition = Math.floor(slidePosition); }
          if ((index) % params.slidesPerGroup === 0) { snapGrid.push(slidePosition); }
          slidesGrid.push(slidePosition);
          slidePosition = slidePosition + slideSize + spaceBetween;
        }
  
        swiper.virtualSize += slideSize + spaceBetween;
  
        prevSlideSize = slideSize;
  
        index += 1;
      }
      swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
      var newSlidesGrid;
  
      if (
        rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
        $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") });
      }
      if (!Support.flexbox || params.setWrapperSize) {
        if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
        else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
      }
  
      if (params.slidesPerColumn > 1) {
        swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
        swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
        if (swiper.isHorizontal()) { $wrapperEl.css({ width: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
        else { $wrapperEl.css({ height: ((swiper.virtualSize + params.spaceBetween) + "px") }); }
        if (params.centeredSlides) {
          newSlidesGrid = [];
          for (var i$1 = 0; i$1 < snapGrid.length; i$1 += 1) {
            var slidesGridItem = snapGrid[i$1];
            if (params.roundLengths) { slidesGridItem = Math.floor(slidesGridItem); }
            if (snapGrid[i$1] < swiper.virtualSize + snapGrid[0]) { newSlidesGrid.push(slidesGridItem); }
          }
          snapGrid = newSlidesGrid;
        }
      }
  
      // Remove last grid elements depending on width
      if (!params.centeredSlides) {
        newSlidesGrid = [];
        for (var i$2 = 0; i$2 < snapGrid.length; i$2 += 1) {
          var slidesGridItem$1 = snapGrid[i$2];
          if (params.roundLengths) { slidesGridItem$1 = Math.floor(slidesGridItem$1); }
          if (snapGrid[i$2] <= swiper.virtualSize - swiperSize) {
            newSlidesGrid.push(slidesGridItem$1);
          }
        }
        snapGrid = newSlidesGrid;
        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
          snapGrid.push(swiper.virtualSize - swiperSize);
        }
      }
      if (snapGrid.length === 0) { snapGrid = [0]; }
  
      if (params.spaceBetween !== 0) {
        if (swiper.isHorizontal()) {
          if (rtl) { slides.css({ marginLeft: (spaceBetween + "px") }); }
          else { slides.css({ marginRight: (spaceBetween + "px") }); }
        } else { slides.css({ marginBottom: (spaceBetween + "px") }); }
      }
  
      if (params.centerInsufficientSlides) {
        var allSlidesSize = 0;
        slidesSizesGrid.forEach(function (slideSizeValue) {
          allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
        });
        allSlidesSize -= params.spaceBetween;
        if (allSlidesSize < swiperSize) {
          var allSlidesOffset = (swiperSize - allSlidesSize) / 2;
          snapGrid.forEach(function (snap, snapIndex) {
            snapGrid[snapIndex] = snap - allSlidesOffset;
          });
          slidesGrid.forEach(function (snap, snapIndex) {
            slidesGrid[snapIndex] = snap + allSlidesOffset;
          });
        }
      }
  
      Utils.extend(swiper, {
        slides: slides,
        snapGrid: snapGrid,
        slidesGrid: slidesGrid,
        slidesSizesGrid: slidesSizesGrid,
      });
  
      if (slidesLength !== previousSlidesLength) {
        swiper.emit('slidesLengthChange');
      }
      if (snapGrid.length !== previousSnapGridLength) {
        if (swiper.params.watchOverflow) { swiper.checkOverflow(); }
        swiper.emit('snapGridLengthChange');
      }
      if (slidesGrid.length !== previousSlidesGridLength) {
        swiper.emit('slidesGridLengthChange');
      }
  
      if (params.watchSlidesProgress || params.watchSlidesVisibility) {
        swiper.updateSlidesOffset();
      }
    }
  
    function updateAutoHeight (speed) {
      var swiper = this;
      var activeSlides = [];
      var newHeight = 0;
      var i;
      if (typeof speed === 'number') {
        swiper.setTransition(speed);
      } else if (speed === true) {
        swiper.setTransition(swiper.params.speed);
      }
      // Find slides currently in view
      if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
          var index = swiper.activeIndex + i;
          if (index > swiper.slides.length) { break; }
          activeSlides.push(swiper.slides.eq(index)[0]);
        }
      } else {
        activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
      }
  
      // Find new height from highest slide in view
      for (i = 0; i < activeSlides.length; i += 1) {
        if (typeof activeSlides[i] !== 'undefined') {
          var height = activeSlides[i].offsetHeight;
          newHeight = height > newHeight ? height : newHeight;
        }
      }
  
      // Update Height
      if (newHeight) { swiper.$wrapperEl.css('height', (newHeight + "px")); }
    }
  
    function updateSlidesOffset () {
      var swiper = this;
      var slides = swiper.slides;
      for (var i = 0; i < slides.length; i += 1) {
        slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
      }
    }
  
    function updateSlidesProgress (translate) {
      if ( translate === void 0 ) translate = (this && this.translate) || 0;
  
      var swiper = this;
      var params = swiper.params;
  
      var slides = swiper.slides;
      var rtl = swiper.rtlTranslate;
  
      if (slides.length === 0) { return; }
      if (typeof slides[0].swiperSlideOffset === 'undefined') { swiper.updateSlidesOffset(); }
  
      var offsetCenter = -translate;
      if (rtl) { offsetCenter = translate; }
  
      // Visible Slides
      slides.removeClass(params.slideVisibleClass);
  
      swiper.visibleSlidesIndexes = [];
      swiper.visibleSlides = [];
  
      for (var i = 0; i < slides.length; i += 1) {
        var slide = slides[i];
        var slideProgress = (
          (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
        ) / (slide.swiperSlideSize + params.spaceBetween);
        if (params.watchSlidesVisibility) {
          var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
          var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
          var isVisible = (slideBefore >= 0 && slideBefore < swiper.size)
                    || (slideAfter > 0 && slideAfter <= swiper.size)
                    || (slideBefore <= 0 && slideAfter >= swiper.size);
          if (isVisible) {
            swiper.visibleSlides.push(slide);
            swiper.visibleSlidesIndexes.push(i);
            slides.eq(i).addClass(params.slideVisibleClass);
          }
        }
        slide.progress = rtl ? -slideProgress : slideProgress;
      }
      swiper.visibleSlides = $(swiper.visibleSlides);
    }
  
    function updateProgress (translate) {
      if ( translate === void 0 ) translate = (this && this.translate) || 0;
  
      var swiper = this;
      var params = swiper.params;
  
      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
      var progress = swiper.progress;
      var isBeginning = swiper.isBeginning;
      var isEnd = swiper.isEnd;
      var wasBeginning = isBeginning;
      var wasEnd = isEnd;
      if (translatesDiff === 0) {
        progress = 0;
        isBeginning = true;
        isEnd = true;
      } else {
        progress = (translate - swiper.minTranslate()) / (translatesDiff);
        isBeginning = progress <= 0;
        isEnd = progress >= 1;
      }
      Utils.extend(swiper, {
        progress: progress,
        isBeginning: isBeginning,
        isEnd: isEnd,
      });
  
      if (params.watchSlidesProgress || params.watchSlidesVisibility) { swiper.updateSlidesProgress(translate); }
  
      if (isBeginning && !wasBeginning) {
        swiper.emit('reachBeginning toEdge');
      }
      if (isEnd && !wasEnd) {
        swiper.emit('reachEnd toEdge');
      }
      if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
        swiper.emit('fromEdge');
      }
  
      swiper.emit('progress', progress);
    }
  
    function updateSlidesClasses () {
      var swiper = this;
  
      var slides = swiper.slides;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
      var activeIndex = swiper.activeIndex;
      var realIndex = swiper.realIndex;
      var isVirtual = swiper.virtual && params.virtual.enabled;
  
      slides.removeClass(((params.slideActiveClass) + " " + (params.slideNextClass) + " " + (params.slidePrevClass) + " " + (params.slideDuplicateActiveClass) + " " + (params.slideDuplicateNextClass) + " " + (params.slideDuplicatePrevClass)));
  
      var activeSlide;
      if (isVirtual) {
        activeSlide = swiper.$wrapperEl.find(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + activeIndex + "\"]"));
      } else {
        activeSlide = slides.eq(activeIndex);
      }
  
      // Active classes
      activeSlide.addClass(params.slideActiveClass);
  
      if (params.loop) {
        // Duplicate to all looped slides
        if (activeSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl
            .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + realIndex + "\"]"))
            .addClass(params.slideDuplicateActiveClass);
        } else {
          $wrapperEl
            .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]"))
            .addClass(params.slideDuplicateActiveClass);
        }
      }
      // Next Slide
      var nextSlide = activeSlide.nextAll(("." + (params.slideClass))).eq(0).addClass(params.slideNextClass);
      if (params.loop && nextSlide.length === 0) {
        nextSlide = slides.eq(0);
        nextSlide.addClass(params.slideNextClass);
      }
      // Prev Slide
      var prevSlide = activeSlide.prevAll(("." + (params.slideClass))).eq(0).addClass(params.slidePrevClass);
      if (params.loop && prevSlide.length === 0) {
        prevSlide = slides.eq(-1);
        prevSlide.addClass(params.slidePrevClass);
      }
      if (params.loop) {
        // Duplicate to all looped slides
        if (nextSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl
            .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
            .addClass(params.slideDuplicateNextClass);
        } else {
          $wrapperEl
            .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (nextSlide.attr('data-swiper-slide-index')) + "\"]"))
            .addClass(params.slideDuplicateNextClass);
        }
        if (prevSlide.hasClass(params.slideDuplicateClass)) {
          $wrapperEl
            .children(("." + (params.slideClass) + ":not(." + (params.slideDuplicateClass) + ")[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
            .addClass(params.slideDuplicatePrevClass);
        } else {
          $wrapperEl
            .children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + (prevSlide.attr('data-swiper-slide-index')) + "\"]"))
            .addClass(params.slideDuplicatePrevClass);
        }
      }
    }
  
    function updateActiveIndex (newActiveIndex) {
      var swiper = this;
      var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
      var slidesGrid = swiper.slidesGrid;
      var snapGrid = swiper.snapGrid;
      var params = swiper.params;
      var previousIndex = swiper.activeIndex;
      var previousRealIndex = swiper.realIndex;
      var previousSnapIndex = swiper.snapIndex;
      var activeIndex = newActiveIndex;
      var snapIndex;
      if (typeof activeIndex === 'undefined') {
        for (var i = 0; i < slidesGrid.length; i += 1) {
          if (typeof slidesGrid[i + 1] !== 'undefined') {
            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
              activeIndex = i;
            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
              activeIndex = i + 1;
            }
          } else if (translate >= slidesGrid[i]) {
            activeIndex = i;
          }
        }
        // Normalize slideIndex
        if (params.normalizeSlideIndex) {
          if (activeIndex < 0 || typeof activeIndex === 'undefined') { activeIndex = 0; }
        }
      }
      if (snapGrid.indexOf(translate) >= 0) {
        snapIndex = snapGrid.indexOf(translate);
      } else {
        snapIndex = Math.floor(activeIndex / params.slidesPerGroup);
      }
      if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1; }
      if (activeIndex === previousIndex) {
        if (snapIndex !== previousSnapIndex) {
          swiper.snapIndex = snapIndex;
          swiper.emit('snapIndexChange');
        }
        return;
      }
  
      // Get real index
      var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  
      Utils.extend(swiper, {
        snapIndex: snapIndex,
        realIndex: realIndex,
        previousIndex: previousIndex,
        activeIndex: activeIndex,
      });
      swiper.emit('activeIndexChange');
      swiper.emit('snapIndexChange');
      if (previousRealIndex !== realIndex) {
        swiper.emit('realIndexChange');
      }
      swiper.emit('slideChange');
    }
  
    function updateClickedSlide (e) {
      var swiper = this;
      var params = swiper.params;
      var slide = $(e.target).closest(("." + (params.slideClass)))[0];
      var slideFound = false;
      if (slide) {
        for (var i = 0; i < swiper.slides.length; i += 1) {
          if (swiper.slides[i] === slide) { slideFound = true; }
        }
      }
  
      if (slide && slideFound) {
        swiper.clickedSlide = slide;
        if (swiper.virtual && swiper.params.virtual.enabled) {
          swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
        } else {
          swiper.clickedIndex = $(slide).index();
        }
      } else {
        swiper.clickedSlide = undefined;
        swiper.clickedIndex = undefined;
        return;
      }
      if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
        swiper.slideToClickedSlide();
      }
    }
  
    var update = {
      updateSize: updateSize,
      updateSlides: updateSlides,
      updateAutoHeight: updateAutoHeight,
      updateSlidesOffset: updateSlidesOffset,
      updateSlidesProgress: updateSlidesProgress,
      updateProgress: updateProgress,
      updateSlidesClasses: updateSlidesClasses,
      updateActiveIndex: updateActiveIndex,
      updateClickedSlide: updateClickedSlide,
    };
  
    function getTranslate (axis) {
      if ( axis === void 0 ) axis = this.isHorizontal() ? 'x' : 'y';
  
      var swiper = this;
  
      var params = swiper.params;
      var rtl = swiper.rtlTranslate;
      var translate = swiper.translate;
      var $wrapperEl = swiper.$wrapperEl;
  
      if (params.virtualTranslate) {
        return rtl ? -translate : translate;
      }
  
      var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
      if (rtl) { currentTranslate = -currentTranslate; }
  
      return currentTranslate || 0;
    }
  
    function setTranslate (translate, byController) {
      var swiper = this;
      var rtl = swiper.rtlTranslate;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
      var progress = swiper.progress;
      var x = 0;
      var y = 0;
      var z = 0;
  
      if (swiper.isHorizontal()) {
        x = rtl ? -translate : translate;
      } else {
        y = translate;
      }
  
      if (params.roundLengths) {
        x = Math.floor(x);
        y = Math.floor(y);
      }
  
      if (!params.virtualTranslate) {
        if (Support.transforms3d) { $wrapperEl.transform(("translate3d(" + x + "px, " + y + "px, " + z + "px)")); }
        else { $wrapperEl.transform(("translate(" + x + "px, " + y + "px)")); }
      }
      swiper.previousTranslate = swiper.translate;
      swiper.translate = swiper.isHorizontal() ? x : y;
  
      // Check if we need to update progress
      var newProgress;
      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
      if (translatesDiff === 0) {
        newProgress = 0;
      } else {
        newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
      }
      if (newProgress !== progress) {
        swiper.updateProgress(translate);
      }
  
      swiper.emit('setTranslate', swiper.translate, byController);
    }
  
    function minTranslate () {
      return (-this.snapGrid[0]);
    }
  
    function maxTranslate () {
      return (-this.snapGrid[this.snapGrid.length - 1]);
    }
  
    var translate = {
      getTranslate: getTranslate,
      setTranslate: setTranslate,
      minTranslate: minTranslate,
      maxTranslate: maxTranslate,
    };
  
    function setTransition (duration, byController) {
      var swiper = this;
  
      swiper.$wrapperEl.transition(duration);
  
      swiper.emit('setTransition', duration, byController);
    }
  
    function transitionStart (runCallbacks, direction) {
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var activeIndex = swiper.activeIndex;
      var params = swiper.params;
      var previousIndex = swiper.previousIndex;
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
  
      var dir = direction;
      if (!dir) {
        if (activeIndex > previousIndex) { dir = 'next'; }
        else if (activeIndex < previousIndex) { dir = 'prev'; }
        else { dir = 'reset'; }
      }
  
      swiper.emit('transitionStart');
  
      if (runCallbacks && activeIndex !== previousIndex) {
        if (dir === 'reset') {
          swiper.emit('slideResetTransitionStart');
          return;
        }
        swiper.emit('slideChangeTransitionStart');
        if (dir === 'next') {
          swiper.emit('slideNextTransitionStart');
        } else {
          swiper.emit('slidePrevTransitionStart');
        }
      }
    }
  
    function transitionEnd$1 (runCallbacks, direction) {
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var activeIndex = swiper.activeIndex;
      var previousIndex = swiper.previousIndex;
      swiper.animating = false;
      swiper.setTransition(0);
  
      var dir = direction;
      if (!dir) {
        if (activeIndex > previousIndex) { dir = 'next'; }
        else if (activeIndex < previousIndex) { dir = 'prev'; }
        else { dir = 'reset'; }
      }
  
      swiper.emit('transitionEnd');
  
      if (runCallbacks && activeIndex !== previousIndex) {
        if (dir === 'reset') {
          swiper.emit('slideResetTransitionEnd');
          return;
        }
        swiper.emit('slideChangeTransitionEnd');
        if (dir === 'next') {
          swiper.emit('slideNextTransitionEnd');
        } else {
          swiper.emit('slidePrevTransitionEnd');
        }
      }
    }
  
    var transition$1 = {
      setTransition: setTransition,
      transitionStart: transitionStart,
      transitionEnd: transitionEnd$1,
    };
  
    function slideTo (index, speed, runCallbacks, internal) {
      if ( index === void 0 ) index = 0;
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var slideIndex = index;
      if (slideIndex < 0) { slideIndex = 0; }
  
      var params = swiper.params;
      var snapGrid = swiper.snapGrid;
      var slidesGrid = swiper.slidesGrid;
      var previousIndex = swiper.previousIndex;
      var activeIndex = swiper.activeIndex;
      var rtl = swiper.rtlTranslate;
      if (swiper.animating && params.preventInteractionOnTransition) {
        return false;
      }
  
      var snapIndex = Math.floor(slideIndex / params.slidesPerGroup);
      if (snapIndex >= snapGrid.length) { snapIndex = snapGrid.length - 1; }
  
      if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
        swiper.emit('beforeSlideChangeStart');
      }
  
      var translate = -snapGrid[snapIndex];
  
      // Update progress
      swiper.updateProgress(translate);
  
      // Normalize slideIndex
      if (params.normalizeSlideIndex) {
        for (var i = 0; i < slidesGrid.length; i += 1) {
          if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
            slideIndex = i;
          }
        }
      }
      // Directions locks
      if (swiper.initialized && slideIndex !== activeIndex) {
        if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
          return false;
        }
        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
          if ((activeIndex || 0) !== slideIndex) { return false; }
        }
      }
  
      var direction;
      if (slideIndex > activeIndex) { direction = 'next'; }
      else if (slideIndex < activeIndex) { direction = 'prev'; }
      else { direction = 'reset'; }
  
  
      // Update Index
      if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
        swiper.updateActiveIndex(slideIndex);
        // Update Height
        if (params.autoHeight) {
          swiper.updateAutoHeight();
        }
        swiper.updateSlidesClasses();
        if (params.effect !== 'slide') {
          swiper.setTranslate(translate);
        }
        if (direction !== 'reset') {
          swiper.transitionStart(runCallbacks, direction);
          swiper.transitionEnd(runCallbacks, direction);
        }
        return false;
      }
  
      if (speed === 0 || !Support.transition) {
        swiper.setTransition(0);
        swiper.setTranslate(translate);
        swiper.updateActiveIndex(slideIndex);
        swiper.updateSlidesClasses();
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.transitionStart(runCallbacks, direction);
        swiper.transitionEnd(runCallbacks, direction);
      } else {
        swiper.setTransition(speed);
        swiper.setTranslate(translate);
        swiper.updateActiveIndex(slideIndex);
        swiper.updateSlidesClasses();
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.transitionStart(runCallbacks, direction);
        if (!swiper.animating) {
          swiper.animating = true;
          if (!swiper.onSlideToWrapperTransitionEnd) {
            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
              if (!swiper || swiper.destroyed) { return; }
              if (e.target !== this) { return; }
              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
              swiper.onSlideToWrapperTransitionEnd = null;
              delete swiper.onSlideToWrapperTransitionEnd;
              swiper.transitionEnd(runCallbacks, direction);
            };
          }
          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
        }
      }
  
      return true;
    }
  
    function slideToLoop (index, speed, runCallbacks, internal) {
      if ( index === void 0 ) index = 0;
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var newIndex = index;
      if (swiper.params.loop) {
        newIndex += swiper.loopedSlides;
      }
  
      return swiper.slideTo(newIndex, speed, runCallbacks, internal);
    }
  
    /* eslint no-unused-vars: "off" */
    function slideNext (speed, runCallbacks, internal) {
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var params = swiper.params;
      var animating = swiper.animating;
      if (params.loop) {
        if (animating) { return false; }
        swiper.loopFix();
        // eslint-disable-next-line
        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
        return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
      }
      return swiper.slideTo(swiper.activeIndex + params.slidesPerGroup, speed, runCallbacks, internal);
    }
  
    /* eslint no-unused-vars: "off" */
    function slidePrev (speed, runCallbacks, internal) {
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var params = swiper.params;
      var animating = swiper.animating;
      var snapGrid = swiper.snapGrid;
      var slidesGrid = swiper.slidesGrid;
      var rtlTranslate = swiper.rtlTranslate;
  
      if (params.loop) {
        if (animating) { return false; }
        swiper.loopFix();
        // eslint-disable-next-line
        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
      }
      var translate = rtlTranslate ? swiper.translate : -swiper.translate;
      function normalize(val) {
        if (val < 0) { return -Math.floor(Math.abs(val)); }
        return Math.floor(val);
      }
      var normalizedTranslate = normalize(translate);
      var normalizedSnapGrid = snapGrid.map(function (val) { return normalize(val); });
      var normalizedSlidesGrid = slidesGrid.map(function (val) { return normalize(val); });
  
      var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
      var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
      var prevIndex;
      if (typeof prevSnap !== 'undefined') {
        prevIndex = slidesGrid.indexOf(prevSnap);
        if (prevIndex < 0) { prevIndex = swiper.activeIndex - 1; }
      }
      return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
    }
  
    /* eslint no-unused-vars: "off" */
    function slideReset (speed, runCallbacks, internal) {
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
    }
  
    /* eslint no-unused-vars: "off" */
    function slideToClosest (speed, runCallbacks, internal) {
      if ( speed === void 0 ) speed = this.params.speed;
      if ( runCallbacks === void 0 ) runCallbacks = true;
  
      var swiper = this;
      var index = swiper.activeIndex;
      var snapIndex = Math.floor(index / swiper.params.slidesPerGroup);
  
      if (snapIndex < swiper.snapGrid.length - 1) {
        var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  
        var currentSnap = swiper.snapGrid[snapIndex];
        var nextSnap = swiper.snapGrid[snapIndex + 1];
  
        if ((translate - currentSnap) > (nextSnap - currentSnap) / 2) {
          index = swiper.params.slidesPerGroup;
        }
      }
  
      return swiper.slideTo(index, speed, runCallbacks, internal);
    }
  
    function slideToClickedSlide () {
      var swiper = this;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
  
      var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
      var slideToIndex = swiper.clickedIndex;
      var realIndex;
      if (params.loop) {
        if (swiper.animating) { return; }
        realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
        if (params.centeredSlides) {
          if (
            (slideToIndex < swiper.loopedSlides - (slidesPerView / 2))
            || (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
          ) {
            swiper.loopFix();
            slideToIndex = $wrapperEl
              .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
              .eq(0)
              .index();
  
            Utils.nextTick(function () {
              swiper.slideTo(slideToIndex);
            });
          } else {
            swiper.slideTo(slideToIndex);
          }
        } else if (slideToIndex > swiper.slides.length - slidesPerView) {
          swiper.loopFix();
          slideToIndex = $wrapperEl
            .children(("." + (params.slideClass) + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + (params.slideDuplicateClass) + ")"))
            .eq(0)
            .index();
  
          Utils.nextTick(function () {
            swiper.slideTo(slideToIndex);
          });
        } else {
          swiper.slideTo(slideToIndex);
        }
      } else {
        swiper.slideTo(slideToIndex);
      }
    }
  
    var slide = {
      slideTo: slideTo,
      slideToLoop: slideToLoop,
      slideNext: slideNext,
      slidePrev: slidePrev,
      slideReset: slideReset,
      slideToClosest: slideToClosest,
      slideToClickedSlide: slideToClickedSlide,
    };
  
    function loopCreate () {
      var swiper = this;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
      // Remove duplicated slides
      $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass))).remove();
  
      var slides = $wrapperEl.children(("." + (params.slideClass)));
  
      if (params.loopFillGroupWithBlank) {
        var blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
        if (blankSlidesNum !== params.slidesPerGroup) {
          for (var i = 0; i < blankSlidesNum; i += 1) {
            var blankNode = $(doc.createElement('div')).addClass(((params.slideClass) + " " + (params.slideBlankClass)));
            $wrapperEl.append(blankNode);
          }
          slides = $wrapperEl.children(("." + (params.slideClass)));
        }
      }
  
      if (params.slidesPerView === 'auto' && !params.loopedSlides) { params.loopedSlides = slides.length; }
  
      swiper.loopedSlides = parseInt(params.loopedSlides || params.slidesPerView, 10);
      swiper.loopedSlides += params.loopAdditionalSlides;
      if (swiper.loopedSlides > slides.length) {
        swiper.loopedSlides = slides.length;
      }
  
      var prependSlides = [];
      var appendSlides = [];
      slides.each(function (index, el) {
        var slide = $(el);
        if (index < swiper.loopedSlides) { appendSlides.push(el); }
        if (index < slides.length && index >= slides.length - swiper.loopedSlides) { prependSlides.push(el); }
        slide.attr('data-swiper-slide-index', index);
      });
      for (var i$1 = 0; i$1 < appendSlides.length; i$1 += 1) {
        $wrapperEl.append($(appendSlides[i$1].cloneNode(true)).addClass(params.slideDuplicateClass));
      }
      for (var i$2 = prependSlides.length - 1; i$2 >= 0; i$2 -= 1) {
        $wrapperEl.prepend($(prependSlides[i$2].cloneNode(true)).addClass(params.slideDuplicateClass));
      }
    }
  
    function loopFix () {
      var swiper = this;
      var params = swiper.params;
      var activeIndex = swiper.activeIndex;
      var slides = swiper.slides;
      var loopedSlides = swiper.loopedSlides;
      var allowSlidePrev = swiper.allowSlidePrev;
      var allowSlideNext = swiper.allowSlideNext;
      var snapGrid = swiper.snapGrid;
      var rtl = swiper.rtlTranslate;
      var newIndex;
      swiper.allowSlidePrev = true;
      swiper.allowSlideNext = true;
  
      var snapTranslate = -snapGrid[activeIndex];
      var diff = snapTranslate - swiper.getTranslate();
  
  
      // Fix For Negative Oversliding
      if (activeIndex < loopedSlides) {
        newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
        newIndex += loopedSlides;
        var slideChanged = swiper.slideTo(newIndex, 0, false, true);
        if (slideChanged && diff !== 0) {
          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
        }
      } else if ((params.slidesPerView === 'auto' && activeIndex >= loopedSlides * 2) || (activeIndex >= slides.length - loopedSlides)) {
        // Fix For Positive Oversliding
        newIndex = -slides.length + activeIndex + loopedSlides;
        newIndex += loopedSlides;
        var slideChanged$1 = swiper.slideTo(newIndex, 0, false, true);
        if (slideChanged$1 && diff !== 0) {
          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
        }
      }
      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;
    }
  
    function loopDestroy () {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl;
      var params = swiper.params;
      var slides = swiper.slides;
      $wrapperEl.children(("." + (params.slideClass) + "." + (params.slideDuplicateClass) + ",." + (params.slideClass) + "." + (params.slideBlankClass))).remove();
      slides.removeAttr('data-swiper-slide-index');
    }
  
    var loop = {
      loopCreate: loopCreate,
      loopFix: loopFix,
      loopDestroy: loopDestroy,
    };
  
    function setGrabCursor (moving) {
      var swiper = this;
      if (Support.touch || !swiper.params.simulateTouch || (swiper.params.watchOverflow && swiper.isLocked)) { return; }
      var el = swiper.el;
      el.style.cursor = 'move';
      el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
      el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
      el.style.cursor = moving ? 'grabbing' : 'grab';
    }
  
    function unsetGrabCursor () {
      var swiper = this;
      if (Support.touch || (swiper.params.watchOverflow && swiper.isLocked)) { return; }
      swiper.el.style.cursor = '';
    }
  
    var grabCursor = {
      setGrabCursor: setGrabCursor,
      unsetGrabCursor: unsetGrabCursor,
    };
  
    function appendSlide (slides) {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl;
      var params = swiper.params;
      if (params.loop) {
        swiper.loopDestroy();
      }
      if (typeof slides === 'object' && 'length' in slides) {
        for (var i = 0; i < slides.length; i += 1) {
          if (slides[i]) { $wrapperEl.append(slides[i]); }
        }
      } else {
        $wrapperEl.append(slides);
      }
      if (params.loop) {
        swiper.loopCreate();
      }
      if (!(params.observer && Support.observer)) {
        swiper.update();
      }
    }
  
    function prependSlide (slides) {
      var swiper = this;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
      var activeIndex = swiper.activeIndex;
  
      if (params.loop) {
        swiper.loopDestroy();
      }
      var newActiveIndex = activeIndex + 1;
      if (typeof slides === 'object' && 'length' in slides) {
        for (var i = 0; i < slides.length; i += 1) {
          if (slides[i]) { $wrapperEl.prepend(slides[i]); }
        }
        newActiveIndex = activeIndex + slides.length;
      } else {
        $wrapperEl.prepend(slides);
      }
      if (params.loop) {
        swiper.loopCreate();
      }
      if (!(params.observer && Support.observer)) {
        swiper.update();
      }
      swiper.slideTo(newActiveIndex, 0, false);
    }
  
    function addSlide (index, slides) {
      var swiper = this;
      var $wrapperEl = swiper.$wrapperEl;
      var params = swiper.params;
      var activeIndex = swiper.activeIndex;
      var activeIndexBuffer = activeIndex;
      if (params.loop) {
        activeIndexBuffer -= swiper.loopedSlides;
        swiper.loopDestroy();
        swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
      }
      var baseLength = swiper.slides.length;
      if (index <= 0) {
        swiper.prependSlide(slides);
        return;
      }
      if (index >= baseLength) {
        swiper.appendSlide(slides);
        return;
      }
      var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  
      var slidesBuffer = [];
      for (var i = baseLength - 1; i >= index; i -= 1) {
        var currentSlide = swiper.slides.eq(i);
        currentSlide.remove();
        slidesBuffer.unshift(currentSlide);
      }
  
      if (typeof slides === 'object' && 'length' in slides) {
        for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {
          if (slides[i$1]) { $wrapperEl.append(slides[i$1]); }
        }
        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
      } else {
        $wrapperEl.append(slides);
      }
  
      for (var i$2 = 0; i$2 < slidesBuffer.length; i$2 += 1) {
        $wrapperEl.append(slidesBuffer[i$2]);
      }
  
      if (params.loop) {
        swiper.loopCreate();
      }
      if (!(params.observer && Support.observer)) {
        swiper.update();
      }
      if (params.loop) {
        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
      } else {
        swiper.slideTo(newActiveIndex, 0, false);
      }
    }
  
    function removeSlide (slidesIndexes) {
      var swiper = this;
      var params = swiper.params;
      var $wrapperEl = swiper.$wrapperEl;
      var activeIndex = swiper.activeIndex;
  
      var activeIndexBuffer = activeIndex;
      if (params.loop) {
        activeIndexBuffer -= swiper.loopedSlides;
        swiper.loopDestroy();
        swiper.slides = $wrapperEl.children(("." + (params.slideClass)));
      }
      var newActiveIndex = activeIndexBuffer;
      var indexToRemove;
  
      if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
        for (var i = 0; i < slidesIndexes.length; i += 1) {
          indexToRemove = slidesIndexes[i];
          if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
          if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
        }
        newActiveIndex = Math.max(newActiveIndex, 0);
      } else {
        indexToRemove = slidesIndexes;
        if (swiper.slides[indexToRemove]) { swiper.slides.eq(indexToRemove).remove(); }
        if (indexToRemove < newActiveIndex) { newActiveIndex -= 1; }
        newActiveIndex = Math.max(newActiveIndex, 0);
      }
  
      if (params.loop) {
        swiper.loopCreate();
      }
  
      if (!(params.observer && Support.observer)) {
        swiper.update();
      }
      if (params.loop) {
        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
      } else {
        swiper.slideTo(newActiveIndex, 0, false);
      }
    }
  
    function removeAllSlides () {
      var swiper = this;
  
      var slidesIndexes = [];
      for (var i = 0; i < swiper.slides.length; i += 1) {
        slidesIndexes.push(i);
      }
      swiper.removeSlide(slidesIndexes);
    }
  
    var manipulation = {
      appendSlide: appendSlide,
      prependSlide: prependSlide,
      addSlide: addSlide,
      removeSlide: removeSlide,
      removeAllSlides: removeAllSlides,
    };
  
    var Device = (function Device() {
      var ua = win.navigator.userAgent;
  
      var device = {
        ios: false,
        android: false,
        androidChrome: false,
        desktop: false,
        windows: false,
        iphone: false,
        ipod: false,
        ipad: false,
        cordova: win.cordova || win.phonegap,
        phonegap: win.cordova || win.phonegap,
      };
  
      var windows = ua.match(/(Windows Phone);?[\s\/]+([\d.]+)?/); // eslint-disable-line
      var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
      var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
      var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
      var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  
  
      // Windows
      if (windows) {
        device.os = 'windows';
        device.osVersion = windows[2];
        device.windows = true;
      }
      // Android
      if (android && !windows) {
        device.os = 'android';
        device.osVersion = android[2];
        device.android = true;
        device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
      }
      if (ipad || iphone || ipod) {
        device.os = 'ios';
        device.ios = true;
      }
      // iOS
      if (iphone && !ipod) {
        device.osVersion = iphone[2].replace(/_/g, '.');
        device.iphone = true;
      }
      if (ipad) {
        device.osVersion = ipad[2].replace(/_/g, '.');
        device.ipad = true;
      }
      if (ipod) {
        device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
        device.iphone = true;
      }
      // iOS 8+ changed UA
      if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
        if (device.osVersion.split('.')[0] === '10') {
          device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
        }
      }
  
      // Desktop
      device.desktop = !(device.os || device.android || device.webView);
  
      // Webview
      device.webView = (iphone || ipad || ipod) && ua.match(/.*AppleWebKit(?!.*Safari)/i);
  
      // Minimal UI
      if (device.os && device.os === 'ios') {
        var osVersionArr = device.osVersion.split('.');
        var metaViewport = doc.querySelector('meta[name="viewport"]');
        device.minimalUi = !device.webView
          && (ipod || iphone)
          && (osVersionArr[0] * 1 === 7 ? osVersionArr[1] * 1 >= 1 : osVersionArr[0] * 1 > 7)
          && metaViewport && metaViewport.getAttribute('content').indexOf('minimal-ui') >= 0;
      }
  
      // Pixel Ratio
      device.pixelRatio = win.devicePixelRatio || 1;
  
      // Export object
      return device;
    }());
  
    function onTouchStart (event) {
      var swiper = this;
      var data = swiper.touchEventsData;
      var params = swiper.params;
      var touches = swiper.touches;
      if (swiper.animating && params.preventInteractionOnTransition) {
        return;
      }
      var e = event;
      if (e.originalEvent) { e = e.originalEvent; }
      data.isTouchEvent = e.type === 'touchstart';
      if (!data.isTouchEvent && 'which' in e && e.which === 3) { return; }
      if (!data.isTouchEvent && 'button' in e && e.button > 0) { return; }
      if (data.isTouched && data.isMoved) { return; }
      if (params.noSwiping && $(e.target).closest(params.noSwipingSelector ? params.noSwipingSelector : ("." + (params.noSwipingClass)))[0]) {
        swiper.allowClick = true;
        return;
      }
      if (params.swipeHandler) {
        if (!$(e).closest(params.swipeHandler)[0]) { return; }
      }
  
      touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      var startX = touches.currentX;
      var startY = touches.currentY;
  
      // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
  
      var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
      var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
      if (
        edgeSwipeDetection
        && ((startX <= edgeSwipeThreshold)
        || (startX >= win.screen.width - edgeSwipeThreshold))
      ) {
        return;
      }
  
      Utils.extend(data, {
        isTouched: true,
        isMoved: false,
        allowTouchCallbacks: true,
        isScrolling: undefined,
        startMoving: undefined,
      });
  
      touches.startX = startX;
      touches.startY = startY;
      data.touchStartTime = Utils.now();
      swiper.allowClick = true;
      swiper.updateSize();
      swiper.swipeDirection = undefined;
      if (params.threshold > 0) { data.allowThresholdMove = false; }
      if (e.type !== 'touchstart') {
        var preventDefault = true;
        if ($(e.target).is(data.formElements)) { preventDefault = false; }
        if (
          doc.activeElement
          && $(doc.activeElement).is(data.formElements)
          && doc.activeElement !== e.target
        ) {
          doc.activeElement.blur();
        }
  
        var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
        if (params.touchStartForcePreventDefault || shouldPreventDefault) {
          e.preventDefault();
        }
      }
      swiper.emit('touchStart', e);
    }
  
    function onTouchMove (event) {
      var swiper = this;
      var data = swiper.touchEventsData;
      var params = swiper.params;
      var touches = swiper.touches;
      var rtl = swiper.rtlTranslate;
      var e = event;
      if (e.originalEvent) { e = e.originalEvent; }
      if (!data.isTouched) {
        if (data.startMoving && data.isScrolling) {
          swiper.emit('touchMoveOpposite', e);
        }
        return;
      }
      if (data.isTouchEvent && e.type === 'mousemove') { return; }
      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
      if (e.preventedByNestedSwiper) {
        touches.startX = pageX;
        touches.startY = pageY;
        return;
      }
      if (!swiper.allowTouchMove) {
        // isMoved = true;
        swiper.allowClick = false;
        if (data.isTouched) {
          Utils.extend(touches, {
            startX: pageX,
            startY: pageY,
            currentX: pageX,
            currentY: pageY,
          });
          data.touchStartTime = Utils.now();
        }
        return;
      }
      if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
        if (swiper.isVertical()) {
          // Vertical
          if (
            (pageY < touches.startY && swiper.translate <= swiper.maxTranslate())
            || (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
          ) {
            data.isTouched = false;
            data.isMoved = false;
            return;
          }
        } else if (
          (pageX < touches.startX && swiper.translate <= swiper.maxTranslate())
          || (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
        ) {
          return;
        }
      }
      if (data.isTouchEvent && doc.activeElement) {
        if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {
          data.isMoved = true;
          swiper.allowClick = false;
          return;
        }
      }
      if (data.allowTouchCallbacks) {
        swiper.emit('touchMove', e);
      }
      if (e.targetTouches && e.targetTouches.length > 1) { return; }
  
      touches.currentX = pageX;
      touches.currentY = pageY;
  
      var diffX = touches.currentX - touches.startX;
      var diffY = touches.currentY - touches.startY;
      if (swiper.params.threshold && Math.sqrt((Math.pow( diffX, 2 )) + (Math.pow( diffY, 2 ))) < swiper.params.threshold) { return; }
  
      if (typeof data.isScrolling === 'undefined') {
        var touchAngle;
        if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
          data.isScrolling = false;
        } else {
          // eslint-disable-next-line
          if ((diffX * diffX) + (diffY * diffY) >= 25) {
            touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
            data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
          }
        }
      }
      if (data.isScrolling) {
        swiper.emit('touchMoveOpposite', e);
      }
      if (typeof data.startMoving === 'undefined') {
        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
          data.startMoving = true;
        }
      }
      if (data.isScrolling) {
        data.isTouched = false;
        return;
      }
      if (!data.startMoving) {
        return;
      }
      swiper.allowClick = false;
      e.preventDefault();
      if (params.touchMoveStopPropagation && !params.nested) {
        e.stopPropagation();
      }
  
      if (!data.isMoved) {
        if (params.loop) {
          swiper.loopFix();
        }
        data.startTranslate = swiper.getTranslate();
        swiper.setTransition(0);
        if (swiper.animating) {
          swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
        }
        data.allowMomentumBounce = false;
        // Grab Cursor
        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
          swiper.setGrabCursor(true);
        }
        swiper.emit('sliderFirstMove', e);
      }
      swiper.emit('sliderMove', e);
      data.isMoved = true;
  
      var diff = swiper.isHorizontal() ? diffX : diffY;
      touches.diff = diff;
  
      diff *= params.touchRatio;
      if (rtl) { diff = -diff; }
  
      swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
      data.currentTranslate = diff + data.startTranslate;
  
      var disableParentSwiper = true;
      var resistanceRatio = params.resistanceRatio;
      if (params.touchReleaseOnEdges) {
        resistanceRatio = 0;
      }
      if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
        disableParentSwiper = false;
        if (params.resistance) { data.currentTranslate = (swiper.minTranslate() - 1) + (Math.pow( (-swiper.minTranslate() + data.startTranslate + diff), resistanceRatio )); }
      } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
        disableParentSwiper = false;
        if (params.resistance) { data.currentTranslate = (swiper.maxTranslate() + 1) - (Math.pow( (swiper.maxTranslate() - data.startTranslate - diff), resistanceRatio )); }
      }
  
      if (disableParentSwiper) {
        e.preventedByNestedSwiper = true;
      }
  
      // Directions locks
      if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
        data.currentTranslate = data.startTranslate;
      }
      if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
        data.currentTranslate = data.startTranslate;
      }
  
  
      // Threshold
      if (params.threshold > 0) {
        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
          if (!data.allowThresholdMove) {
            data.allowThresholdMove = true;
            touches.startX = touches.currentX;
            touches.startY = touches.currentY;
            data.currentTranslate = data.startTranslate;
            touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
            return;
          }
        } else {
          data.currentTranslate = data.startTranslate;
          return;
        }
      }
  
      if (!params.followFinger) { return; }
  
      // Update active index in free mode
      if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
      if (params.freeMode) {
        // Velocity
        if (data.velocities.length === 0) {
          data.velocities.push({
            position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
            time: data.touchStartTime,
          });
        }
        data.velocities.push({
          position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
          time: Utils.now(),
        });
      }
      // Update progress
      swiper.updateProgress(data.currentTranslate);
      // Update translate
      swiper.setTranslate(data.currentTranslate);
    }
  
    function onTouchEnd (event) {
      var swiper = this;
      var data = swiper.touchEventsData;
  
      var params = swiper.params;
      var touches = swiper.touches;
      var rtl = swiper.rtlTranslate;
      var $wrapperEl = swiper.$wrapperEl;
      var slidesGrid = swiper.slidesGrid;
      var snapGrid = swiper.snapGrid;
      var e = event;
      if (e.originalEvent) { e = e.originalEvent; }
      if (data.allowTouchCallbacks) {
        swiper.emit('touchEnd', e);
      }
      data.allowTouchCallbacks = false;
      if (!data.isTouched) {
        if (data.isMoved && params.grabCursor) {
          swiper.setGrabCursor(false);
        }
        data.isMoved = false;
        data.startMoving = false;
        return;
      }
      // Return Grab Cursor
      if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
        swiper.setGrabCursor(false);
      }
  
      // Time diff
      var touchEndTime = Utils.now();
      var timeDiff = touchEndTime - data.touchStartTime;
  
      // Tap, doubleTap, Click
      if (swiper.allowClick) {
        swiper.updateClickedSlide(e);
        swiper.emit('tap', e);
        if (timeDiff < 300 && (touchEndTime - data.lastClickTime) > 300) {
          if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
          data.clickTimeout = Utils.nextTick(function () {
            if (!swiper || swiper.destroyed) { return; }
            swiper.emit('click', e);
          }, 300);
        }
        if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
          if (data.clickTimeout) { clearTimeout(data.clickTimeout); }
          swiper.emit('doubleTap', e);
        }
      }
  
      data.lastClickTime = Utils.now();
      Utils.nextTick(function () {
        if (!swiper.destroyed) { swiper.allowClick = true; }
      });
  
      if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
        data.isTouched = false;
        data.isMoved = false;
        data.startMoving = false;
        return;
      }
      data.isTouched = false;
      data.isMoved = false;
      data.startMoving = false;
  
      var currentPos;
      if (params.followFinger) {
        currentPos = rtl ? swiper.translate : -swiper.translate;
      } else {
        currentPos = -data.currentTranslate;
      }
  
      if (params.freeMode) {
        if (currentPos < -swiper.minTranslate()) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }
        if (currentPos > -swiper.maxTranslate()) {
          if (swiper.slides.length < snapGrid.length) {
            swiper.slideTo(snapGrid.length - 1);
          } else {
            swiper.slideTo(swiper.slides.length - 1);
          }
          return;
        }
  
        if (params.freeModeMomentum) {
          if (data.velocities.length > 1) {
            var lastMoveEvent = data.velocities.pop();
            var velocityEvent = data.velocities.pop();
  
            var distance = lastMoveEvent.position - velocityEvent.position;
            var time = lastMoveEvent.time - velocityEvent.time;
            swiper.velocity = distance / time;
            swiper.velocity /= 2;
            if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
              swiper.velocity = 0;
            }
            // this implies that the user stopped moving a finger then released.
            // There would be no events with distance zero, so the last event is stale.
            if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
              swiper.velocity = 0;
            }
          } else {
            swiper.velocity = 0;
          }
          swiper.velocity *= params.freeModeMomentumVelocityRatio;
  
          data.velocities.length = 0;
          var momentumDuration = 1000 * params.freeModeMomentumRatio;
          var momentumDistance = swiper.velocity * momentumDuration;
  
          var newPosition = swiper.translate + momentumDistance;
          if (rtl) { newPosition = -newPosition; }
  
          var doBounce = false;
          var afterBouncePosition;
          var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
          var needsLoopFix;
          if (newPosition < swiper.maxTranslate()) {
            if (params.freeModeMomentumBounce) {
              if (newPosition + swiper.maxTranslate() < -bounceAmount) {
                newPosition = swiper.maxTranslate() - bounceAmount;
              }
              afterBouncePosition = swiper.maxTranslate();
              doBounce = true;
              data.allowMomentumBounce = true;
            } else {
              newPosition = swiper.maxTranslate();
            }
            if (params.loop && params.centeredSlides) { needsLoopFix = true; }
          } else if (newPosition > swiper.minTranslate()) {
            if (params.freeModeMomentumBounce) {
              if (newPosition - swiper.minTranslate() > bounceAmount) {
                newPosition = swiper.minTranslate() + bounceAmount;
              }
              afterBouncePosition = swiper.minTranslate();
              doBounce = true;
              data.allowMomentumBounce = true;
            } else {
              newPosition = swiper.minTranslate();
            }
            if (params.loop && params.centeredSlides) { needsLoopFix = true; }
          } else if (params.freeModeSticky) {
            var nextSlide;
            for (var j = 0; j < snapGrid.length; j += 1) {
              if (snapGrid[j] > -newPosition) {
                nextSlide = j;
                break;
              }
            }
  
            if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
              newPosition = snapGrid[nextSlide];
            } else {
              newPosition = snapGrid[nextSlide - 1];
            }
            newPosition = -newPosition;
          }
          if (needsLoopFix) {
            swiper.once('transitionEnd', function () {
              swiper.loopFix();
            });
          }
          // Fix duration
          if (swiper.velocity !== 0) {
            if (rtl) {
              momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
            } else {
              momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
            }
          } else if (params.freeModeSticky) {
            swiper.slideToClosest();
            return;
          }
  
          if (params.freeModeMomentumBounce && doBounce) {
            swiper.updateProgress(afterBouncePosition);
            swiper.setTransition(momentumDuration);
            swiper.setTranslate(newPosition);
            swiper.transitionStart(true, swiper.swipeDirection);
            swiper.animating = true;
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed || !data.allowMomentumBounce) { return; }
              swiper.emit('momentumBounce');
  
              swiper.setTransition(params.speed);
              swiper.setTranslate(afterBouncePosition);
              $wrapperEl.transitionEnd(function () {
                if (!swiper || swiper.destroyed) { return; }
                swiper.transitionEnd();
              });
            });
          } else if (swiper.velocity) {
            swiper.updateProgress(newPosition);
            swiper.setTransition(momentumDuration);
            swiper.setTranslate(newPosition);
            swiper.transitionStart(true, swiper.swipeDirection);
            if (!swiper.animating) {
              swiper.animating = true;
              $wrapperEl.transitionEnd(function () {
                if (!swiper || swiper.destroyed) { return; }
                swiper.transitionEnd();
              });
            }
          } else {
            swiper.updateProgress(newPosition);
          }
  
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        } else if (params.freeModeSticky) {
          swiper.slideToClosest();
          return;
        }
  
        if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
          swiper.updateProgress();
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        }
        return;
      }
  
      // Find current slide
      var stopIndex = 0;
      var groupSize = swiper.slidesSizesGrid[0];
      for (var i = 0; i < slidesGrid.length; i += params.slidesPerGroup) {
        if (typeof slidesGrid[i + params.slidesPerGroup] !== 'undefined') {
          if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + params.slidesPerGroup]) {
            stopIndex = i;
            groupSize = slidesGrid[i + params.slidesPerGroup] - slidesGrid[i];
          }
        } else if (currentPos >= slidesGrid[i]) {
          stopIndex = i;
          groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
        }
      }
  
      // Find current slide size
      var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  
      if (timeDiff > params.longSwipesMs) {
        // Long touches
        if (!params.longSwipes) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }
        if (swiper.swipeDirection === 'next') {
          if (ratio >= params.longSwipesRatio) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
          else { swiper.slideTo(stopIndex); }
        }
        if (swiper.swipeDirection === 'prev') {
          if (ratio > (1 - params.longSwipesRatio)) { swiper.slideTo(stopIndex + params.slidesPerGroup); }
          else { swiper.slideTo(stopIndex); }
        }
      } else {
        // Short swipes
        if (!params.shortSwipes) {
          swiper.slideTo(swiper.activeIndex);
          return;
        }
        if (swiper.swipeDirection === 'next') {
          swiper.slideTo(stopIndex + params.slidesPerGroup);
        }
        if (swiper.swipeDirection === 'prev') {
          swiper.slideTo(stopIndex);
        }
      }
    }
  
    function onResize () {
      var swiper = this;
  
      var params = swiper.params;
      var el = swiper.el;
  
      if (el && el.offsetWidth === 0) { return; }
  
      // Breakpoints
      if (params.breakpoints) {
        swiper.setBreakpoint();
      }
  
      // Save locks
      var allowSlideNext = swiper.allowSlideNext;
      var allowSlidePrev = swiper.allowSlidePrev;
      var snapGrid = swiper.snapGrid;
  
      // Disable locks on resize
      swiper.allowSlideNext = true;
      swiper.allowSlidePrev = true;
  
      swiper.updateSize();
      swiper.updateSlides();
  
      if (params.freeMode) {
        var newTranslate = Math.min(Math.max(swiper.translate, swiper.maxTranslate()), swiper.minTranslate());
        swiper.setTranslate(newTranslate);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
  
        if (params.autoHeight) {
          swiper.updateAutoHeight();
        }
      } else {
        swiper.updateSlidesClasses();
        if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
          swiper.slideTo(swiper.slides.length - 1, 0, false, true);
        } else {
          swiper.slideTo(swiper.activeIndex, 0, false, true);
        }
      }
      // Return locks after resize
      swiper.allowSlidePrev = allowSlidePrev;
      swiper.allowSlideNext = allowSlideNext;
  
      if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
        swiper.checkOverflow();
      }
    }
  
    function onClick (e) {
      var swiper = this;
      if (!swiper.allowClick) {
        if (swiper.params.preventClicks) { e.preventDefault(); }
        if (swiper.params.preventClicksPropagation && swiper.animating) {
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
    }
  
    function attachEvents() {
      var swiper = this;
      var params = swiper.params;
      var touchEvents = swiper.touchEvents;
      var el = swiper.el;
      var wrapperEl = swiper.wrapperEl;
  
      {
        swiper.onTouchStart = onTouchStart.bind(swiper);
        swiper.onTouchMove = onTouchMove.bind(swiper);
        swiper.onTouchEnd = onTouchEnd.bind(swiper);
      }
  
      swiper.onClick = onClick.bind(swiper);
  
      var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
      var capture = !!params.nested;
  
      // Touch Events
      {
        if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
          target.addEventListener(touchEvents.start, swiper.onTouchStart, false);
          doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
          doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
        } else {
          if (Support.touch) {
            var passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
            target.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
            target.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? { passive: false, capture: capture } : capture);
            target.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
          }
          if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
            target.addEventListener('mousedown', swiper.onTouchStart, false);
            doc.addEventListener('mousemove', swiper.onTouchMove, capture);
            doc.addEventListener('mouseup', swiper.onTouchEnd, false);
          }
        }
        // Prevent Links Clicks
        if (params.preventClicks || params.preventClicksPropagation) {
          target.addEventListener('click', swiper.onClick, true);
        }
      }
  
      // Resize handler
      swiper.on((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize, true);
    }
  
    function detachEvents() {
      var swiper = this;
  
      var params = swiper.params;
      var touchEvents = swiper.touchEvents;
      var el = swiper.el;
      var wrapperEl = swiper.wrapperEl;
  
      var target = params.touchEventsTarget === 'container' ? el : wrapperEl;
      var capture = !!params.nested;
  
      // Touch Events
      {
        if (!Support.touch && (Support.pointerEvents || Support.prefixedPointerEvents)) {
          target.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
          doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
          doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
        } else {
          if (Support.touch) {
            var passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
            target.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
            target.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
            target.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
          }
          if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
            target.removeEventListener('mousedown', swiper.onTouchStart, false);
            doc.removeEventListener('mousemove', swiper.onTouchMove, capture);
            doc.removeEventListener('mouseup', swiper.onTouchEnd, false);
          }
        }
        // Prevent Links Clicks
        if (params.preventClicks || params.preventClicksPropagation) {
          target.removeEventListener('click', swiper.onClick, true);
        }
      }
  
      // Resize handler
      swiper.off((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize);
    }
  
    var events = {
      attachEvents: attachEvents,
      detachEvents: detachEvents,
    };
  
    function setBreakpoint () {
      var swiper = this;
      var activeIndex = swiper.activeIndex;
      var initialized = swiper.initialized;
      var loopedSlides = swiper.loopedSlides; if ( loopedSlides === void 0 ) loopedSlides = 0;
      var params = swiper.params;
      var breakpoints = params.breakpoints;
      if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) { return; }
  
      // Set breakpoint for window width and update parameters
      var breakpoint = swiper.getBreakpoint(breakpoints);
  
      if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
        var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
        if (breakpointOnlyParams) {
          ['slidesPerView', 'spaceBetween', 'slidesPerGroup'].forEach(function (param) {
            var paramValue = breakpointOnlyParams[param];
            if (typeof paramValue === 'undefined') { return; }
            if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
              breakpointOnlyParams[param] = 'auto';
            } else if (param === 'slidesPerView') {
              breakpointOnlyParams[param] = parseFloat(paramValue);
            } else {
              breakpointOnlyParams[param] = parseInt(paramValue, 10);
            }
          });
        }
  
        var breakpointParams = breakpointOnlyParams || swiper.originalParams;
        var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
        var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);
  
        if (directionChanged && initialized) {
          swiper.changeDirection();
        }
  
        Utils.extend(swiper.params, breakpointParams);
  
        Utils.extend(swiper, {
          allowTouchMove: swiper.params.allowTouchMove,
          allowSlideNext: swiper.params.allowSlideNext,
          allowSlidePrev: swiper.params.allowSlidePrev,
        });
  
        swiper.currentBreakpoint = breakpoint;
  
        if (needsReLoop && initialized) {
          swiper.loopDestroy();
          swiper.loopCreate();
          swiper.updateSlides();
          swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);
        }
  
        swiper.emit('breakpoint', breakpointParams);
      }
    }
  
    function getBreakpoint (breakpoints) {
      var swiper = this;
      // Get breakpoint for window width
      if (!breakpoints) { return undefined; }
      var breakpoint = false;
      var points = [];
      Object.keys(breakpoints).forEach(function (point) {
        points.push(point);
      });
      points.sort(function (a, b) { return parseInt(a, 10) - parseInt(b, 10); });
      for (var i = 0; i < points.length; i += 1) {
        var point = points[i];
        if (swiper.params.breakpointsInverse) {
          if (point <= win.innerWidth) {
            breakpoint = point;
          }
        } else if (point >= win.innerWidth && !breakpoint) {
          breakpoint = point;
        }
      }
      return breakpoint || 'max';
    }
  
    var breakpoints = { setBreakpoint: setBreakpoint, getBreakpoint: getBreakpoint };
  
    function addClasses () {
      var swiper = this;
      var classNames = swiper.classNames;
      var params = swiper.params;
      var rtl = swiper.rtl;
      var $el = swiper.$el;
      var suffixes = [];
  
      suffixes.push('initialized');
      suffixes.push(params.direction);
  
      if (params.freeMode) {
        suffixes.push('free-mode');
      }
      if (!Support.flexbox) {
        suffixes.push('no-flexbox');
      }
      if (params.autoHeight) {
        suffixes.push('autoheight');
      }
      if (rtl) {
        suffixes.push('rtl');
      }
      if (params.slidesPerColumn > 1) {
        suffixes.push('multirow');
      }
      if (Device.android) {
        suffixes.push('android');
      }
      if (Device.ios) {
        suffixes.push('ios');
      }
      // WP8 Touch Events Fix
      if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
        suffixes.push(("wp8-" + (params.direction)));
      }
  
      suffixes.forEach(function (suffix) {
        classNames.push(params.containerModifierClass + suffix);
      });
  
      $el.addClass(classNames.join(' '));
    }
  
    function removeClasses () {
      var swiper = this;
      var $el = swiper.$el;
      var classNames = swiper.classNames;
  
      $el.removeClass(classNames.join(' '));
    }
  
    var classes = { addClasses: addClasses, removeClasses: removeClasses };
  
    function loadImage (imageEl, src, srcset, sizes, checkForComplete, callback) {
      var image;
      function onReady() {
        if (callback) { callback(); }
      }
      if (!imageEl.complete || !checkForComplete) {
        if (src) {
          image = new win.Image();
          image.onload = onReady;
          image.onerror = onReady;
          if (sizes) {
            image.sizes = sizes;
          }
          if (srcset) {
            image.srcset = srcset;
          }
          if (src) {
            image.src = src;
          }
        } else {
          onReady();
        }
      } else {
        // image already loaded...
        onReady();
      }
    }
  
    function preloadImages () {
      var swiper = this;
      swiper.imagesToLoad = swiper.$el.find('img');
      function onReady() {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) { return; }
        if (swiper.imagesLoaded !== undefined) { swiper.imagesLoaded += 1; }
        if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
          if (swiper.params.updateOnImagesReady) { swiper.update(); }
          swiper.emit('imagesReady');
        }
      }
      for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
        var imageEl = swiper.imagesToLoad[i];
        swiper.loadImage(
          imageEl,
          imageEl.currentSrc || imageEl.getAttribute('src'),
          imageEl.srcset || imageEl.getAttribute('srcset'),
          imageEl.sizes || imageEl.getAttribute('sizes'),
          true,
          onReady
        );
      }
    }
  
    var images = {
      loadImage: loadImage,
      preloadImages: preloadImages,
    };
  
    function checkOverflow() {
      var swiper = this;
      var wasLocked = swiper.isLocked;
  
      swiper.isLocked = swiper.snapGrid.length === 1;
      swiper.allowSlideNext = !swiper.isLocked;
      swiper.allowSlidePrev = !swiper.isLocked;
  
      // events
      if (wasLocked !== swiper.isLocked) { swiper.emit(swiper.isLocked ? 'lock' : 'unlock'); }
  
      if (wasLocked && wasLocked !== swiper.isLocked) {
        swiper.isEnd = false;
        swiper.navigation.update();
      }
    }
  
    var checkOverflow$1 = { checkOverflow: checkOverflow };
  
    var defaults = {
      init: true,
      direction: 'horizontal',
      touchEventsTarget: 'container',
      initialSlide: 0,
      speed: 300,
      //
      preventInteractionOnTransition: false,
  
      // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
      edgeSwipeDetection: false,
      edgeSwipeThreshold: 20,
  
      // Free mode
      freeMode: false,
      freeModeMomentum: true,
      freeModeMomentumRatio: 1,
      freeModeMomentumBounce: true,
      freeModeMomentumBounceRatio: 1,
      freeModeMomentumVelocityRatio: 1,
      freeModeSticky: false,
      freeModeMinimumVelocity: 0.02,
  
      // Autoheight
      autoHeight: false,
  
      // Set wrapper width
      setWrapperSize: false,
  
      // Virtual Translate
      virtualTranslate: false,
  
      // Effects
      effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  
      // Breakpoints
      breakpoints: undefined,
      breakpointsInverse: false,
  
      // Slides grid
      spaceBetween: 0,
      slidesPerView: 1,
      slidesPerColumn: 1,
      slidesPerColumnFill: 'column',
      slidesPerGroup: 1,
      centeredSlides: false,
      slidesOffsetBefore: 0, // in px
      slidesOffsetAfter: 0, // in px
      normalizeSlideIndex: true,
      centerInsufficientSlides: false,
  
      // Disable swiper and hide navigation when container not overflow
      watchOverflow: false,
  
      // Round length
      roundLengths: false,
  
      // Touches
      touchRatio: 1,
      touchAngle: 45,
      simulateTouch: true,
      shortSwipes: true,
      longSwipes: true,
      longSwipesRatio: 0.5,
      longSwipesMs: 300,
      followFinger: true,
      allowTouchMove: true,
      threshold: 0,
      touchMoveStopPropagation: true,
      touchStartPreventDefault: true,
      touchStartForcePreventDefault: false,
      touchReleaseOnEdges: false,
  
      // Unique Navigation Elements
      uniqueNavElements: true,
  
      // Resistance
      resistance: true,
      resistanceRatio: 0.85,
  
      // Progress
      watchSlidesProgress: false,
      watchSlidesVisibility: false,
  
      // Cursor
      grabCursor: false,
  
      // Clicks
      preventClicks: true,
      preventClicksPropagation: true,
      slideToClickedSlide: false,
  
      // Images
      preloadImages: true,
      updateOnImagesReady: true,
  
      // loop
      loop: false,
      loopAdditionalSlides: 0,
      loopedSlides: null,
      loopFillGroupWithBlank: false,
  
      // Swiping/no swiping
      allowSlidePrev: true,
      allowSlideNext: true,
      swipeHandler: null, // '.swipe-handler',
      noSwiping: true,
      noSwipingClass: 'swiper-no-swiping',
      noSwipingSelector: null,
  
      // Passive Listeners
      passiveListeners: true,
  
      // NS
      containerModifierClass: 'swiper-container-', // NEW
      slideClass: 'swiper-slide',
      slideBlankClass: 'swiper-slide-invisible-blank',
      slideActiveClass: 'swiper-slide-active',
      slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
      slideVisibleClass: 'swiper-slide-visible',
      slideDuplicateClass: 'swiper-slide-duplicate',
      slideNextClass: 'swiper-slide-next',
      slideDuplicateNextClass: 'swiper-slide-duplicate-next',
      slidePrevClass: 'swiper-slide-prev',
      slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
      wrapperClass: 'swiper-wrapper',
  
      // Callbacks
      runCallbacksOnInit: true,
    };
  
    /* eslint no-param-reassign: "off" */
  
    var prototypes = {
      update: update,
      translate: translate,
      transition: transition$1,
      slide: slide,
      loop: loop,
      grabCursor: grabCursor,
      manipulation: manipulation,
      events: events,
      breakpoints: breakpoints,
      checkOverflow: checkOverflow$1,
      classes: classes,
      images: images,
    };
  
    var extendedDefaults = {};
  
    var Swiper = /*@__PURE__*/(function (SwiperClass) {
      function Swiper() {
        var assign;
  
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];
        var el;
        var params;
        if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
          params = args[0];
        } else {
          (assign = args, el = assign[0], params = assign[1]);
        }
        if (!params) { params = {}; }
  
        params = Utils.extend({}, params);
        if (el && !params.el) { params.el = el; }
  
        SwiperClass.call(this, params);
  
        Object.keys(prototypes).forEach(function (prototypeGroup) {
          Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
            if (!Swiper.prototype[protoMethod]) {
              Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
            }
          });
        });
  
        // Swiper Instance
        var swiper = this;
        if (typeof swiper.modules === 'undefined') {
          swiper.modules = {};
        }
        Object.keys(swiper.modules).forEach(function (moduleName) {
          var module = swiper.modules[moduleName];
          if (module.params) {
            var moduleParamName = Object.keys(module.params)[0];
            var moduleParams = module.params[moduleParamName];
            if (typeof moduleParams !== 'object' || moduleParams === null) { return; }
            if (!(moduleParamName in params && 'enabled' in moduleParams)) { return; }
            if (params[moduleParamName] === true) {
              params[moduleParamName] = { enabled: true };
            }
            if (
              typeof params[moduleParamName] === 'object'
              && !('enabled' in params[moduleParamName])
            ) {
              params[moduleParamName].enabled = true;
            }
            if (!params[moduleParamName]) { params[moduleParamName] = { enabled: false }; }
          }
        });
  
        // Extend defaults with modules params
        var swiperParams = Utils.extend({}, defaults);
        swiper.useModulesParams(swiperParams);
  
        // Extend defaults with passed params
        swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
        swiper.originalParams = Utils.extend({}, swiper.params);
        swiper.passedParams = Utils.extend({}, params);
  
        // Save Dom lib
        swiper.$ = $;
  
        // Find el
        var $el = $(swiper.params.el);
        el = $el[0];
  
        if (!el) {
          return undefined;
        }
  
        if ($el.length > 1) {
          var swipers = [];
          $el.each(function (index, containerEl) {
            var newParams = Utils.extend({}, params, { el: containerEl });
            swipers.push(new Swiper(newParams));
          });
          return swipers;
        }
  
        el.swiper = swiper;
        $el.data('swiper', swiper);
  
        // Find Wrapper
        var $wrapperEl = $el.children(("." + (swiper.params.wrapperClass)));
  
        // Extend Swiper
        Utils.extend(swiper, {
          $el: $el,
          el: el,
          $wrapperEl: $wrapperEl,
          wrapperEl: $wrapperEl[0],
  
          // Classes
          classNames: [],
  
          // Slides
          slides: $(),
          slidesGrid: [],
          snapGrid: [],
          slidesSizesGrid: [],
  
          // isDirection
          isHorizontal: function isHorizontal() {
            return swiper.params.direction === 'horizontal';
          },
          isVertical: function isVertical() {
            return swiper.params.direction === 'vertical';
          },
          // RTL
          rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
          rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
          wrongRTL: $wrapperEl.css('display') === '-webkit-box',
  
          // Indexes
          activeIndex: 0,
          realIndex: 0,
  
          //
          isBeginning: true,
          isEnd: false,
  
          // Props
          translate: 0,
          previousTranslate: 0,
          progress: 0,
          velocity: 0,
          animating: false,
  
          // Locks
          allowSlideNext: swiper.params.allowSlideNext,
          allowSlidePrev: swiper.params.allowSlidePrev,
  
          // Touch Events
          touchEvents: (function touchEvents() {
            var touch = ['touchstart', 'touchmove', 'touchend'];
            var desktop = ['mousedown', 'mousemove', 'mouseup'];
            if (Support.pointerEvents) {
              desktop = ['pointerdown', 'pointermove', 'pointerup'];
            } else if (Support.prefixedPointerEvents) {
              desktop = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp'];
            }
            swiper.touchEventsTouch = {
              start: touch[0],
              move: touch[1],
              end: touch[2],
            };
            swiper.touchEventsDesktop = {
              start: desktop[0],
              move: desktop[1],
              end: desktop[2],
            };
            return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
          }()),
          touchEventsData: {
            isTouched: undefined,
            isMoved: undefined,
            allowTouchCallbacks: undefined,
            touchStartTime: undefined,
            isScrolling: undefined,
            currentTranslate: undefined,
            startTranslate: undefined,
            allowThresholdMove: undefined,
            // Form elements to match
            formElements: 'input, select, option, textarea, button, video',
            // Last click time
            lastClickTime: Utils.now(),
            clickTimeout: undefined,
            // Velocities
            velocities: [],
            allowMomentumBounce: undefined,
            isTouchEvent: undefined,
            startMoving: undefined,
          },
  
          // Clicks
          allowClick: true,
  
          // Touches
          allowTouchMove: swiper.params.allowTouchMove,
  
          touches: {
            startX: 0,
            startY: 0,
            currentX: 0,
            currentY: 0,
            diff: 0,
          },
  
          // Images
          imagesToLoad: [],
          imagesLoaded: 0,
  
        });
  
        // Install Modules
        swiper.useModules();
  
        // Init
        if (swiper.params.init) {
          swiper.init();
        }
  
        // Return app instance
        return swiper;
      }
  
      if ( SwiperClass ) Swiper.__proto__ = SwiperClass;
      Swiper.prototype = Object.create( SwiperClass && SwiperClass.prototype );
      Swiper.prototype.constructor = Swiper;
  
      var staticAccessors = { extendedDefaults: { configurable: true },defaults: { configurable: true },Class: { configurable: true },$: { configurable: true } };
  
      Swiper.prototype.slidesPerViewDynamic = function slidesPerViewDynamic () {
        var swiper = this;
        var params = swiper.params;
        var slides = swiper.slides;
        var slidesGrid = swiper.slidesGrid;
        var swiperSize = swiper.size;
        var activeIndex = swiper.activeIndex;
        var spv = 1;
        if (params.centeredSlides) {
          var slideSize = slides[activeIndex].swiperSlideSize;
          var breakLoop;
          for (var i = activeIndex + 1; i < slides.length; i += 1) {
            if (slides[i] && !breakLoop) {
              slideSize += slides[i].swiperSlideSize;
              spv += 1;
              if (slideSize > swiperSize) { breakLoop = true; }
            }
          }
          for (var i$1 = activeIndex - 1; i$1 >= 0; i$1 -= 1) {
            if (slides[i$1] && !breakLoop) {
              slideSize += slides[i$1].swiperSlideSize;
              spv += 1;
              if (slideSize > swiperSize) { breakLoop = true; }
            }
          }
        } else {
          for (var i$2 = activeIndex + 1; i$2 < slides.length; i$2 += 1) {
            if (slidesGrid[i$2] - slidesGrid[activeIndex] < swiperSize) {
              spv += 1;
            }
          }
        }
        return spv;
      };
  
      Swiper.prototype.update = function update () {
        var swiper = this;
        if (!swiper || swiper.destroyed) { return; }
        var snapGrid = swiper.snapGrid;
        var params = swiper.params;
        // Breakpoints
        if (params.breakpoints) {
          swiper.setBreakpoint();
        }
        swiper.updateSize();
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();
  
        function setTranslate() {
          var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
          var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
          swiper.setTranslate(newTranslate);
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
        }
        var translated;
        if (swiper.params.freeMode) {
          setTranslate();
          if (swiper.params.autoHeight) {
            swiper.updateAutoHeight();
          }
        } else {
          if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
            translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
          } else {
            translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
          }
          if (!translated) {
            setTranslate();
          }
        }
        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
          swiper.checkOverflow();
        }
        swiper.emit('update');
      };
  
      Swiper.prototype.changeDirection = function changeDirection (newDirection, needUpdate) {
        if ( needUpdate === void 0 ) needUpdate = true;
  
        var swiper = this;
        var currentDirection = swiper.params.direction;
        if (!newDirection) {
          // eslint-disable-next-line
          newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
        }
        if ((newDirection === currentDirection) || (newDirection !== 'horizontal' && newDirection !== 'vertical')) {
          return swiper;
        }
  
        if (currentDirection === 'vertical') {
          swiper.$el
            .removeClass(((swiper.params.containerModifierClass) + "vertical wp8-vertical"))
            .addClass(("" + (swiper.params.containerModifierClass) + newDirection));
  
          if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
            swiper.$el.addClass(((swiper.params.containerModifierClass) + "wp8-" + newDirection));
          }
        }
        if (currentDirection === 'horizontal') {
          swiper.$el
            .removeClass(((swiper.params.containerModifierClass) + "horizontal wp8-horizontal"))
            .addClass(("" + (swiper.params.containerModifierClass) + newDirection));
  
          if ((Browser.isIE || Browser.isEdge) && (Support.pointerEvents || Support.prefixedPointerEvents)) {
            swiper.$el.addClass(((swiper.params.containerModifierClass) + "wp8-" + newDirection));
          }
        }
  
        swiper.params.direction = newDirection;
  
        swiper.slides.each(function (slideIndex, slideEl) {
          if (newDirection === 'vertical') {
            slideEl.style.width = '';
          } else {
            slideEl.style.height = '';
          }
        });
  
        swiper.emit('changeDirection');
        if (needUpdate) { swiper.update(); }
  
        return swiper;
      };
  
      Swiper.prototype.init = function init () {
        var swiper = this;
        if (swiper.initialized) { return; }
  
        swiper.emit('beforeInit');
  
        // Set breakpoint
        if (swiper.params.breakpoints) {
          swiper.setBreakpoint();
        }
  
        // Add Classes
        swiper.addClasses();
  
        // Create loop
        if (swiper.params.loop) {
          swiper.loopCreate();
        }
  
        // Update size
        swiper.updateSize();
  
        // Update slides
        swiper.updateSlides();
  
        if (swiper.params.watchOverflow) {
          swiper.checkOverflow();
        }
  
        // Set Grab Cursor
        if (swiper.params.grabCursor) {
          swiper.setGrabCursor();
        }
  
        if (swiper.params.preloadImages) {
          swiper.preloadImages();
        }
  
        // Slide To Initial Slide
        if (swiper.params.loop) {
          swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
        } else {
          swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
        }
  
        // Attach events
        swiper.attachEvents();
  
        // Init Flag
        swiper.initialized = true;
  
        // Emit
        swiper.emit('init');
      };
  
      Swiper.prototype.destroy = function destroy (deleteInstance, cleanStyles) {
        if ( deleteInstance === void 0 ) deleteInstance = true;
        if ( cleanStyles === void 0 ) cleanStyles = true;
  
        var swiper = this;
        var params = swiper.params;
        var $el = swiper.$el;
        var $wrapperEl = swiper.$wrapperEl;
        var slides = swiper.slides;
  
        if (typeof swiper.params === 'undefined' || swiper.destroyed) {
          return null;
        }
  
        swiper.emit('beforeDestroy');
  
        // Init Flag
        swiper.initialized = false;
  
        // Detach events
        swiper.detachEvents();
  
        // Destroy loop
        if (params.loop) {
          swiper.loopDestroy();
        }
  
        // Cleanup styles
        if (cleanStyles) {
          swiper.removeClasses();
          $el.removeAttr('style');
          $wrapperEl.removeAttr('style');
          if (slides && slides.length) {
            slides
              .removeClass([
                params.slideVisibleClass,
                params.slideActiveClass,
                params.slideNextClass,
                params.slidePrevClass ].join(' '))
              .removeAttr('style')
              .removeAttr('data-swiper-slide-index')
              .removeAttr('data-swiper-column')
              .removeAttr('data-swiper-row');
          }
        }
  
        swiper.emit('destroy');
  
        // Detach emitter events
        Object.keys(swiper.eventsListeners).forEach(function (eventName) {
          swiper.off(eventName);
        });
  
        if (deleteInstance !== false) {
          swiper.$el[0].swiper = null;
          swiper.$el.data('swiper', null);
          Utils.deleteProps(swiper);
        }
        swiper.destroyed = true;
  
        return null;
      };
  
      Swiper.extendDefaults = function extendDefaults (newDefaults) {
        Utils.extend(extendedDefaults, newDefaults);
      };
  
      staticAccessors.extendedDefaults.get = function () {
        return extendedDefaults;
      };
  
      staticAccessors.defaults.get = function () {
        return defaults;
      };
  
      staticAccessors.Class.get = function () {
        return SwiperClass;
      };
  
      staticAccessors.$.get = function () {
        return $;
      };
  
      Object.defineProperties( Swiper, staticAccessors );
  
      return Swiper;
    }(SwiperClass));
  
    var Device$1 = {
      name: 'device',
      proto: {
        device: Device,
      },
      static: {
        device: Device,
      },
    };
  
    var Support$1 = {
      name: 'support',
      proto: {
        support: Support,
      },
      static: {
        support: Support,
      },
    };
  
    var Browser$1 = {
      name: 'browser',
      proto: {
        browser: Browser,
      },
      static: {
        browser: Browser,
      },
    };
  
    var Resize = {
      name: 'resize',
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          resize: {
            resizeHandler: function resizeHandler() {
              if (!swiper || swiper.destroyed || !swiper.initialized) { return; }
              swiper.emit('beforeResize');
              swiper.emit('resize');
            },
            orientationChangeHandler: function orientationChangeHandler() {
              if (!swiper || swiper.destroyed || !swiper.initialized) { return; }
              swiper.emit('orientationchange');
            },
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          // Emit resize
          win.addEventListener('resize', swiper.resize.resizeHandler);
  
          // Emit orientationchange
          win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
        },
        destroy: function destroy() {
          var swiper = this;
          win.removeEventListener('resize', swiper.resize.resizeHandler);
          win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
        },
      },
    };
  
    var Observer = {
      func: win.MutationObserver || win.WebkitMutationObserver,
      attach: function attach(target, options) {
        if ( options === void 0 ) options = {};
  
        var swiper = this;
  
        var ObserverFunc = Observer.func;
        var observer = new ObserverFunc(function (mutations) {
          // The observerUpdate event should only be triggered
          // once despite the number of mutations.  Additional
          // triggers are redundant and are very costly
          if (mutations.length === 1) {
            swiper.emit('observerUpdate', mutations[0]);
            return;
          }
          var observerUpdate = function observerUpdate() {
            swiper.emit('observerUpdate', mutations[0]);
          };
  
          if (win.requestAnimationFrame) {
            win.requestAnimationFrame(observerUpdate);
          } else {
            win.setTimeout(observerUpdate, 0);
          }
        });
  
        observer.observe(target, {
          attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
          childList: typeof options.childList === 'undefined' ? true : options.childList,
          characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
        });
  
        swiper.observer.observers.push(observer);
      },
      init: function init() {
        var swiper = this;
        if (!Support.observer || !swiper.params.observer) { return; }
        if (swiper.params.observeParents) {
          var containerParents = swiper.$el.parents();
          for (var i = 0; i < containerParents.length; i += 1) {
            swiper.observer.attach(containerParents[i]);
          }
        }
        // Observe container
        swiper.observer.attach(swiper.$el[0], { childList: swiper.params.observeSlideChildren });
  
        // Observe wrapper
        swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });
      },
      destroy: function destroy() {
        var swiper = this;
        swiper.observer.observers.forEach(function (observer) {
          observer.disconnect();
        });
        swiper.observer.observers = [];
      },
    };
  
    var Observer$1 = {
      name: 'observer',
      params: {
        observer: false,
        observeParents: false,
        observeSlideChildren: false,
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          observer: {
            init: Observer.init.bind(swiper),
            attach: Observer.attach.bind(swiper),
            destroy: Observer.destroy.bind(swiper),
            observers: [],
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          swiper.observer.init();
        },
        destroy: function destroy() {
          var swiper = this;
          swiper.observer.destroy();
        },
      },
    };
  
    var Virtual = {
      update: function update(force) {
        var swiper = this;
        var ref = swiper.params;
        var slidesPerView = ref.slidesPerView;
        var slidesPerGroup = ref.slidesPerGroup;
        var centeredSlides = ref.centeredSlides;
        var ref$1 = swiper.params.virtual;
        var addSlidesBefore = ref$1.addSlidesBefore;
        var addSlidesAfter = ref$1.addSlidesAfter;
        var ref$2 = swiper.virtual;
        var previousFrom = ref$2.from;
        var previousTo = ref$2.to;
        var slides = ref$2.slides;
        var previousSlidesGrid = ref$2.slidesGrid;
        var renderSlide = ref$2.renderSlide;
        var previousOffset = ref$2.offset;
        swiper.updateActiveIndex();
        var activeIndex = swiper.activeIndex || 0;
  
        var offsetProp;
        if (swiper.rtlTranslate) { offsetProp = 'right'; }
        else { offsetProp = swiper.isHorizontal() ? 'left' : 'top'; }
  
        var slidesAfter;
        var slidesBefore;
        if (centeredSlides) {
          slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
          slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
        } else {
          slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesBefore;
          slidesBefore = slidesPerGroup + addSlidesAfter;
        }
        var from = Math.max((activeIndex || 0) - slidesBefore, 0);
        var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
        var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
  
        Utils.extend(swiper.virtual, {
          from: from,
          to: to,
          offset: offset,
          slidesGrid: swiper.slidesGrid,
        });
  
        function onRendered() {
          swiper.updateSlides();
          swiper.updateProgress();
          swiper.updateSlidesClasses();
          if (swiper.lazy && swiper.params.lazy.enabled) {
            swiper.lazy.load();
          }
        }
  
        if (previousFrom === from && previousTo === to && !force) {
          if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
            swiper.slides.css(offsetProp, (offset + "px"));
          }
          swiper.updateProgress();
          return;
        }
        if (swiper.params.virtual.renderExternal) {
          swiper.params.virtual.renderExternal.call(swiper, {
            offset: offset,
            from: from,
            to: to,
            slides: (function getSlides() {
              var slidesToRender = [];
              for (var i = from; i <= to; i += 1) {
                slidesToRender.push(slides[i]);
              }
              return slidesToRender;
            }()),
          });
          onRendered();
          return;
        }
        var prependIndexes = [];
        var appendIndexes = [];
        if (force) {
          swiper.$wrapperEl.find(("." + (swiper.params.slideClass))).remove();
        } else {
          for (var i = previousFrom; i <= previousTo; i += 1) {
            if (i < from || i > to) {
              swiper.$wrapperEl.find(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + i + "\"]")).remove();
            }
          }
        }
        for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {
          if (i$1 >= from && i$1 <= to) {
            if (typeof previousTo === 'undefined' || force) {
              appendIndexes.push(i$1);
            } else {
              if (i$1 > previousTo) { appendIndexes.push(i$1); }
              if (i$1 < previousFrom) { prependIndexes.push(i$1); }
            }
          }
        }
        appendIndexes.forEach(function (index) {
          swiper.$wrapperEl.append(renderSlide(slides[index], index));
        });
        prependIndexes.sort(function (a, b) { return b - a; }).forEach(function (index) {
          swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
        });
        swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, (offset + "px"));
        onRendered();
      },
      renderSlide: function renderSlide(slide, index) {
        var swiper = this;
        var params = swiper.params.virtual;
        if (params.cache && swiper.virtual.cache[index]) {
          return swiper.virtual.cache[index];
        }
        var $slideEl = params.renderSlide
          ? $(params.renderSlide.call(swiper, slide, index))
          : $(("<div class=\"" + (swiper.params.slideClass) + "\" data-swiper-slide-index=\"" + index + "\">" + slide + "</div>"));
        if (!$slideEl.attr('data-swiper-slide-index')) { $slideEl.attr('data-swiper-slide-index', index); }
        if (params.cache) { swiper.virtual.cache[index] = $slideEl; }
        return $slideEl;
      },
      appendSlide: function appendSlide(slides) {
        var swiper = this;
        if (typeof slides === 'object' && 'length' in slides) {
          for (var i = 0; i < slides.length; i += 1) {
            if (slides[i]) { swiper.virtual.slides.push(slides[i]); }
          }
        } else {
          swiper.virtual.slides.push(slides);
        }
        swiper.virtual.update(true);
      },
      prependSlide: function prependSlide(slides) {
        var swiper = this;
        var activeIndex = swiper.activeIndex;
        var newActiveIndex = activeIndex + 1;
        var numberOfNewSlides = 1;
  
        if (Array.isArray(slides)) {
          for (var i = 0; i < slides.length; i += 1) {
            if (slides[i]) { swiper.virtual.slides.unshift(slides[i]); }
          }
          newActiveIndex = activeIndex + slides.length;
          numberOfNewSlides = slides.length;
        } else {
          swiper.virtual.slides.unshift(slides);
        }
        if (swiper.params.virtual.cache) {
          var cache = swiper.virtual.cache;
          var newCache = {};
          Object.keys(cache).forEach(function (cachedIndex) {
            newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cache[cachedIndex];
          });
          swiper.virtual.cache = newCache;
        }
        swiper.virtual.update(true);
        swiper.slideTo(newActiveIndex, 0);
      },
      removeSlide: function removeSlide(slidesIndexes) {
        var swiper = this;
        if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) { return; }
        var activeIndex = swiper.activeIndex;
        if (Array.isArray(slidesIndexes)) {
          for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {
            swiper.virtual.slides.splice(slidesIndexes[i], 1);
            if (swiper.params.virtual.cache) {
              delete swiper.virtual.cache[slidesIndexes[i]];
            }
            if (slidesIndexes[i] < activeIndex) { activeIndex -= 1; }
            activeIndex = Math.max(activeIndex, 0);
          }
        } else {
          swiper.virtual.slides.splice(slidesIndexes, 1);
          if (swiper.params.virtual.cache) {
            delete swiper.virtual.cache[slidesIndexes];
          }
          if (slidesIndexes < activeIndex) { activeIndex -= 1; }
          activeIndex = Math.max(activeIndex, 0);
        }
        swiper.virtual.update(true);
        swiper.slideTo(activeIndex, 0);
      },
      removeAllSlides: function removeAllSlides() {
        var swiper = this;
        swiper.virtual.slides = [];
        if (swiper.params.virtual.cache) {
          swiper.virtual.cache = {};
        }
        swiper.virtual.update(true);
        swiper.slideTo(0, 0);
      },
    };
  
    var Virtual$1 = {
      name: 'virtual',
      params: {
        virtual: {
          enabled: false,
          slides: [],
          cache: true,
          renderSlide: null,
          renderExternal: null,
          addSlidesBefore: 0,
          addSlidesAfter: 0,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          virtual: {
            update: Virtual.update.bind(swiper),
            appendSlide: Virtual.appendSlide.bind(swiper),
            prependSlide: Virtual.prependSlide.bind(swiper),
            removeSlide: Virtual.removeSlide.bind(swiper),
            removeAllSlides: Virtual.removeAllSlides.bind(swiper),
            renderSlide: Virtual.renderSlide.bind(swiper),
            slides: swiper.params.virtual.slides,
            cache: {},
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (!swiper.params.virtual.enabled) { return; }
          swiper.classNames.push(((swiper.params.containerModifierClass) + "virtual"));
          var overwriteParams = {
            watchSlidesProgress: true,
          };
          Utils.extend(swiper.params, overwriteParams);
          Utils.extend(swiper.originalParams, overwriteParams);
  
          if (!swiper.params.initialSlide) {
            swiper.virtual.update();
          }
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (!swiper.params.virtual.enabled) { return; }
          swiper.virtual.update();
        },
      },
    };
  
    var Keyboard = {
      handle: function handle(event) {
        var swiper = this;
        var rtl = swiper.rtlTranslate;
        var e = event;
        if (e.originalEvent) { e = e.originalEvent; } // jquery fix
        var kc = e.keyCode || e.charCode;
        // Directions locks
        if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40))) {
          return false;
        }
        if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38))) {
          return false;
        }
        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
          return undefined;
        }
        if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {
          return undefined;
        }
        if (swiper.params.keyboard.onlyInViewport && (kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
          var inView = false;
          // Check that swiper should be inside of visible area of window
          if (swiper.$el.parents(("." + (swiper.params.slideClass))).length > 0 && swiper.$el.parents(("." + (swiper.params.slideActiveClass))).length === 0) {
            return undefined;
          }
          var windowWidth = win.innerWidth;
          var windowHeight = win.innerHeight;
          var swiperOffset = swiper.$el.offset();
          if (rtl) { swiperOffset.left -= swiper.$el[0].scrollLeft; }
          var swiperCoord = [
            [swiperOffset.left, swiperOffset.top],
            [swiperOffset.left + swiper.width, swiperOffset.top],
            [swiperOffset.left, swiperOffset.top + swiper.height],
            [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height] ];
          for (var i = 0; i < swiperCoord.length; i += 1) {
            var point = swiperCoord[i];
            if (
              point[0] >= 0 && point[0] <= windowWidth
              && point[1] >= 0 && point[1] <= windowHeight
            ) {
              inView = true;
            }
          }
          if (!inView) { return undefined; }
        }
        if (swiper.isHorizontal()) {
          if (kc === 37 || kc === 39) {
            if (e.preventDefault) { e.preventDefault(); }
            else { e.returnValue = false; }
          }
          if ((kc === 39 && !rtl) || (kc === 37 && rtl)) { swiper.slideNext(); }
          if ((kc === 37 && !rtl) || (kc === 39 && rtl)) { swiper.slidePrev(); }
        } else {
          if (kc === 38 || kc === 40) {
            if (e.preventDefault) { e.preventDefault(); }
            else { e.returnValue = false; }
          }
          if (kc === 40) { swiper.slideNext(); }
          if (kc === 38) { swiper.slidePrev(); }
        }
        swiper.emit('keyPress', kc);
        return undefined;
      },
      enable: function enable() {
        var swiper = this;
        if (swiper.keyboard.enabled) { return; }
        $(doc).on('keydown', swiper.keyboard.handle);
        swiper.keyboard.enabled = true;
      },
      disable: function disable() {
        var swiper = this;
        if (!swiper.keyboard.enabled) { return; }
        $(doc).off('keydown', swiper.keyboard.handle);
        swiper.keyboard.enabled = false;
      },
    };
  
    var Keyboard$1 = {
      name: 'keyboard',
      params: {
        keyboard: {
          enabled: false,
          onlyInViewport: true,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          keyboard: {
            enabled: false,
            enable: Keyboard.enable.bind(swiper),
            disable: Keyboard.disable.bind(swiper),
            handle: Keyboard.handle.bind(swiper),
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.keyboard.enabled) {
            swiper.keyboard.enable();
          }
        },
        destroy: function destroy() {
          var swiper = this;
          if (swiper.keyboard.enabled) {
            swiper.keyboard.disable();
          }
        },
      },
    };
  
    function isEventSupported() {
      var eventName = 'onwheel';
      var isSupported = eventName in doc;
  
      if (!isSupported) {
        var element = doc.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }
  
      if (!isSupported
        && doc.implementation
        && doc.implementation.hasFeature
        // always returns true in newer browsers as per the standard.
        // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
        && doc.implementation.hasFeature('', '') !== true
      ) {
        // This is the only way to test support for the `wheel` event in IE9+.
        isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');
      }
  
      return isSupported;
    }
    var Mousewheel = {
      lastScrollTime: Utils.now(),
      event: (function getEvent() {
        if (win.navigator.userAgent.indexOf('firefox') > -1) { return 'DOMMouseScroll'; }
        return isEventSupported() ? 'wheel' : 'mousewheel';
      }()),
      normalize: function normalize(e) {
        // Reasonable defaults
        var PIXEL_STEP = 10;
        var LINE_HEIGHT = 40;
        var PAGE_HEIGHT = 800;
  
        var sX = 0;
        var sY = 0; // spinX, spinY
        var pX = 0;
        var pY = 0; // pixelX, pixelY
  
        // Legacy
        if ('detail' in e) {
          sY = e.detail;
        }
        if ('wheelDelta' in e) {
          sY = -e.wheelDelta / 120;
        }
        if ('wheelDeltaY' in e) {
          sY = -e.wheelDeltaY / 120;
        }
        if ('wheelDeltaX' in e) {
          sX = -e.wheelDeltaX / 120;
        }
  
        // side scrolling on FF with DOMMouseScroll
        if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
          sX = sY;
          sY = 0;
        }
  
        pX = sX * PIXEL_STEP;
        pY = sY * PIXEL_STEP;
  
        if ('deltaY' in e) {
          pY = e.deltaY;
        }
        if ('deltaX' in e) {
          pX = e.deltaX;
        }
  
        if ((pX || pY) && e.deltaMode) {
          if (e.deltaMode === 1) { // delta in LINE units
            pX *= LINE_HEIGHT;
            pY *= LINE_HEIGHT;
          } else { // delta in PAGE units
            pX *= PAGE_HEIGHT;
            pY *= PAGE_HEIGHT;
          }
        }
  
        // Fall-back if spin cannot be determined
        if (pX && !sX) {
          sX = (pX < 1) ? -1 : 1;
        }
        if (pY && !sY) {
          sY = (pY < 1) ? -1 : 1;
        }
  
        return {
          spinX: sX,
          spinY: sY,
          pixelX: pX,
          pixelY: pY,
        };
      },
      handleMouseEnter: function handleMouseEnter() {
        var swiper = this;
        swiper.mouseEntered = true;
      },
      handleMouseLeave: function handleMouseLeave() {
        var swiper = this;
        swiper.mouseEntered = false;
      },
      handle: function handle(event) {
        var e = event;
        var swiper = this;
        var params = swiper.params.mousewheel;
  
        if (!swiper.mouseEntered && !params.releaseOnEdges) { return true; }
  
        if (e.originalEvent) { e = e.originalEvent; } // jquery fix
        var delta = 0;
        var rtlFactor = swiper.rtlTranslate ? -1 : 1;
  
        var data = Mousewheel.normalize(e);
  
        if (params.forceToAxis) {
          if (swiper.isHorizontal()) {
            if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) { delta = data.pixelX * rtlFactor; }
            else { return true; }
          } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) { delta = data.pixelY; }
          else { return true; }
        } else {
          delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
        }
  
        if (delta === 0) { return true; }
  
        if (params.invert) { delta = -delta; }
  
        if (!swiper.params.freeMode) {
          if (Utils.now() - swiper.mousewheel.lastScrollTime > 60) {
            if (delta < 0) {
              if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
                swiper.slideNext();
                swiper.emit('scroll', e);
              } else if (params.releaseOnEdges) { return true; }
            } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
              swiper.slidePrev();
              swiper.emit('scroll', e);
            } else if (params.releaseOnEdges) { return true; }
          }
          swiper.mousewheel.lastScrollTime = (new win.Date()).getTime();
        } else {
          // Freemode or scrollContainer:
          if (swiper.params.loop) {
            swiper.loopFix();
          }
          var position = swiper.getTranslate() + (delta * params.sensitivity);
          var wasBeginning = swiper.isBeginning;
          var wasEnd = swiper.isEnd;
  
          if (position >= swiper.minTranslate()) { position = swiper.minTranslate(); }
          if (position <= swiper.maxTranslate()) { position = swiper.maxTranslate(); }
  
          swiper.setTransition(0);
          swiper.setTranslate(position);
          swiper.updateProgress();
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();
  
          if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {
            swiper.updateSlidesClasses();
          }
  
          if (swiper.params.freeModeSticky) {
            clearTimeout(swiper.mousewheel.timeout);
            swiper.mousewheel.timeout = Utils.nextTick(function () {
              swiper.slideToClosest();
            }, 300);
          }
          // Emit event
          swiper.emit('scroll', e);
  
          // Stop autoplay
          if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) { swiper.autoplay.stop(); }
          // Return page scroll on edge positions
          if (position === swiper.minTranslate() || position === swiper.maxTranslate()) { return true; }
        }
  
        if (e.preventDefault) { e.preventDefault(); }
        else { e.returnValue = false; }
        return false;
      },
      enable: function enable() {
        var swiper = this;
        if (!Mousewheel.event) { return false; }
        if (swiper.mousewheel.enabled) { return false; }
        var target = swiper.$el;
        if (swiper.params.mousewheel.eventsTarged !== 'container') {
          target = $(swiper.params.mousewheel.eventsTarged);
        }
        target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
        target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
        target.on(Mousewheel.event, swiper.mousewheel.handle);
        swiper.mousewheel.enabled = true;
        return true;
      },
      disable: function disable() {
        var swiper = this;
        if (!Mousewheel.event) { return false; }
        if (!swiper.mousewheel.enabled) { return false; }
        var target = swiper.$el;
        if (swiper.params.mousewheel.eventsTarged !== 'container') {
          target = $(swiper.params.mousewheel.eventsTarged);
        }
        target.off(Mousewheel.event, swiper.mousewheel.handle);
        swiper.mousewheel.enabled = false;
        return true;
      },
    };
  
    var Mousewheel$1 = {
      name: 'mousewheel',
      params: {
        mousewheel: {
          enabled: false,
          releaseOnEdges: false,
          invert: false,
          forceToAxis: false,
          sensitivity: 1,
          eventsTarged: 'container',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          mousewheel: {
            enabled: false,
            enable: Mousewheel.enable.bind(swiper),
            disable: Mousewheel.disable.bind(swiper),
            handle: Mousewheel.handle.bind(swiper),
            handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
            handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
            lastScrollTime: Utils.now(),
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.mousewheel.enabled) { swiper.mousewheel.enable(); }
        },
        destroy: function destroy() {
          var swiper = this;
          if (swiper.mousewheel.enabled) { swiper.mousewheel.disable(); }
        },
      },
    };
  
    var Navigation = {
      update: function update() {
        // Update Navigation Buttons
        var swiper = this;
        var params = swiper.params.navigation;
  
        if (swiper.params.loop) { return; }
        var ref = swiper.navigation;
        var $nextEl = ref.$nextEl;
        var $prevEl = ref.$prevEl;
  
        if ($prevEl && $prevEl.length > 0) {
          if (swiper.isBeginning) {
            $prevEl.addClass(params.disabledClass);
          } else {
            $prevEl.removeClass(params.disabledClass);
          }
          $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
        }
        if ($nextEl && $nextEl.length > 0) {
          if (swiper.isEnd) {
            $nextEl.addClass(params.disabledClass);
          } else {
            $nextEl.removeClass(params.disabledClass);
          }
          $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
        }
      },
      onPrevClick: function onPrevClick(e) {
        var swiper = this;
        e.preventDefault();
        if (swiper.isBeginning && !swiper.params.loop) { return; }
        swiper.slidePrev();
      },
      onNextClick: function onNextClick(e) {
        var swiper = this;
        e.preventDefault();
        if (swiper.isEnd && !swiper.params.loop) { return; }
        swiper.slideNext();
      },
      init: function init() {
        var swiper = this;
        var params = swiper.params.navigation;
        if (!(params.nextEl || params.prevEl)) { return; }
  
        var $nextEl;
        var $prevEl;
        if (params.nextEl) {
          $nextEl = $(params.nextEl);
          if (
            swiper.params.uniqueNavElements
            && typeof params.nextEl === 'string'
            && $nextEl.length > 1
            && swiper.$el.find(params.nextEl).length === 1
          ) {
            $nextEl = swiper.$el.find(params.nextEl);
          }
        }
        if (params.prevEl) {
          $prevEl = $(params.prevEl);
          if (
            swiper.params.uniqueNavElements
            && typeof params.prevEl === 'string'
            && $prevEl.length > 1
            && swiper.$el.find(params.prevEl).length === 1
          ) {
            $prevEl = swiper.$el.find(params.prevEl);
          }
        }
  
        if ($nextEl && $nextEl.length > 0) {
          $nextEl.on('click', swiper.navigation.onNextClick);
        }
        if ($prevEl && $prevEl.length > 0) {
          $prevEl.on('click', swiper.navigation.onPrevClick);
        }
  
        Utils.extend(swiper.navigation, {
          $nextEl: $nextEl,
          nextEl: $nextEl && $nextEl[0],
          $prevEl: $prevEl,
          prevEl: $prevEl && $prevEl[0],
        });
      },
      destroy: function destroy() {
        var swiper = this;
        var ref = swiper.navigation;
        var $nextEl = ref.$nextEl;
        var $prevEl = ref.$prevEl;
        if ($nextEl && $nextEl.length) {
          $nextEl.off('click', swiper.navigation.onNextClick);
          $nextEl.removeClass(swiper.params.navigation.disabledClass);
        }
        if ($prevEl && $prevEl.length) {
          $prevEl.off('click', swiper.navigation.onPrevClick);
          $prevEl.removeClass(swiper.params.navigation.disabledClass);
        }
      },
    };
  
    var Navigation$1 = {
      name: 'navigation',
      params: {
        navigation: {
          nextEl: null,
          prevEl: null,
  
          hideOnClick: false,
          disabledClass: 'swiper-button-disabled',
          hiddenClass: 'swiper-button-hidden',
          lockClass: 'swiper-button-lock',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          navigation: {
            init: Navigation.init.bind(swiper),
            update: Navigation.update.bind(swiper),
            destroy: Navigation.destroy.bind(swiper),
            onNextClick: Navigation.onNextClick.bind(swiper),
            onPrevClick: Navigation.onPrevClick.bind(swiper),
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          swiper.navigation.init();
          swiper.navigation.update();
        },
        toEdge: function toEdge() {
          var swiper = this;
          swiper.navigation.update();
        },
        fromEdge: function fromEdge() {
          var swiper = this;
          swiper.navigation.update();
        },
        destroy: function destroy() {
          var swiper = this;
          swiper.navigation.destroy();
        },
        click: function click(e) {
          var swiper = this;
          var ref = swiper.navigation;
          var $nextEl = ref.$nextEl;
          var $prevEl = ref.$prevEl;
          if (
            swiper.params.navigation.hideOnClick
            && !$(e.target).is($prevEl)
            && !$(e.target).is($nextEl)
          ) {
            var isHidden;
            if ($nextEl) {
              isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
            } else if ($prevEl) {
              isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
            }
            if (isHidden === true) {
              swiper.emit('navigationShow', swiper);
            } else {
              swiper.emit('navigationHide', swiper);
            }
            if ($nextEl) {
              $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
            }
            if ($prevEl) {
              $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
            }
          }
        },
      },
    };
  
    var Pagination = {
      update: function update() {
        // Render || Update Pagination bullets/items
        var swiper = this;
        var rtl = swiper.rtl;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
        var $el = swiper.pagination.$el;
        // Current/Total
        var current;
        var total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
        if (swiper.params.loop) {
          current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
          if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {
            current -= (slidesLength - (swiper.loopedSlides * 2));
          }
          if (current > total - 1) { current -= total; }
          if (current < 0 && swiper.params.paginationType !== 'bullets') { current = total + current; }
        } else if (typeof swiper.snapIndex !== 'undefined') {
          current = swiper.snapIndex;
        } else {
          current = swiper.activeIndex || 0;
        }
        // Types
        if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
          var bullets = swiper.pagination.bullets;
          var firstIndex;
          var lastIndex;
          var midIndex;
          if (params.dynamicBullets) {
            swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
            $el.css(swiper.isHorizontal() ? 'width' : 'height', ((swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)) + "px"));
            if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
              swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);
              if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {
                swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
              } else if (swiper.pagination.dynamicBulletIndex < 0) {
                swiper.pagination.dynamicBulletIndex = 0;
              }
            }
            firstIndex = current - swiper.pagination.dynamicBulletIndex;
            lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
            midIndex = (lastIndex + firstIndex) / 2;
          }
          bullets.removeClass(((params.bulletActiveClass) + " " + (params.bulletActiveClass) + "-next " + (params.bulletActiveClass) + "-next-next " + (params.bulletActiveClass) + "-prev " + (params.bulletActiveClass) + "-prev-prev " + (params.bulletActiveClass) + "-main"));
          if ($el.length > 1) {
            bullets.each(function (index, bullet) {
              var $bullet = $(bullet);
              var bulletIndex = $bullet.index();
              if (bulletIndex === current) {
                $bullet.addClass(params.bulletActiveClass);
              }
              if (params.dynamicBullets) {
                if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                  $bullet.addClass(((params.bulletActiveClass) + "-main"));
                }
                if (bulletIndex === firstIndex) {
                  $bullet
                    .prev()
                    .addClass(((params.bulletActiveClass) + "-prev"))
                    .prev()
                    .addClass(((params.bulletActiveClass) + "-prev-prev"));
                }
                if (bulletIndex === lastIndex) {
                  $bullet
                    .next()
                    .addClass(((params.bulletActiveClass) + "-next"))
                    .next()
                    .addClass(((params.bulletActiveClass) + "-next-next"));
                }
              }
            });
          } else {
            var $bullet = bullets.eq(current);
            $bullet.addClass(params.bulletActiveClass);
            if (params.dynamicBullets) {
              var $firstDisplayedBullet = bullets.eq(firstIndex);
              var $lastDisplayedBullet = bullets.eq(lastIndex);
              for (var i = firstIndex; i <= lastIndex; i += 1) {
                bullets.eq(i).addClass(((params.bulletActiveClass) + "-main"));
              }
              $firstDisplayedBullet
                .prev()
                .addClass(((params.bulletActiveClass) + "-prev"))
                .prev()
                .addClass(((params.bulletActiveClass) + "-prev-prev"));
              $lastDisplayedBullet
                .next()
                .addClass(((params.bulletActiveClass) + "-next"))
                .next()
                .addClass(((params.bulletActiveClass) + "-next-next"));
            }
          }
          if (params.dynamicBullets) {
            var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
            var bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);
            var offsetProp = rtl ? 'right' : 'left';
            bullets.css(swiper.isHorizontal() ? offsetProp : 'top', (bulletsOffset + "px"));
          }
        }
        if (params.type === 'fraction') {
          $el.find(("." + (params.currentClass))).text(params.formatFractionCurrent(current + 1));
          $el.find(("." + (params.totalClass))).text(params.formatFractionTotal(total));
        }
        if (params.type === 'progressbar') {
          var progressbarDirection;
          if (params.progressbarOpposite) {
            progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
          } else {
            progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
          }
          var scale = (current + 1) / total;
          var scaleX = 1;
          var scaleY = 1;
          if (progressbarDirection === 'horizontal') {
            scaleX = scale;
          } else {
            scaleY = scale;
          }
          $el.find(("." + (params.progressbarFillClass))).transform(("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")")).transition(swiper.params.speed);
        }
        if (params.type === 'custom' && params.renderCustom) {
          $el.html(params.renderCustom(swiper, current + 1, total));
          swiper.emit('paginationRender', swiper, $el[0]);
        } else {
          swiper.emit('paginationUpdate', swiper, $el[0]);
        }
        $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      },
      render: function render() {
        // Render Container
        var swiper = this;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
  
        var $el = swiper.pagination.$el;
        var paginationHTML = '';
        if (params.type === 'bullets') {
          var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
          for (var i = 0; i < numberOfBullets; i += 1) {
            if (params.renderBullet) {
              paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
            } else {
              paginationHTML += "<" + (params.bulletElement) + " class=\"" + (params.bulletClass) + "\"></" + (params.bulletElement) + ">";
            }
          }
          $el.html(paginationHTML);
          swiper.pagination.bullets = $el.find(("." + (params.bulletClass)));
        }
        if (params.type === 'fraction') {
          if (params.renderFraction) {
            paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
          } else {
            paginationHTML = "<span class=\"" + (params.currentClass) + "\"></span>"
            + ' / '
            + "<span class=\"" + (params.totalClass) + "\"></span>";
          }
          $el.html(paginationHTML);
        }
        if (params.type === 'progressbar') {
          if (params.renderProgressbar) {
            paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
          } else {
            paginationHTML = "<span class=\"" + (params.progressbarFillClass) + "\"></span>";
          }
          $el.html(paginationHTML);
        }
        if (params.type !== 'custom') {
          swiper.emit('paginationRender', swiper.pagination.$el[0]);
        }
      },
      init: function init() {
        var swiper = this;
        var params = swiper.params.pagination;
        if (!params.el) { return; }
  
        var $el = $(params.el);
        if ($el.length === 0) { return; }
  
        if (
          swiper.params.uniqueNavElements
          && typeof params.el === 'string'
          && $el.length > 1
          && swiper.$el.find(params.el).length === 1
        ) {
          $el = swiper.$el.find(params.el);
        }
  
        if (params.type === 'bullets' && params.clickable) {
          $el.addClass(params.clickableClass);
        }
  
        $el.addClass(params.modifierClass + params.type);
  
        if (params.type === 'bullets' && params.dynamicBullets) {
          $el.addClass(("" + (params.modifierClass) + (params.type) + "-dynamic"));
          swiper.pagination.dynamicBulletIndex = 0;
          if (params.dynamicMainBullets < 1) {
            params.dynamicMainBullets = 1;
          }
        }
        if (params.type === 'progressbar' && params.progressbarOpposite) {
          $el.addClass(params.progressbarOppositeClass);
        }
  
        if (params.clickable) {
          $el.on('click', ("." + (params.bulletClass)), function onClick(e) {
            e.preventDefault();
            var index = $(this).index() * swiper.params.slidesPerGroup;
            if (swiper.params.loop) { index += swiper.loopedSlides; }
            swiper.slideTo(index);
          });
        }
  
        Utils.extend(swiper.pagination, {
          $el: $el,
          el: $el[0],
        });
      },
      destroy: function destroy() {
        var swiper = this;
        var params = swiper.params.pagination;
        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) { return; }
        var $el = swiper.pagination.$el;
  
        $el.removeClass(params.hiddenClass);
        $el.removeClass(params.modifierClass + params.type);
        if (swiper.pagination.bullets) { swiper.pagination.bullets.removeClass(params.bulletActiveClass); }
        if (params.clickable) {
          $el.off('click', ("." + (params.bulletClass)));
        }
      },
    };
  
    var Pagination$1 = {
      name: 'pagination',
      params: {
        pagination: {
          el: null,
          bulletElement: 'span',
          clickable: false,
          hideOnClick: false,
          renderBullet: null,
          renderProgressbar: null,
          renderFraction: null,
          renderCustom: null,
          progressbarOpposite: false,
          type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
          dynamicBullets: false,
          dynamicMainBullets: 1,
          formatFractionCurrent: function (number) { return number; },
          formatFractionTotal: function (number) { return number; },
          bulletClass: 'swiper-pagination-bullet',
          bulletActiveClass: 'swiper-pagination-bullet-active',
          modifierClass: 'swiper-pagination-', // NEW
          currentClass: 'swiper-pagination-current',
          totalClass: 'swiper-pagination-total',
          hiddenClass: 'swiper-pagination-hidden',
          progressbarFillClass: 'swiper-pagination-progressbar-fill',
          progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
          clickableClass: 'swiper-pagination-clickable', // NEW
          lockClass: 'swiper-pagination-lock',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          pagination: {
            init: Pagination.init.bind(swiper),
            render: Pagination.render.bind(swiper),
            update: Pagination.update.bind(swiper),
            destroy: Pagination.destroy.bind(swiper),
            dynamicBulletIndex: 0,
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          swiper.pagination.init();
          swiper.pagination.render();
          swiper.pagination.update();
        },
        activeIndexChange: function activeIndexChange() {
          var swiper = this;
          if (swiper.params.loop) {
            swiper.pagination.update();
          } else if (typeof swiper.snapIndex === 'undefined') {
            swiper.pagination.update();
          }
        },
        snapIndexChange: function snapIndexChange() {
          var swiper = this;
          if (!swiper.params.loop) {
            swiper.pagination.update();
          }
        },
        slidesLengthChange: function slidesLengthChange() {
          var swiper = this;
          if (swiper.params.loop) {
            swiper.pagination.render();
            swiper.pagination.update();
          }
        },
        snapGridLengthChange: function snapGridLengthChange() {
          var swiper = this;
          if (!swiper.params.loop) {
            swiper.pagination.render();
            swiper.pagination.update();
          }
        },
        destroy: function destroy() {
          var swiper = this;
          swiper.pagination.destroy();
        },
        click: function click(e) {
          var swiper = this;
          if (
            swiper.params.pagination.el
            && swiper.params.pagination.hideOnClick
            && swiper.pagination.$el.length > 0
            && !$(e.target).hasClass(swiper.params.pagination.bulletClass)
          ) {
            var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);
            if (isHidden === true) {
              swiper.emit('paginationShow', swiper);
            } else {
              swiper.emit('paginationHide', swiper);
            }
            swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
          }
        },
      },
    };
  
    var Scrollbar = {
      setTranslate: function setTranslate() {
        var swiper = this;
        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
        var scrollbar = swiper.scrollbar;
        var rtl = swiper.rtlTranslate;
        var progress = swiper.progress;
        var dragSize = scrollbar.dragSize;
        var trackSize = scrollbar.trackSize;
        var $dragEl = scrollbar.$dragEl;
        var $el = scrollbar.$el;
        var params = swiper.params.scrollbar;
  
        var newSize = dragSize;
        var newPos = (trackSize - dragSize) * progress;
        if (rtl) {
          newPos = -newPos;
          if (newPos > 0) {
            newSize = dragSize - newPos;
            newPos = 0;
          } else if (-newPos + dragSize > trackSize) {
            newSize = trackSize + newPos;
          }
        } else if (newPos < 0) {
          newSize = dragSize + newPos;
          newPos = 0;
        } else if (newPos + dragSize > trackSize) {
          newSize = trackSize - newPos;
        }
        if (swiper.isHorizontal()) {
          if (Support.transforms3d) {
            $dragEl.transform(("translate3d(" + newPos + "px, 0, 0)"));
          } else {
            $dragEl.transform(("translateX(" + newPos + "px)"));
          }
          $dragEl[0].style.width = newSize + "px";
        } else {
          if (Support.transforms3d) {
            $dragEl.transform(("translate3d(0px, " + newPos + "px, 0)"));
          } else {
            $dragEl.transform(("translateY(" + newPos + "px)"));
          }
          $dragEl[0].style.height = newSize + "px";
        }
        if (params.hide) {
          clearTimeout(swiper.scrollbar.timeout);
          $el[0].style.opacity = 1;
          swiper.scrollbar.timeout = setTimeout(function () {
            $el[0].style.opacity = 0;
            $el.transition(400);
          }, 1000);
        }
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
        swiper.scrollbar.$dragEl.transition(duration);
      },
      updateSize: function updateSize() {
        var swiper = this;
        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) { return; }
  
        var scrollbar = swiper.scrollbar;
        var $dragEl = scrollbar.$dragEl;
        var $el = scrollbar.$el;
  
        $dragEl[0].style.width = '';
        $dragEl[0].style.height = '';
        var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;
  
        var divider = swiper.size / swiper.virtualSize;
        var moveDivider = divider * (trackSize / swiper.size);
        var dragSize;
        if (swiper.params.scrollbar.dragSize === 'auto') {
          dragSize = trackSize * divider;
        } else {
          dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
        }
  
        if (swiper.isHorizontal()) {
          $dragEl[0].style.width = dragSize + "px";
        } else {
          $dragEl[0].style.height = dragSize + "px";
        }
  
        if (divider >= 1) {
          $el[0].style.display = 'none';
        } else {
          $el[0].style.display = '';
        }
        if (swiper.params.scrollbar.hide) {
          $el[0].style.opacity = 0;
        }
        Utils.extend(scrollbar, {
          trackSize: trackSize,
          divider: divider,
          moveDivider: moveDivider,
          dragSize: dragSize,
        });
        scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
      },
      setDragPosition: function setDragPosition(e) {
        var swiper = this;
        var scrollbar = swiper.scrollbar;
        var rtl = swiper.rtlTranslate;
        var $el = scrollbar.$el;
        var dragSize = scrollbar.dragSize;
        var trackSize = scrollbar.trackSize;
  
        var pointerPosition;
        if (swiper.isHorizontal()) {
          pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageX : e.pageX || e.clientX);
        } else {
          pointerPosition = ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].pageY : e.pageY || e.clientY);
        }
        var positionRatio;
        positionRatio = ((pointerPosition) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragSize / 2)) / (trackSize - dragSize);
        positionRatio = Math.max(Math.min(positionRatio, 1), 0);
        if (rtl) {
          positionRatio = 1 - positionRatio;
        }
  
        var position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);
  
        swiper.updateProgress(position);
        swiper.setTranslate(position);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      },
      onDragStart: function onDragStart(e) {
        var swiper = this;
        var params = swiper.params.scrollbar;
        var scrollbar = swiper.scrollbar;
        var $wrapperEl = swiper.$wrapperEl;
        var $el = scrollbar.$el;
        var $dragEl = scrollbar.$dragEl;
        swiper.scrollbar.isTouched = true;
        e.preventDefault();
        e.stopPropagation();
  
        $wrapperEl.transition(100);
        $dragEl.transition(100);
        scrollbar.setDragPosition(e);
  
        clearTimeout(swiper.scrollbar.dragTimeout);
  
        $el.transition(0);
        if (params.hide) {
          $el.css('opacity', 1);
        }
        swiper.emit('scrollbarDragStart', e);
      },
      onDragMove: function onDragMove(e) {
        var swiper = this;
        var scrollbar = swiper.scrollbar;
        var $wrapperEl = swiper.$wrapperEl;
        var $el = scrollbar.$el;
        var $dragEl = scrollbar.$dragEl;
  
        if (!swiper.scrollbar.isTouched) { return; }
        if (e.preventDefault) { e.preventDefault(); }
        else { e.returnValue = false; }
        scrollbar.setDragPosition(e);
        $wrapperEl.transition(0);
        $el.transition(0);
        $dragEl.transition(0);
        swiper.emit('scrollbarDragMove', e);
      },
      onDragEnd: function onDragEnd(e) {
        var swiper = this;
  
        var params = swiper.params.scrollbar;
        var scrollbar = swiper.scrollbar;
        var $el = scrollbar.$el;
  
        if (!swiper.scrollbar.isTouched) { return; }
        swiper.scrollbar.isTouched = false;
        if (params.hide) {
          clearTimeout(swiper.scrollbar.dragTimeout);
          swiper.scrollbar.dragTimeout = Utils.nextTick(function () {
            $el.css('opacity', 0);
            $el.transition(400);
          }, 1000);
        }
        swiper.emit('scrollbarDragEnd', e);
        if (params.snapOnRelease) {
          swiper.slideToClosest();
        }
      },
      enableDraggable: function enableDraggable() {
        var swiper = this;
        if (!swiper.params.scrollbar.el) { return; }
        var scrollbar = swiper.scrollbar;
        var touchEventsTouch = swiper.touchEventsTouch;
        var touchEventsDesktop = swiper.touchEventsDesktop;
        var params = swiper.params;
        var $el = scrollbar.$el;
        var target = $el[0];
        var activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
        var passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        if (!Support.touch) {
          target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
          doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
          doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
        } else {
          target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
          target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
          target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
        }
      },
      disableDraggable: function disableDraggable() {
        var swiper = this;
        if (!swiper.params.scrollbar.el) { return; }
        var scrollbar = swiper.scrollbar;
        var touchEventsTouch = swiper.touchEventsTouch;
        var touchEventsDesktop = swiper.touchEventsDesktop;
        var params = swiper.params;
        var $el = scrollbar.$el;
        var target = $el[0];
        var activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
        var passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        if (!Support.touch) {
          target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
          doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
          doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
        } else {
          target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
          target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
          target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
        }
      },
      init: function init() {
        var swiper = this;
        if (!swiper.params.scrollbar.el) { return; }
        var scrollbar = swiper.scrollbar;
        var $swiperEl = swiper.$el;
        var params = swiper.params.scrollbar;
  
        var $el = $(params.el);
        if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
          $el = $swiperEl.find(params.el);
        }
  
        var $dragEl = $el.find(("." + (swiper.params.scrollbar.dragClass)));
        if ($dragEl.length === 0) {
          $dragEl = $(("<div class=\"" + (swiper.params.scrollbar.dragClass) + "\"></div>"));
          $el.append($dragEl);
        }
  
        Utils.extend(scrollbar, {
          $el: $el,
          el: $el[0],
          $dragEl: $dragEl,
          dragEl: $dragEl[0],
        });
  
        if (params.draggable) {
          scrollbar.enableDraggable();
        }
      },
      destroy: function destroy() {
        var swiper = this;
        swiper.scrollbar.disableDraggable();
      },
    };
  
    var Scrollbar$1 = {
      name: 'scrollbar',
      params: {
        scrollbar: {
          el: null,
          dragSize: 'auto',
          hide: false,
          draggable: false,
          snapOnRelease: true,
          lockClass: 'swiper-scrollbar-lock',
          dragClass: 'swiper-scrollbar-drag',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          scrollbar: {
            init: Scrollbar.init.bind(swiper),
            destroy: Scrollbar.destroy.bind(swiper),
            updateSize: Scrollbar.updateSize.bind(swiper),
            setTranslate: Scrollbar.setTranslate.bind(swiper),
            setTransition: Scrollbar.setTransition.bind(swiper),
            enableDraggable: Scrollbar.enableDraggable.bind(swiper),
            disableDraggable: Scrollbar.disableDraggable.bind(swiper),
            setDragPosition: Scrollbar.setDragPosition.bind(swiper),
            onDragStart: Scrollbar.onDragStart.bind(swiper),
            onDragMove: Scrollbar.onDragMove.bind(swiper),
            onDragEnd: Scrollbar.onDragEnd.bind(swiper),
            isTouched: false,
            timeout: null,
            dragTimeout: null,
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          swiper.scrollbar.init();
          swiper.scrollbar.updateSize();
          swiper.scrollbar.setTranslate();
        },
        update: function update() {
          var swiper = this;
          swiper.scrollbar.updateSize();
        },
        resize: function resize() {
          var swiper = this;
          swiper.scrollbar.updateSize();
        },
        observerUpdate: function observerUpdate() {
          var swiper = this;
          swiper.scrollbar.updateSize();
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          swiper.scrollbar.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          swiper.scrollbar.setTransition(duration);
        },
        destroy: function destroy() {
          var swiper = this;
          swiper.scrollbar.destroy();
        },
      },
    };
  
    var Parallax = {
      setTransform: function setTransform(el, progress) {
        var swiper = this;
        var rtl = swiper.rtl;
  
        var $el = $(el);
        var rtlFactor = rtl ? -1 : 1;
  
        var p = $el.attr('data-swiper-parallax') || '0';
        var x = $el.attr('data-swiper-parallax-x');
        var y = $el.attr('data-swiper-parallax-y');
        var scale = $el.attr('data-swiper-parallax-scale');
        var opacity = $el.attr('data-swiper-parallax-opacity');
  
        if (x || y) {
          x = x || '0';
          y = y || '0';
        } else if (swiper.isHorizontal()) {
          x = p;
          y = '0';
        } else {
          y = p;
          x = '0';
        }
  
        if ((x).indexOf('%') >= 0) {
          x = (parseInt(x, 10) * progress * rtlFactor) + "%";
        } else {
          x = (x * progress * rtlFactor) + "px";
        }
        if ((y).indexOf('%') >= 0) {
          y = (parseInt(y, 10) * progress) + "%";
        } else {
          y = (y * progress) + "px";
        }
  
        if (typeof opacity !== 'undefined' && opacity !== null) {
          var currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
          $el[0].style.opacity = currentOpacity;
        }
        if (typeof scale === 'undefined' || scale === null) {
          $el.transform(("translate3d(" + x + ", " + y + ", 0px)"));
        } else {
          var currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
          $el.transform(("translate3d(" + x + ", " + y + ", 0px) scale(" + currentScale + ")"));
        }
      },
      setTranslate: function setTranslate() {
        var swiper = this;
        var $el = swiper.$el;
        var slides = swiper.slides;
        var progress = swiper.progress;
        var snapGrid = swiper.snapGrid;
        $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
          .each(function (index, el) {
            swiper.parallax.setTransform(el, progress);
          });
        slides.each(function (slideIndex, slideEl) {
          var slideProgress = slideEl.progress;
          if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
            slideProgress += Math.ceil(slideIndex / 2) - (progress * (snapGrid.length - 1));
          }
          slideProgress = Math.min(Math.max(slideProgress, -1), 1);
          $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
            .each(function (index, el) {
              swiper.parallax.setTransform(el, slideProgress);
            });
        });
      },
      setTransition: function setTransition(duration) {
        if ( duration === void 0 ) duration = this.params.speed;
  
        var swiper = this;
        var $el = swiper.$el;
        $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]')
          .each(function (index, parallaxEl) {
            var $parallaxEl = $(parallaxEl);
            var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
            if (duration === 0) { parallaxDuration = 0; }
            $parallaxEl.transition(parallaxDuration);
          });
      },
    };
  
    var Parallax$1 = {
      name: 'parallax',
      params: {
        parallax: {
          enabled: false,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          parallax: {
            setTransform: Parallax.setTransform.bind(swiper),
            setTranslate: Parallax.setTranslate.bind(swiper),
            setTransition: Parallax.setTransition.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (!swiper.params.parallax.enabled) { return; }
          swiper.params.watchSlidesProgress = true;
          swiper.originalParams.watchSlidesProgress = true;
        },
        init: function init() {
          var swiper = this;
          if (!swiper.params.parallax.enabled) { return; }
          swiper.parallax.setTranslate();
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (!swiper.params.parallax.enabled) { return; }
          swiper.parallax.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          if (!swiper.params.parallax.enabled) { return; }
          swiper.parallax.setTransition(duration);
        },
      },
    };
  
    var Zoom = {
      // Calc Scale From Multi-touches
      getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
        if (e.targetTouches.length < 2) { return 1; }
        var x1 = e.targetTouches[0].pageX;
        var y1 = e.targetTouches[0].pageY;
        var x2 = e.targetTouches[1].pageX;
        var y2 = e.targetTouches[1].pageY;
        var distance = Math.sqrt((Math.pow( (x2 - x1), 2 )) + (Math.pow( (y2 - y1), 2 )));
        return distance;
      },
      // Events
      onGestureStart: function onGestureStart(e) {
        var swiper = this;
        var params = swiper.params.zoom;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        zoom.fakeGestureTouched = false;
        zoom.fakeGestureMoved = false;
        if (!Support.gestures) {
          if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
            return;
          }
          zoom.fakeGestureTouched = true;
          gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
        }
        if (!gesture.$slideEl || !gesture.$slideEl.length) {
          gesture.$slideEl = $(e.target).closest('.swiper-slide');
          if (gesture.$slideEl.length === 0) { gesture.$slideEl = swiper.slides.eq(swiper.activeIndex); }
          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
          gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
          gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
          if (gesture.$imageWrapEl.length === 0) {
            gesture.$imageEl = undefined;
            return;
          }
        }
        gesture.$imageEl.transition(0);
        swiper.zoom.isScaling = true;
      },
      onGestureChange: function onGestureChange(e) {
        var swiper = this;
        var params = swiper.params.zoom;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        if (!Support.gestures) {
          if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
            return;
          }
          zoom.fakeGestureMoved = true;
          gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
        }
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
        if (Support.gestures) {
          zoom.scale = e.scale * zoom.currentScale;
        } else {
          zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
        }
        if (zoom.scale > gesture.maxRatio) {
          zoom.scale = (gesture.maxRatio - 1) + (Math.pow( ((zoom.scale - gesture.maxRatio) + 1), 0.5 ));
        }
        if (zoom.scale < params.minRatio) {
          zoom.scale = (params.minRatio + 1) - (Math.pow( ((params.minRatio - zoom.scale) + 1), 0.5 ));
        }
        gesture.$imageEl.transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
      },
      onGestureEnd: function onGestureEnd(e) {
        var swiper = this;
        var params = swiper.params.zoom;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        if (!Support.gestures) {
          if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
            return;
          }
          if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {
            return;
          }
          zoom.fakeGestureTouched = false;
          zoom.fakeGestureMoved = false;
        }
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
        zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
        gesture.$imageEl.transition(swiper.params.speed).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
        zoom.currentScale = zoom.scale;
        zoom.isScaling = false;
        if (zoom.scale === 1) { gesture.$slideEl = undefined; }
      },
      onTouchStart: function onTouchStart(e) {
        var swiper = this;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        var image = zoom.image;
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
        if (image.isTouched) { return; }
        if (Device.android) { e.preventDefault(); }
        image.isTouched = true;
        image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
        image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      },
      onTouchMove: function onTouchMove(e) {
        var swiper = this;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        var image = zoom.image;
        var velocity = zoom.velocity;
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
        swiper.allowClick = false;
        if (!image.isTouched || !gesture.$slideEl) { return; }
  
        if (!image.isMoved) {
          image.width = gesture.$imageEl[0].offsetWidth;
          image.height = gesture.$imageEl[0].offsetHeight;
          image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
          image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
          gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
          gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
          gesture.$imageWrapEl.transition(0);
          if (swiper.rtl) {
            image.startX = -image.startX;
            image.startY = -image.startY;
          }
        }
        // Define if we need image drag
        var scaledWidth = image.width * zoom.scale;
        var scaledHeight = image.height * zoom.scale;
  
        if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) { return; }
  
        image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
        image.maxX = -image.minX;
        image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
        image.maxY = -image.minY;
  
        image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
        image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
  
        if (!image.isMoved && !zoom.isScaling) {
          if (
            swiper.isHorizontal()
            && (
              (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x)
              || (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
            )
          ) {
            image.isTouched = false;
            return;
          } if (
            !swiper.isHorizontal()
            && (
              (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y)
              || (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
            )
          ) {
            image.isTouched = false;
            return;
          }
        }
        e.preventDefault();
        e.stopPropagation();
  
        image.isMoved = true;
        image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
        image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;
  
        if (image.currentX < image.minX) {
          image.currentX = (image.minX + 1) - (Math.pow( ((image.minX - image.currentX) + 1), 0.8 ));
        }
        if (image.currentX > image.maxX) {
          image.currentX = (image.maxX - 1) + (Math.pow( ((image.currentX - image.maxX) + 1), 0.8 ));
        }
  
        if (image.currentY < image.minY) {
          image.currentY = (image.minY + 1) - (Math.pow( ((image.minY - image.currentY) + 1), 0.8 ));
        }
        if (image.currentY > image.maxY) {
          image.currentY = (image.maxY - 1) + (Math.pow( ((image.currentY - image.maxY) + 1), 0.8 ));
        }
  
        // Velocity
        if (!velocity.prevPositionX) { velocity.prevPositionX = image.touchesCurrent.x; }
        if (!velocity.prevPositionY) { velocity.prevPositionY = image.touchesCurrent.y; }
        if (!velocity.prevTime) { velocity.prevTime = Date.now(); }
        velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
        velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
        if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) { velocity.x = 0; }
        if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) { velocity.y = 0; }
        velocity.prevPositionX = image.touchesCurrent.x;
        velocity.prevPositionY = image.touchesCurrent.y;
        velocity.prevTime = Date.now();
  
        gesture.$imageWrapEl.transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
      },
      onTouchEnd: function onTouchEnd() {
        var swiper = this;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        var image = zoom.image;
        var velocity = zoom.velocity;
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
        if (!image.isTouched || !image.isMoved) {
          image.isTouched = false;
          image.isMoved = false;
          return;
        }
        image.isTouched = false;
        image.isMoved = false;
        var momentumDurationX = 300;
        var momentumDurationY = 300;
        var momentumDistanceX = velocity.x * momentumDurationX;
        var newPositionX = image.currentX + momentumDistanceX;
        var momentumDistanceY = velocity.y * momentumDurationY;
        var newPositionY = image.currentY + momentumDistanceY;
  
        // Fix duration
        if (velocity.x !== 0) { momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x); }
        if (velocity.y !== 0) { momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y); }
        var momentumDuration = Math.max(momentumDurationX, momentumDurationY);
  
        image.currentX = newPositionX;
        image.currentY = newPositionY;
  
        // Define if we need image drag
        var scaledWidth = image.width * zoom.scale;
        var scaledHeight = image.height * zoom.scale;
        image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
        image.maxX = -image.minX;
        image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
        image.maxY = -image.minY;
        image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
        image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
  
        gesture.$imageWrapEl.transition(momentumDuration).transform(("translate3d(" + (image.currentX) + "px, " + (image.currentY) + "px,0)"));
      },
      onTransitionEnd: function onTransitionEnd() {
        var swiper = this;
        var zoom = swiper.zoom;
        var gesture = zoom.gesture;
        if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
          gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
          gesture.$imageWrapEl.transform('translate3d(0,0,0)');
  
          zoom.scale = 1;
          zoom.currentScale = 1;
  
          gesture.$slideEl = undefined;
          gesture.$imageEl = undefined;
          gesture.$imageWrapEl = undefined;
        }
      },
      // Toggle Zoom
      toggle: function toggle(e) {
        var swiper = this;
        var zoom = swiper.zoom;
  
        if (zoom.scale && zoom.scale !== 1) {
          // Zoom Out
          zoom.out();
        } else {
          // Zoom In
          zoom.in(e);
        }
      },
      in: function in$1(e) {
        var swiper = this;
  
        var zoom = swiper.zoom;
        var params = swiper.params.zoom;
        var gesture = zoom.gesture;
        var image = zoom.image;
  
        if (!gesture.$slideEl) {
          gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
          gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
        }
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
  
        gesture.$slideEl.addClass(("" + (params.zoomedSlideClass)));
  
        var touchX;
        var touchY;
        var offsetX;
        var offsetY;
        var diffX;
        var diffY;
        var translateX;
        var translateY;
        var imageWidth;
        var imageHeight;
        var scaledWidth;
        var scaledHeight;
        var translateMinX;
        var translateMinY;
        var translateMaxX;
        var translateMaxY;
        var slideWidth;
        var slideHeight;
  
        if (typeof image.touchesStart.x === 'undefined' && e) {
          touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
          touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
        } else {
          touchX = image.touchesStart.x;
          touchY = image.touchesStart.y;
        }
  
        zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
        zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
        if (e) {
          slideWidth = gesture.$slideEl[0].offsetWidth;
          slideHeight = gesture.$slideEl[0].offsetHeight;
          offsetX = gesture.$slideEl.offset().left;
          offsetY = gesture.$slideEl.offset().top;
          diffX = (offsetX + (slideWidth / 2)) - touchX;
          diffY = (offsetY + (slideHeight / 2)) - touchY;
  
          imageWidth = gesture.$imageEl[0].offsetWidth;
          imageHeight = gesture.$imageEl[0].offsetHeight;
          scaledWidth = imageWidth * zoom.scale;
          scaledHeight = imageHeight * zoom.scale;
  
          translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
          translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
          translateMaxX = -translateMinX;
          translateMaxY = -translateMinY;
  
          translateX = diffX * zoom.scale;
          translateY = diffY * zoom.scale;
  
          if (translateX < translateMinX) {
            translateX = translateMinX;
          }
          if (translateX > translateMaxX) {
            translateX = translateMaxX;
          }
  
          if (translateY < translateMinY) {
            translateY = translateMinY;
          }
          if (translateY > translateMaxY) {
            translateY = translateMaxY;
          }
        } else {
          translateX = 0;
          translateY = 0;
        }
        gesture.$imageWrapEl.transition(300).transform(("translate3d(" + translateX + "px, " + translateY + "px,0)"));
        gesture.$imageEl.transition(300).transform(("translate3d(0,0,0) scale(" + (zoom.scale) + ")"));
      },
      out: function out() {
        var swiper = this;
  
        var zoom = swiper.zoom;
        var params = swiper.params.zoom;
        var gesture = zoom.gesture;
  
        if (!gesture.$slideEl) {
          gesture.$slideEl = swiper.clickedSlide ? $(swiper.clickedSlide) : swiper.slides.eq(swiper.activeIndex);
          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas');
          gesture.$imageWrapEl = gesture.$imageEl.parent(("." + (params.containerClass)));
        }
        if (!gesture.$imageEl || gesture.$imageEl.length === 0) { return; }
  
        zoom.scale = 1;
        zoom.currentScale = 1;
        gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
        gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
        gesture.$slideEl.removeClass(("" + (params.zoomedSlideClass)));
        gesture.$slideEl = undefined;
      },
      // Attach/Detach Events
      enable: function enable() {
        var swiper = this;
        var zoom = swiper.zoom;
        if (zoom.enabled) { return; }
        zoom.enabled = true;
  
        var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
  
        // Scale image
        if (Support.gestures) {
          swiper.$wrapperEl.on('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
          swiper.$wrapperEl.on('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
          swiper.$wrapperEl.on('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
        } else if (swiper.touchEvents.start === 'touchstart') {
          swiper.$wrapperEl.on(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
          swiper.$wrapperEl.on(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
          swiper.$wrapperEl.on(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
        }
  
        // Move image
        swiper.$wrapperEl.on(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
      },
      disable: function disable() {
        var swiper = this;
        var zoom = swiper.zoom;
        if (!zoom.enabled) { return; }
  
        swiper.zoom.enabled = false;
  
        var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
  
        // Scale image
        if (Support.gestures) {
          swiper.$wrapperEl.off('gesturestart', '.swiper-slide', zoom.onGestureStart, passiveListener);
          swiper.$wrapperEl.off('gesturechange', '.swiper-slide', zoom.onGestureChange, passiveListener);
          swiper.$wrapperEl.off('gestureend', '.swiper-slide', zoom.onGestureEnd, passiveListener);
        } else if (swiper.touchEvents.start === 'touchstart') {
          swiper.$wrapperEl.off(swiper.touchEvents.start, '.swiper-slide', zoom.onGestureStart, passiveListener);
          swiper.$wrapperEl.off(swiper.touchEvents.move, '.swiper-slide', zoom.onGestureChange, passiveListener);
          swiper.$wrapperEl.off(swiper.touchEvents.end, '.swiper-slide', zoom.onGestureEnd, passiveListener);
        }
  
        // Move image
        swiper.$wrapperEl.off(swiper.touchEvents.move, ("." + (swiper.params.zoom.containerClass)), zoom.onTouchMove);
      },
    };
  
    var Zoom$1 = {
      name: 'zoom',
      params: {
        zoom: {
          enabled: false,
          maxRatio: 3,
          minRatio: 1,
          toggle: true,
          containerClass: 'swiper-zoom-container',
          zoomedSlideClass: 'swiper-slide-zoomed',
        },
      },
      create: function create() {
        var swiper = this;
        var zoom = {
          enabled: false,
          scale: 1,
          currentScale: 1,
          isScaling: false,
          gesture: {
            $slideEl: undefined,
            slideWidth: undefined,
            slideHeight: undefined,
            $imageEl: undefined,
            $imageWrapEl: undefined,
            maxRatio: 3,
          },
          image: {
            isTouched: undefined,
            isMoved: undefined,
            currentX: undefined,
            currentY: undefined,
            minX: undefined,
            minY: undefined,
            maxX: undefined,
            maxY: undefined,
            width: undefined,
            height: undefined,
            startX: undefined,
            startY: undefined,
            touchesStart: {},
            touchesCurrent: {},
          },
          velocity: {
            x: undefined,
            y: undefined,
            prevPositionX: undefined,
            prevPositionY: undefined,
            prevTime: undefined,
          },
        };
  
        ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach(function (methodName) {
          zoom[methodName] = Zoom[methodName].bind(swiper);
        });
        Utils.extend(swiper, {
          zoom: zoom,
        });
  
        var scale = 1;
        Object.defineProperty(swiper.zoom, 'scale', {
          get: function get() {
            return scale;
          },
          set: function set(value) {
            if (scale !== value) {
              var imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
              var slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
              swiper.emit('zoomChange', value, imageEl, slideEl);
            }
            scale = value;
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.zoom.enabled) {
            swiper.zoom.enable();
          }
        },
        destroy: function destroy() {
          var swiper = this;
          swiper.zoom.disable();
        },
        touchStart: function touchStart(e) {
          var swiper = this;
          if (!swiper.zoom.enabled) { return; }
          swiper.zoom.onTouchStart(e);
        },
        touchEnd: function touchEnd(e) {
          var swiper = this;
          if (!swiper.zoom.enabled) { return; }
          swiper.zoom.onTouchEnd(e);
        },
        doubleTap: function doubleTap(e) {
          var swiper = this;
          if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
            swiper.zoom.toggle(e);
          }
        },
        transitionEnd: function transitionEnd() {
          var swiper = this;
          if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
            swiper.zoom.onTransitionEnd();
          }
        },
      },
    };
  
    var Lazy = {
      loadInSlide: function loadInSlide(index, loadInDuplicate) {
        if ( loadInDuplicate === void 0 ) loadInDuplicate = true;
  
        var swiper = this;
        var params = swiper.params.lazy;
        if (typeof index === 'undefined') { return; }
        if (swiper.slides.length === 0) { return; }
        var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  
        var $slideEl = isVirtual
          ? swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]"))
          : swiper.slides.eq(index);
  
        var $images = $slideEl.find(("." + (params.elementClass) + ":not(." + (params.loadedClass) + "):not(." + (params.loadingClass) + ")"));
        if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
          $images = $images.add($slideEl[0]);
        }
        if ($images.length === 0) { return; }
  
        $images.each(function (imageIndex, imageEl) {
          var $imageEl = $(imageEl);
          $imageEl.addClass(params.loadingClass);
  
          var background = $imageEl.attr('data-background');
          var src = $imageEl.attr('data-src');
          var srcset = $imageEl.attr('data-srcset');
          var sizes = $imageEl.attr('data-sizes');
  
          swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, function () {
            if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params) || swiper.destroyed) { return; }
            if (background) {
              $imageEl.css('background-image', ("url(\"" + background + "\")"));
              $imageEl.removeAttr('data-background');
            } else {
              if (srcset) {
                $imageEl.attr('srcset', srcset);
                $imageEl.removeAttr('data-srcset');
              }
              if (sizes) {
                $imageEl.attr('sizes', sizes);
                $imageEl.removeAttr('data-sizes');
              }
              if (src) {
                $imageEl.attr('src', src);
                $imageEl.removeAttr('data-src');
              }
            }
  
            $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
            $slideEl.find(("." + (params.preloaderClass))).remove();
            if (swiper.params.loop && loadInDuplicate) {
              var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
              if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
                var originalSlide = swiper.$wrapperEl.children(("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + (swiper.params.slideDuplicateClass) + ")"));
                swiper.lazy.loadInSlide(originalSlide.index(), false);
              } else {
                var duplicatedSlide = swiper.$wrapperEl.children(("." + (swiper.params.slideDuplicateClass) + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]"));
                swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
              }
            }
            swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
          });
  
          swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
        });
      },
      load: function load() {
        var swiper = this;
        var $wrapperEl = swiper.$wrapperEl;
        var swiperParams = swiper.params;
        var slides = swiper.slides;
        var activeIndex = swiper.activeIndex;
        var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
        var params = swiperParams.lazy;
  
        var slidesPerView = swiperParams.slidesPerView;
        if (slidesPerView === 'auto') {
          slidesPerView = 0;
        }
  
        function slideExist(index) {
          if (isVirtual) {
            if ($wrapperEl.children(("." + (swiperParams.slideClass) + "[data-swiper-slide-index=\"" + index + "\"]")).length) {
              return true;
            }
          } else if (slides[index]) { return true; }
          return false;
        }
        function slideIndex(slideEl) {
          if (isVirtual) {
            return $(slideEl).attr('data-swiper-slide-index');
          }
          return $(slideEl).index();
        }
  
        if (!swiper.lazy.initialImageLoaded) { swiper.lazy.initialImageLoaded = true; }
        if (swiper.params.watchSlidesVisibility) {
          $wrapperEl.children(("." + (swiperParams.slideVisibleClass))).each(function (elIndex, slideEl) {
            var index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();
            swiper.lazy.loadInSlide(index);
          });
        } else if (slidesPerView > 1) {
          for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
            if (slideExist(i)) { swiper.lazy.loadInSlide(i); }
          }
        } else {
          swiper.lazy.loadInSlide(activeIndex);
        }
        if (params.loadPrevNext) {
          if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
            var amount = params.loadPrevNextAmount;
            var spv = slidesPerView;
            var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
            var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
            // Next Slides
            for (var i$1 = activeIndex + slidesPerView; i$1 < maxIndex; i$1 += 1) {
              if (slideExist(i$1)) { swiper.lazy.loadInSlide(i$1); }
            }
            // Prev Slides
            for (var i$2 = minIndex; i$2 < activeIndex; i$2 += 1) {
              if (slideExist(i$2)) { swiper.lazy.loadInSlide(i$2); }
            }
          } else {
            var nextSlide = $wrapperEl.children(("." + (swiperParams.slideNextClass)));
            if (nextSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(nextSlide)); }
  
            var prevSlide = $wrapperEl.children(("." + (swiperParams.slidePrevClass)));
            if (prevSlide.length > 0) { swiper.lazy.loadInSlide(slideIndex(prevSlide)); }
          }
        }
      },
    };
  
    var Lazy$1 = {
      name: 'lazy',
      params: {
        lazy: {
          enabled: false,
          loadPrevNext: false,
          loadPrevNextAmount: 1,
          loadOnTransitionStart: false,
  
          elementClass: 'swiper-lazy',
          loadingClass: 'swiper-lazy-loading',
          loadedClass: 'swiper-lazy-loaded',
          preloaderClass: 'swiper-lazy-preloader',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          lazy: {
            initialImageLoaded: false,
            load: Lazy.load.bind(swiper),
            loadInSlide: Lazy.loadInSlide.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
            swiper.params.preloadImages = false;
          }
        },
        init: function init() {
          var swiper = this;
          if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
            swiper.lazy.load();
          }
        },
        scroll: function scroll() {
          var swiper = this;
          if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
            swiper.lazy.load();
          }
        },
        resize: function resize() {
          var swiper = this;
          if (swiper.params.lazy.enabled) {
            swiper.lazy.load();
          }
        },
        scrollbarDragMove: function scrollbarDragMove() {
          var swiper = this;
          if (swiper.params.lazy.enabled) {
            swiper.lazy.load();
          }
        },
        transitionStart: function transitionStart() {
          var swiper = this;
          if (swiper.params.lazy.enabled) {
            if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
              swiper.lazy.load();
            }
          }
        },
        transitionEnd: function transitionEnd() {
          var swiper = this;
          if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
            swiper.lazy.load();
          }
        },
      },
    };
  
    /* eslint no-bitwise: ["error", { "allow": [">>"] }] */
  
    var Controller = {
      LinearSpline: function LinearSpline(x, y) {
        var binarySearch = (function search() {
          var maxIndex;
          var minIndex;
          var guess;
          return function (array, val) {
            minIndex = -1;
            maxIndex = array.length;
            while (maxIndex - minIndex > 1) {
              guess = maxIndex + minIndex >> 1;
              if (array[guess] <= val) {
                minIndex = guess;
              } else {
                maxIndex = guess;
              }
            }
            return maxIndex;
          };
        }());
        this.x = x;
        this.y = y;
        this.lastIndex = x.length - 1;
        // Given an x value (x2), return the expected y2 value:
        // (x1,y1) is the known point before given value,
        // (x3,y3) is the known point after given value.
        var i1;
        var i3;
  
        this.interpolate = function interpolate(x2) {
          if (!x2) { return 0; }
  
          // Get the indexes of x1 and x3 (the array indexes before and after given x2):
          i3 = binarySearch(this.x, x2);
          i1 = i3 - 1;
  
          // We have our indexes i1 & i3, so we can calculate already:
          // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
          return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
        };
        return this;
      },
      // xxx: for now i will just save one spline function to to
      getInterpolateFunction: function getInterpolateFunction(c) {
        var swiper = this;
        if (!swiper.controller.spline) {
          swiper.controller.spline = swiper.params.loop
            ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid)
            : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
        }
      },
      setTranslate: function setTranslate(setTranslate$1, byController) {
        var swiper = this;
        var controlled = swiper.controller.control;
        var multiplier;
        var controlledTranslate;
        function setControlledTranslate(c) {
          // this will create an Interpolate function based on the snapGrids
          // x is the Grid of the scrolled scroller and y will be the controlled scroller
          // it makes sense to create this only once and recall it for the interpolation
          // the function does a lot of value caching for performance
          var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
          if (swiper.params.controller.by === 'slide') {
            swiper.controller.getInterpolateFunction(c);
            // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
            // but it did not work out
            controlledTranslate = -swiper.controller.spline.interpolate(-translate);
          }
  
          if (!controlledTranslate || swiper.params.controller.by === 'container') {
            multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
            controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
          }
  
          if (swiper.params.controller.inverse) {
            controlledTranslate = c.maxTranslate() - controlledTranslate;
          }
          c.updateProgress(controlledTranslate);
          c.setTranslate(controlledTranslate, swiper);
          c.updateActiveIndex();
          c.updateSlidesClasses();
        }
        if (Array.isArray(controlled)) {
          for (var i = 0; i < controlled.length; i += 1) {
            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
              setControlledTranslate(controlled[i]);
            }
          }
        } else if (controlled instanceof Swiper && byController !== controlled) {
          setControlledTranslate(controlled);
        }
      },
      setTransition: function setTransition(duration, byController) {
        var swiper = this;
        var controlled = swiper.controller.control;
        var i;
        function setControlledTransition(c) {
          c.setTransition(duration, swiper);
          if (duration !== 0) {
            c.transitionStart();
            if (c.params.autoHeight) {
              Utils.nextTick(function () {
                c.updateAutoHeight();
              });
            }
            c.$wrapperEl.transitionEnd(function () {
              if (!controlled) { return; }
              if (c.params.loop && swiper.params.controller.by === 'slide') {
                c.loopFix();
              }
              c.transitionEnd();
            });
          }
        }
        if (Array.isArray(controlled)) {
          for (i = 0; i < controlled.length; i += 1) {
            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
              setControlledTransition(controlled[i]);
            }
          }
        } else if (controlled instanceof Swiper && byController !== controlled) {
          setControlledTransition(controlled);
        }
      },
    };
    var Controller$1 = {
      name: 'controller',
      params: {
        controller: {
          control: undefined,
          inverse: false,
          by: 'slide', // or 'container'
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          controller: {
            control: swiper.params.controller.control,
            getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
            setTranslate: Controller.setTranslate.bind(swiper),
            setTransition: Controller.setTransition.bind(swiper),
          },
        });
      },
      on: {
        update: function update() {
          var swiper = this;
          if (!swiper.controller.control) { return; }
          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        resize: function resize() {
          var swiper = this;
          if (!swiper.controller.control) { return; }
          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        observerUpdate: function observerUpdate() {
          var swiper = this;
          if (!swiper.controller.control) { return; }
          if (swiper.controller.spline) {
            swiper.controller.spline = undefined;
            delete swiper.controller.spline;
          }
        },
        setTranslate: function setTranslate(translate, byController) {
          var swiper = this;
          if (!swiper.controller.control) { return; }
          swiper.controller.setTranslate(translate, byController);
        },
        setTransition: function setTransition(duration, byController) {
          var swiper = this;
          if (!swiper.controller.control) { return; }
          swiper.controller.setTransition(duration, byController);
        },
      },
    };
  
    var a11y = {
      makeElFocusable: function makeElFocusable($el) {
        $el.attr('tabIndex', '0');
        return $el;
      },
      addElRole: function addElRole($el, role) {
        $el.attr('role', role);
        return $el;
      },
      addElLabel: function addElLabel($el, label) {
        $el.attr('aria-label', label);
        return $el;
      },
      disableEl: function disableEl($el) {
        $el.attr('aria-disabled', true);
        return $el;
      },
      enableEl: function enableEl($el) {
        $el.attr('aria-disabled', false);
        return $el;
      },
      onEnterKey: function onEnterKey(e) {
        var swiper = this;
        var params = swiper.params.a11y;
        if (e.keyCode !== 13) { return; }
        var $targetEl = $(e.target);
        if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
          if (!(swiper.isEnd && !swiper.params.loop)) {
            swiper.slideNext();
          }
          if (swiper.isEnd) {
            swiper.a11y.notify(params.lastSlideMessage);
          } else {
            swiper.a11y.notify(params.nextSlideMessage);
          }
        }
        if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
          if (!(swiper.isBeginning && !swiper.params.loop)) {
            swiper.slidePrev();
          }
          if (swiper.isBeginning) {
            swiper.a11y.notify(params.firstSlideMessage);
          } else {
            swiper.a11y.notify(params.prevSlideMessage);
          }
        }
        if (swiper.pagination && $targetEl.is(("." + (swiper.params.pagination.bulletClass)))) {
          $targetEl[0].click();
        }
      },
      notify: function notify(message) {
        var swiper = this;
        var notification = swiper.a11y.liveRegion;
        if (notification.length === 0) { return; }
        notification.html('');
        notification.html(message);
      },
      updateNavigation: function updateNavigation() {
        var swiper = this;
  
        if (swiper.params.loop) { return; }
        var ref = swiper.navigation;
        var $nextEl = ref.$nextEl;
        var $prevEl = ref.$prevEl;
  
        if ($prevEl && $prevEl.length > 0) {
          if (swiper.isBeginning) {
            swiper.a11y.disableEl($prevEl);
          } else {
            swiper.a11y.enableEl($prevEl);
          }
        }
        if ($nextEl && $nextEl.length > 0) {
          if (swiper.isEnd) {
            swiper.a11y.disableEl($nextEl);
          } else {
            swiper.a11y.enableEl($nextEl);
          }
        }
      },
      updatePagination: function updatePagination() {
        var swiper = this;
        var params = swiper.params.a11y;
        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
          swiper.pagination.bullets.each(function (bulletIndex, bulletEl) {
            var $bulletEl = $(bulletEl);
            swiper.a11y.makeElFocusable($bulletEl);
            swiper.a11y.addElRole($bulletEl, 'button');
            swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));
          });
        }
      },
      init: function init() {
        var swiper = this;
  
        swiper.$el.append(swiper.a11y.liveRegion);
  
        // Navigation
        var params = swiper.params.a11y;
        var $nextEl;
        var $prevEl;
        if (swiper.navigation && swiper.navigation.$nextEl) {
          $nextEl = swiper.navigation.$nextEl;
        }
        if (swiper.navigation && swiper.navigation.$prevEl) {
          $prevEl = swiper.navigation.$prevEl;
        }
        if ($nextEl) {
          swiper.a11y.makeElFocusable($nextEl);
          swiper.a11y.addElRole($nextEl, 'button');
          swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
          $nextEl.on('keydown', swiper.a11y.onEnterKey);
        }
        if ($prevEl) {
          swiper.a11y.makeElFocusable($prevEl);
          swiper.a11y.addElRole($prevEl, 'button');
          swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
          $prevEl.on('keydown', swiper.a11y.onEnterKey);
        }
  
        // Pagination
        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
          swiper.pagination.$el.on('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
        }
      },
      destroy: function destroy() {
        var swiper = this;
        if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) { swiper.a11y.liveRegion.remove(); }
  
        var $nextEl;
        var $prevEl;
        if (swiper.navigation && swiper.navigation.$nextEl) {
          $nextEl = swiper.navigation.$nextEl;
        }
        if (swiper.navigation && swiper.navigation.$prevEl) {
          $prevEl = swiper.navigation.$prevEl;
        }
        if ($nextEl) {
          $nextEl.off('keydown', swiper.a11y.onEnterKey);
        }
        if ($prevEl) {
          $prevEl.off('keydown', swiper.a11y.onEnterKey);
        }
  
        // Pagination
        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
          swiper.pagination.$el.off('keydown', ("." + (swiper.params.pagination.bulletClass)), swiper.a11y.onEnterKey);
        }
      },
    };
    var A11y = {
      name: 'a11y',
      params: {
        a11y: {
          enabled: true,
          notificationClass: 'swiper-notification',
          prevSlideMessage: 'Previous slide',
          nextSlideMessage: 'Next slide',
          firstSlideMessage: 'This is the first slide',
          lastSlideMessage: 'This is the last slide',
          paginationBulletMessage: 'Go to slide {{index}}',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          a11y: {
            liveRegion: $(("<span class=\"" + (swiper.params.a11y.notificationClass) + "\" aria-live=\"assertive\" aria-atomic=\"true\"></span>")),
          },
        });
        Object.keys(a11y).forEach(function (methodName) {
          swiper.a11y[methodName] = a11y[methodName].bind(swiper);
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (!swiper.params.a11y.enabled) { return; }
          swiper.a11y.init();
          swiper.a11y.updateNavigation();
        },
        toEdge: function toEdge() {
          var swiper = this;
          if (!swiper.params.a11y.enabled) { return; }
          swiper.a11y.updateNavigation();
        },
        fromEdge: function fromEdge() {
          var swiper = this;
          if (!swiper.params.a11y.enabled) { return; }
          swiper.a11y.updateNavigation();
        },
        paginationUpdate: function paginationUpdate() {
          var swiper = this;
          if (!swiper.params.a11y.enabled) { return; }
          swiper.a11y.updatePagination();
        },
        destroy: function destroy() {
          var swiper = this;
          if (!swiper.params.a11y.enabled) { return; }
          swiper.a11y.destroy();
        },
      },
    };
  
    var History = {
      init: function init() {
        var swiper = this;
        if (!swiper.params.history) { return; }
        if (!win.history || !win.history.pushState) {
          swiper.params.history.enabled = false;
          swiper.params.hashNavigation.enabled = true;
          return;
        }
        var history = swiper.history;
        history.initialized = true;
        history.paths = History.getPathValues();
        if (!history.paths.key && !history.paths.value) { return; }
        history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);
        if (!swiper.params.history.replaceState) {
          win.addEventListener('popstate', swiper.history.setHistoryPopState);
        }
      },
      destroy: function destroy() {
        var swiper = this;
        if (!swiper.params.history.replaceState) {
          win.removeEventListener('popstate', swiper.history.setHistoryPopState);
        }
      },
      setHistoryPopState: function setHistoryPopState() {
        var swiper = this;
        swiper.history.paths = History.getPathValues();
        swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
      },
      getPathValues: function getPathValues() {
        var pathArray = win.location.pathname.slice(1).split('/').filter(function (part) { return part !== ''; });
        var total = pathArray.length;
        var key = pathArray[total - 2];
        var value = pathArray[total - 1];
        return { key: key, value: value };
      },
      setHistory: function setHistory(key, index) {
        var swiper = this;
        if (!swiper.history.initialized || !swiper.params.history.enabled) { return; }
        var slide = swiper.slides.eq(index);
        var value = History.slugify(slide.attr('data-history'));
        if (!win.location.pathname.includes(key)) {
          value = key + "/" + value;
        }
        var currentState = win.history.state;
        if (currentState && currentState.value === value) {
          return;
        }
        if (swiper.params.history.replaceState) {
          win.history.replaceState({ value: value }, null, value);
        } else {
          win.history.pushState({ value: value }, null, value);
        }
      },
      slugify: function slugify(text) {
        return text.toString()
          .replace(/\s+/g, '-')
          .replace(/[^\w-]+/g, '')
          .replace(/--+/g, '-')
          .replace(/^-+/, '')
          .replace(/-+$/, '');
      },
      scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {
        var swiper = this;
        if (value) {
          for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
            var slide = swiper.slides.eq(i);
            var slideHistory = History.slugify(slide.attr('data-history'));
            if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
              var index = slide.index();
              swiper.slideTo(index, speed, runCallbacks);
            }
          }
        } else {
          swiper.slideTo(0, speed, runCallbacks);
        }
      },
    };
  
    var History$1 = {
      name: 'history',
      params: {
        history: {
          enabled: false,
          replaceState: false,
          key: 'slides',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          history: {
            init: History.init.bind(swiper),
            setHistory: History.setHistory.bind(swiper),
            setHistoryPopState: History.setHistoryPopState.bind(swiper),
            scrollToSlide: History.scrollToSlide.bind(swiper),
            destroy: History.destroy.bind(swiper),
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.history.enabled) {
            swiper.history.init();
          }
        },
        destroy: function destroy() {
          var swiper = this;
          if (swiper.params.history.enabled) {
            swiper.history.destroy();
          }
        },
        transitionEnd: function transitionEnd() {
          var swiper = this;
          if (swiper.history.initialized) {
            swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
          }
        },
      },
    };
  
    var HashNavigation = {
      onHashCange: function onHashCange() {
        var swiper = this;
        var newHash = doc.location.hash.replace('#', '');
        var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');
        if (newHash !== activeSlideHash) {
          var newIndex = swiper.$wrapperEl.children(("." + (swiper.params.slideClass) + "[data-hash=\"" + newHash + "\"]")).index();
          if (typeof newIndex === 'undefined') { return; }
          swiper.slideTo(newIndex);
        }
      },
      setHash: function setHash() {
        var swiper = this;
        if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) { return; }
        if (swiper.params.hashNavigation.replaceState && win.history && win.history.replaceState) {
          win.history.replaceState(null, null, (("#" + (swiper.slides.eq(swiper.activeIndex).attr('data-hash'))) || ''));
        } else {
          var slide = swiper.slides.eq(swiper.activeIndex);
          var hash = slide.attr('data-hash') || slide.attr('data-history');
          doc.location.hash = hash || '';
        }
      },
      init: function init() {
        var swiper = this;
        if (!swiper.params.hashNavigation.enabled || (swiper.params.history && swiper.params.history.enabled)) { return; }
        swiper.hashNavigation.initialized = true;
        var hash = doc.location.hash.replace('#', '');
        if (hash) {
          var speed = 0;
          for (var i = 0, length = swiper.slides.length; i < length; i += 1) {
            var slide = swiper.slides.eq(i);
            var slideHash = slide.attr('data-hash') || slide.attr('data-history');
            if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
              var index = slide.index();
              swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
            }
          }
        }
        if (swiper.params.hashNavigation.watchState) {
          $(win).on('hashchange', swiper.hashNavigation.onHashCange);
        }
      },
      destroy: function destroy() {
        var swiper = this;
        if (swiper.params.hashNavigation.watchState) {
          $(win).off('hashchange', swiper.hashNavigation.onHashCange);
        }
      },
    };
    var HashNavigation$1 = {
      name: 'hash-navigation',
      params: {
        hashNavigation: {
          enabled: false,
          replaceState: false,
          watchState: false,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          hashNavigation: {
            initialized: false,
            init: HashNavigation.init.bind(swiper),
            destroy: HashNavigation.destroy.bind(swiper),
            setHash: HashNavigation.setHash.bind(swiper),
            onHashCange: HashNavigation.onHashCange.bind(swiper),
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.hashNavigation.enabled) {
            swiper.hashNavigation.init();
          }
        },
        destroy: function destroy() {
          var swiper = this;
          if (swiper.params.hashNavigation.enabled) {
            swiper.hashNavigation.destroy();
          }
        },
        transitionEnd: function transitionEnd() {
          var swiper = this;
          if (swiper.hashNavigation.initialized) {
            swiper.hashNavigation.setHash();
          }
        },
      },
    };
  
    /* eslint no-underscore-dangle: "off" */
  
    var Autoplay = {
      run: function run() {
        var swiper = this;
        var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
        var delay = swiper.params.autoplay.delay;
        if ($activeSlideEl.attr('data-swiper-autoplay')) {
          delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
        }
        swiper.autoplay.timeout = Utils.nextTick(function () {
          if (swiper.params.autoplay.reverseDirection) {
            if (swiper.params.loop) {
              swiper.loopFix();
              swiper.slidePrev(swiper.params.speed, true, true);
              swiper.emit('autoplay');
            } else if (!swiper.isBeginning) {
              swiper.slidePrev(swiper.params.speed, true, true);
              swiper.emit('autoplay');
            } else if (!swiper.params.autoplay.stopOnLastSlide) {
              swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
              swiper.emit('autoplay');
            } else {
              swiper.autoplay.stop();
            }
          } else if (swiper.params.loop) {
            swiper.loopFix();
            swiper.slideNext(swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else if (!swiper.isEnd) {
            swiper.slideNext(swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else if (!swiper.params.autoplay.stopOnLastSlide) {
            swiper.slideTo(0, swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else {
            swiper.autoplay.stop();
          }
        }, delay);
      },
      start: function start() {
        var swiper = this;
        if (typeof swiper.autoplay.timeout !== 'undefined') { return false; }
        if (swiper.autoplay.running) { return false; }
        swiper.autoplay.running = true;
        swiper.emit('autoplayStart');
        swiper.autoplay.run();
        return true;
      },
      stop: function stop() {
        var swiper = this;
        if (!swiper.autoplay.running) { return false; }
        if (typeof swiper.autoplay.timeout === 'undefined') { return false; }
  
        if (swiper.autoplay.timeout) {
          clearTimeout(swiper.autoplay.timeout);
          swiper.autoplay.timeout = undefined;
        }
        swiper.autoplay.running = false;
        swiper.emit('autoplayStop');
        return true;
      },
      pause: function pause(speed) {
        var swiper = this;
        if (!swiper.autoplay.running) { return; }
        if (swiper.autoplay.paused) { return; }
        if (swiper.autoplay.timeout) { clearTimeout(swiper.autoplay.timeout); }
        swiper.autoplay.paused = true;
        if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
          swiper.autoplay.paused = false;
          swiper.autoplay.run();
        } else {
          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
        }
      },
    };
  
    var Autoplay$1 = {
      name: 'autoplay',
      params: {
        autoplay: {
          enabled: false,
          delay: 3000,
          waitForTransition: true,
          disableOnInteraction: true,
          stopOnLastSlide: false,
          reverseDirection: false,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          autoplay: {
            running: false,
            paused: false,
            run: Autoplay.run.bind(swiper),
            start: Autoplay.start.bind(swiper),
            stop: Autoplay.stop.bind(swiper),
            pause: Autoplay.pause.bind(swiper),
            onTransitionEnd: function onTransitionEnd(e) {
              if (!swiper || swiper.destroyed || !swiper.$wrapperEl) { return; }
              if (e.target !== this) { return; }
              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
              swiper.autoplay.paused = false;
              if (!swiper.autoplay.running) {
                swiper.autoplay.stop();
              } else {
                swiper.autoplay.run();
              }
            },
          },
        });
      },
      on: {
        init: function init() {
          var swiper = this;
          if (swiper.params.autoplay.enabled) {
            swiper.autoplay.start();
          }
        },
        beforeTransitionStart: function beforeTransitionStart(speed, internal) {
          var swiper = this;
          if (swiper.autoplay.running) {
            if (internal || !swiper.params.autoplay.disableOnInteraction) {
              swiper.autoplay.pause(speed);
            } else {
              swiper.autoplay.stop();
            }
          }
        },
        sliderFirstMove: function sliderFirstMove() {
          var swiper = this;
          if (swiper.autoplay.running) {
            if (swiper.params.autoplay.disableOnInteraction) {
              swiper.autoplay.stop();
            } else {
              swiper.autoplay.pause();
            }
          }
        },
        destroy: function destroy() {
          var swiper = this;
          if (swiper.autoplay.running) {
            swiper.autoplay.stop();
          }
        },
      },
    };
  
    var Fade = {
      setTranslate: function setTranslate() {
        var swiper = this;
        var slides = swiper.slides;
        for (var i = 0; i < slides.length; i += 1) {
          var $slideEl = swiper.slides.eq(i);
          var offset = $slideEl[0].swiperSlideOffset;
          var tx = -offset;
          if (!swiper.params.virtualTranslate) { tx -= swiper.translate; }
          var ty = 0;
          if (!swiper.isHorizontal()) {
            ty = tx;
            tx = 0;
          }
          var slideOpacity = swiper.params.fadeEffect.crossFade
            ? Math.max(1 - Math.abs($slideEl[0].progress), 0)
            : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
          $slideEl
            .css({
              opacity: slideOpacity,
            })
            .transform(("translate3d(" + tx + "px, " + ty + "px, 0px)"));
        }
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        var slides = swiper.slides;
        var $wrapperEl = swiper.$wrapperEl;
        slides.transition(duration);
        if (swiper.params.virtualTranslate && duration !== 0) {
          var eventTriggered = false;
          slides.transitionEnd(function () {
            if (eventTriggered) { return; }
            if (!swiper || swiper.destroyed) { return; }
            eventTriggered = true;
            swiper.animating = false;
            var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
            for (var i = 0; i < triggerEvents.length; i += 1) {
              $wrapperEl.trigger(triggerEvents[i]);
            }
          });
        }
      },
    };
  
    var EffectFade = {
      name: 'effect-fade',
      params: {
        fadeEffect: {
          crossFade: false,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          fadeEffect: {
            setTranslate: Fade.setTranslate.bind(swiper),
            setTransition: Fade.setTransition.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (swiper.params.effect !== 'fade') { return; }
          swiper.classNames.push(((swiper.params.containerModifierClass) + "fade"));
          var overwriteParams = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: true,
            spaceBetween: 0,
            virtualTranslate: true,
          };
          Utils.extend(swiper.params, overwriteParams);
          Utils.extend(swiper.originalParams, overwriteParams);
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (swiper.params.effect !== 'fade') { return; }
          swiper.fadeEffect.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          if (swiper.params.effect !== 'fade') { return; }
          swiper.fadeEffect.setTransition(duration);
        },
      },
    };
  
    var Cube = {
      setTranslate: function setTranslate() {
        var swiper = this;
        var $el = swiper.$el;
        var $wrapperEl = swiper.$wrapperEl;
        var slides = swiper.slides;
        var swiperWidth = swiper.width;
        var swiperHeight = swiper.height;
        var rtl = swiper.rtlTranslate;
        var swiperSize = swiper.size;
        var params = swiper.params.cubeEffect;
        var isHorizontal = swiper.isHorizontal();
        var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
        var wrapperRotate = 0;
        var $cubeShadowEl;
        if (params.shadow) {
          if (isHorizontal) {
            $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
            if ($cubeShadowEl.length === 0) {
              $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
              $wrapperEl.append($cubeShadowEl);
            }
            $cubeShadowEl.css({ height: (swiperWidth + "px") });
          } else {
            $cubeShadowEl = $el.find('.swiper-cube-shadow');
            if ($cubeShadowEl.length === 0) {
              $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
              $el.append($cubeShadowEl);
            }
          }
        }
        for (var i = 0; i < slides.length; i += 1) {
          var $slideEl = slides.eq(i);
          var slideIndex = i;
          if (isVirtual) {
            slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
          }
          var slideAngle = slideIndex * 90;
          var round = Math.floor(slideAngle / 360);
          if (rtl) {
            slideAngle = -slideAngle;
            round = Math.floor(-slideAngle / 360);
          }
          var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
          var tx = 0;
          var ty = 0;
          var tz = 0;
          if (slideIndex % 4 === 0) {
            tx = -round * 4 * swiperSize;
            tz = 0;
          } else if ((slideIndex - 1) % 4 === 0) {
            tx = 0;
            tz = -round * 4 * swiperSize;
          } else if ((slideIndex - 2) % 4 === 0) {
            tx = swiperSize + (round * 4 * swiperSize);
            tz = swiperSize;
          } else if ((slideIndex - 3) % 4 === 0) {
            tx = -swiperSize;
            tz = (3 * swiperSize) + (swiperSize * 4 * round);
          }
          if (rtl) {
            tx = -tx;
          }
  
          if (!isHorizontal) {
            ty = tx;
            tx = 0;
          }
  
          var transform = "rotateX(" + (isHorizontal ? 0 : -slideAngle) + "deg) rotateY(" + (isHorizontal ? slideAngle : 0) + "deg) translate3d(" + tx + "px, " + ty + "px, " + tz + "px)";
          if (progress <= 1 && progress > -1) {
            wrapperRotate = (slideIndex * 90) + (progress * 90);
            if (rtl) { wrapperRotate = (-slideIndex * 90) - (progress * 90); }
          }
          $slideEl.transform(transform);
          if (params.slideShadows) {
            // Set shadows
            var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
            var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
            if (shadowBefore.length === 0) {
              shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
              $slideEl.append(shadowBefore);
            }
            if (shadowAfter.length === 0) {
              shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
              $slideEl.append(shadowAfter);
            }
            if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
            if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
          }
        }
        $wrapperEl.css({
          '-webkit-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
          '-moz-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
          '-ms-transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
          'transform-origin': ("50% 50% -" + (swiperSize / 2) + "px"),
        });
  
        if (params.shadow) {
          if (isHorizontal) {
            $cubeShadowEl.transform(("translate3d(0px, " + ((swiperWidth / 2) + params.shadowOffset) + "px, " + (-swiperWidth / 2) + "px) rotateX(90deg) rotateZ(0deg) scale(" + (params.shadowScale) + ")"));
          } else {
            var shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
            var multiplier = 1.5 - (
              (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2)
              + (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
            );
            var scale1 = params.shadowScale;
            var scale2 = params.shadowScale / multiplier;
            var offset = params.shadowOffset;
            $cubeShadowEl.transform(("scale3d(" + scale1 + ", 1, " + scale2 + ") translate3d(0px, " + ((swiperHeight / 2) + offset) + "px, " + (-swiperHeight / 2 / scale2) + "px) rotateX(-90deg)"));
          }
        }
        var zFactor = (Browser.isSafari || Browser.isUiWebView) ? (-swiperSize / 2) : 0;
        $wrapperEl
          .transform(("translate3d(0px,0," + zFactor + "px) rotateX(" + (swiper.isHorizontal() ? 0 : wrapperRotate) + "deg) rotateY(" + (swiper.isHorizontal() ? -wrapperRotate : 0) + "deg)"));
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        var $el = swiper.$el;
        var slides = swiper.slides;
        slides
          .transition(duration)
          .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
          .transition(duration);
        if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
          $el.find('.swiper-cube-shadow').transition(duration);
        }
      },
    };
  
    var EffectCube = {
      name: 'effect-cube',
      params: {
        cubeEffect: {
          slideShadows: true,
          shadow: true,
          shadowOffset: 20,
          shadowScale: 0.94,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          cubeEffect: {
            setTranslate: Cube.setTranslate.bind(swiper),
            setTransition: Cube.setTransition.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (swiper.params.effect !== 'cube') { return; }
          swiper.classNames.push(((swiper.params.containerModifierClass) + "cube"));
          swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
          var overwriteParams = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: true,
            resistanceRatio: 0,
            spaceBetween: 0,
            centeredSlides: false,
            virtualTranslate: true,
          };
          Utils.extend(swiper.params, overwriteParams);
          Utils.extend(swiper.originalParams, overwriteParams);
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (swiper.params.effect !== 'cube') { return; }
          swiper.cubeEffect.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          if (swiper.params.effect !== 'cube') { return; }
          swiper.cubeEffect.setTransition(duration);
        },
      },
    };
  
    var Flip = {
      setTranslate: function setTranslate() {
        var swiper = this;
        var slides = swiper.slides;
        var rtl = swiper.rtlTranslate;
        for (var i = 0; i < slides.length; i += 1) {
          var $slideEl = slides.eq(i);
          var progress = $slideEl[0].progress;
          if (swiper.params.flipEffect.limitRotation) {
            progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
          }
          var offset = $slideEl[0].swiperSlideOffset;
          var rotate = -180 * progress;
          var rotateY = rotate;
          var rotateX = 0;
          var tx = -offset;
          var ty = 0;
          if (!swiper.isHorizontal()) {
            ty = tx;
            tx = 0;
            rotateX = -rotateY;
            rotateY = 0;
          } else if (rtl) {
            rotateY = -rotateY;
          }
  
          $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;
  
          if (swiper.params.flipEffect.slideShadows) {
            // Set shadows
            var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
            var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
            if (shadowBefore.length === 0) {
              shadowBefore = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'left' : 'top') + "\"></div>"));
              $slideEl.append(shadowBefore);
            }
            if (shadowAfter.length === 0) {
              shadowAfter = $(("<div class=\"swiper-slide-shadow-" + (swiper.isHorizontal() ? 'right' : 'bottom') + "\"></div>"));
              $slideEl.append(shadowAfter);
            }
            if (shadowBefore.length) { shadowBefore[0].style.opacity = Math.max(-progress, 0); }
            if (shadowAfter.length) { shadowAfter[0].style.opacity = Math.max(progress, 0); }
          }
          $slideEl
            .transform(("translate3d(" + tx + "px, " + ty + "px, 0px) rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)"));
        }
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        var slides = swiper.slides;
        var activeIndex = swiper.activeIndex;
        var $wrapperEl = swiper.$wrapperEl;
        slides
          .transition(duration)
          .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
          .transition(duration);
        if (swiper.params.virtualTranslate && duration !== 0) {
          var eventTriggered = false;
          // eslint-disable-next-line
          slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
            if (eventTriggered) { return; }
            if (!swiper || swiper.destroyed) { return; }
            // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;
            eventTriggered = true;
            swiper.animating = false;
            var triggerEvents = ['webkitTransitionEnd', 'transitionend'];
            for (var i = 0; i < triggerEvents.length; i += 1) {
              $wrapperEl.trigger(triggerEvents[i]);
            }
          });
        }
      },
    };
  
    var EffectFlip = {
      name: 'effect-flip',
      params: {
        flipEffect: {
          slideShadows: true,
          limitRotation: true,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          flipEffect: {
            setTranslate: Flip.setTranslate.bind(swiper),
            setTransition: Flip.setTransition.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (swiper.params.effect !== 'flip') { return; }
          swiper.classNames.push(((swiper.params.containerModifierClass) + "flip"));
          swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
          var overwriteParams = {
            slidesPerView: 1,
            slidesPerColumn: 1,
            slidesPerGroup: 1,
            watchSlidesProgress: true,
            spaceBetween: 0,
            virtualTranslate: true,
          };
          Utils.extend(swiper.params, overwriteParams);
          Utils.extend(swiper.originalParams, overwriteParams);
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (swiper.params.effect !== 'flip') { return; }
          swiper.flipEffect.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          if (swiper.params.effect !== 'flip') { return; }
          swiper.flipEffect.setTransition(duration);
        },
      },
    };
  
    var Coverflow = {
      setTranslate: function setTranslate() {
        var swiper = this;
        var swiperWidth = swiper.width;
        var swiperHeight = swiper.height;
        var slides = swiper.slides;
        var $wrapperEl = swiper.$wrapperEl;
        var slidesSizesGrid = swiper.slidesSizesGrid;
        var params = swiper.params.coverflowEffect;
        var isHorizontal = swiper.isHorizontal();
        var transform = swiper.translate;
        var center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
        var rotate = isHorizontal ? params.rotate : -params.rotate;
        var translate = params.depth;
        // Each slide offset from center
        for (var i = 0, length = slides.length; i < length; i += 1) {
          var $slideEl = slides.eq(i);
          var slideSize = slidesSizesGrid[i];
          var slideOffset = $slideEl[0].swiperSlideOffset;
          var offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;
  
          var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
          var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
          // var rotateZ = 0
          var translateZ = -translate * Math.abs(offsetMultiplier);
  
          var translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);
          var translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;
  
          // Fix for ultra small values
          if (Math.abs(translateX) < 0.001) { translateX = 0; }
          if (Math.abs(translateY) < 0.001) { translateY = 0; }
          if (Math.abs(translateZ) < 0.001) { translateZ = 0; }
          if (Math.abs(rotateY) < 0.001) { rotateY = 0; }
          if (Math.abs(rotateX) < 0.001) { rotateX = 0; }
  
          var slideTransform = "translate3d(" + translateX + "px," + translateY + "px," + translateZ + "px)  rotateX(" + rotateX + "deg) rotateY(" + rotateY + "deg)";
  
          $slideEl.transform(slideTransform);
          $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
          if (params.slideShadows) {
            // Set shadows
            var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
            var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
            if ($shadowBeforeEl.length === 0) {
              $shadowBeforeEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'left' : 'top') + "\"></div>"));
              $slideEl.append($shadowBeforeEl);
            }
            if ($shadowAfterEl.length === 0) {
              $shadowAfterEl = $(("<div class=\"swiper-slide-shadow-" + (isHorizontal ? 'right' : 'bottom') + "\"></div>"));
              $slideEl.append($shadowAfterEl);
            }
            if ($shadowBeforeEl.length) { $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0; }
            if ($shadowAfterEl.length) { $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0; }
          }
        }
  
        // Set correct perspective for IE10
        if (Support.pointerEvents || Support.prefixedPointerEvents) {
          var ws = $wrapperEl[0].style;
          ws.perspectiveOrigin = center + "px 50%";
        }
      },
      setTransition: function setTransition(duration) {
        var swiper = this;
        swiper.slides
          .transition(duration)
          .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
          .transition(duration);
      },
    };
  
    var EffectCoverflow = {
      name: 'effect-coverflow',
      params: {
        coverflowEffect: {
          rotate: 50,
          stretch: 0,
          depth: 100,
          modifier: 1,
          slideShadows: true,
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          coverflowEffect: {
            setTranslate: Coverflow.setTranslate.bind(swiper),
            setTransition: Coverflow.setTransition.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          if (swiper.params.effect !== 'coverflow') { return; }
  
          swiper.classNames.push(((swiper.params.containerModifierClass) + "coverflow"));
          swiper.classNames.push(((swiper.params.containerModifierClass) + "3d"));
  
          swiper.params.watchSlidesProgress = true;
          swiper.originalParams.watchSlidesProgress = true;
        },
        setTranslate: function setTranslate() {
          var swiper = this;
          if (swiper.params.effect !== 'coverflow') { return; }
          swiper.coverflowEffect.setTranslate();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          if (swiper.params.effect !== 'coverflow') { return; }
          swiper.coverflowEffect.setTransition(duration);
        },
      },
    };
  
    var Thumbs = {
      init: function init() {
        var swiper = this;
        var ref = swiper.params;
        var thumbsParams = ref.thumbs;
        var SwiperClass = swiper.constructor;
        if (thumbsParams.swiper instanceof SwiperClass) {
          swiper.thumbs.swiper = thumbsParams.swiper;
          Utils.extend(swiper.thumbs.swiper.originalParams, {
            watchSlidesProgress: true,
            slideToClickedSlide: false,
          });
          Utils.extend(swiper.thumbs.swiper.params, {
            watchSlidesProgress: true,
            slideToClickedSlide: false,
          });
        } else if (Utils.isObject(thumbsParams.swiper)) {
          swiper.thumbs.swiper = new SwiperClass(Utils.extend({}, thumbsParams.swiper, {
            watchSlidesVisibility: true,
            watchSlidesProgress: true,
            slideToClickedSlide: false,
          }));
          swiper.thumbs.swiperCreated = true;
        }
        swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
        swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
      },
      onThumbClick: function onThumbClick() {
        var swiper = this;
        var thumbsSwiper = swiper.thumbs.swiper;
        if (!thumbsSwiper) { return; }
        var clickedIndex = thumbsSwiper.clickedIndex;
        var clickedSlide = thumbsSwiper.clickedSlide;
        if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) { return; }
        if (typeof clickedIndex === 'undefined' || clickedIndex === null) { return; }
        var slideToIndex;
        if (thumbsSwiper.params.loop) {
          slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
        } else {
          slideToIndex = clickedIndex;
        }
        if (swiper.params.loop) {
          var currentIndex = swiper.activeIndex;
          if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
            swiper.loopFix();
            // eslint-disable-next-line
            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
            currentIndex = swiper.activeIndex;
          }
          var prevIndex = swiper.slides.eq(currentIndex).prevAll(("[data-swiper-slide-index=\"" + slideToIndex + "\"]")).eq(0).index();
          var nextIndex = swiper.slides.eq(currentIndex).nextAll(("[data-swiper-slide-index=\"" + slideToIndex + "\"]")).eq(0).index();
          if (typeof prevIndex === 'undefined') { slideToIndex = nextIndex; }
          else if (typeof nextIndex === 'undefined') { slideToIndex = prevIndex; }
          else if (nextIndex - currentIndex < currentIndex - prevIndex) { slideToIndex = nextIndex; }
          else { slideToIndex = prevIndex; }
        }
        swiper.slideTo(slideToIndex);
      },
      update: function update(initial) {
        var swiper = this;
        var thumbsSwiper = swiper.thumbs.swiper;
        if (!thumbsSwiper) { return; }
  
        var slidesPerView = thumbsSwiper.params.slidesPerView === 'auto'
          ? thumbsSwiper.slidesPerViewDynamic()
          : thumbsSwiper.params.slidesPerView;
  
        if (swiper.realIndex !== thumbsSwiper.realIndex) {
          var currentThumbsIndex = thumbsSwiper.activeIndex;
          var newThumbsIndex;
          if (thumbsSwiper.params.loop) {
            if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
              thumbsSwiper.loopFix();
              // eslint-disable-next-line
              thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
              currentThumbsIndex = thumbsSwiper.activeIndex;
            }
            // Find actual thumbs index to slide to
            var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(("[data-swiper-slide-index=\"" + (swiper.realIndex) + "\"]")).eq(0).index();
            var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(("[data-swiper-slide-index=\"" + (swiper.realIndex) + "\"]")).eq(0).index();
            if (typeof prevThumbsIndex === 'undefined') { newThumbsIndex = nextThumbsIndex; }
            else if (typeof nextThumbsIndex === 'undefined') { newThumbsIndex = prevThumbsIndex; }
            else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) { newThumbsIndex = currentThumbsIndex; }
            else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) { newThumbsIndex = nextThumbsIndex; }
            else { newThumbsIndex = prevThumbsIndex; }
          } else {
            newThumbsIndex = swiper.realIndex;
          }
          if (thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
            if (thumbsSwiper.params.centeredSlides) {
              if (newThumbsIndex > currentThumbsIndex) {
                newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
              } else {
                newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
              }
            } else if (newThumbsIndex > currentThumbsIndex) {
              newThumbsIndex = newThumbsIndex - slidesPerView + 1;
            }
            thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
          }
        }
  
        // Activate thumbs
        var thumbsToActivate = 1;
        var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
  
        if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
          thumbsToActivate = swiper.params.slidesPerView;
        }
  
        thumbsSwiper.slides.removeClass(thumbActiveClass);
        if (thumbsSwiper.params.loop) {
          for (var i = 0; i < thumbsToActivate; i += 1) {
            thumbsSwiper.$wrapperEl.children(("[data-swiper-slide-index=\"" + (swiper.realIndex + i) + "\"]")).addClass(thumbActiveClass);
          }
        } else {
          for (var i$1 = 0; i$1 < thumbsToActivate; i$1 += 1) {
            thumbsSwiper.slides.eq(swiper.realIndex + i$1).addClass(thumbActiveClass);
          }
        }
      },
    };
    var Thumbs$1 = {
      name: 'thumbs',
      params: {
        thumbs: {
          swiper: null,
          slideThumbActiveClass: 'swiper-slide-thumb-active',
          thumbsContainerClass: 'swiper-container-thumbs',
        },
      },
      create: function create() {
        var swiper = this;
        Utils.extend(swiper, {
          thumbs: {
            swiper: null,
            init: Thumbs.init.bind(swiper),
            update: Thumbs.update.bind(swiper),
            onThumbClick: Thumbs.onThumbClick.bind(swiper),
          },
        });
      },
      on: {
        beforeInit: function beforeInit() {
          var swiper = this;
          var ref = swiper.params;
          var thumbs = ref.thumbs;
          if (!thumbs || !thumbs.swiper) { return; }
          swiper.thumbs.init();
          swiper.thumbs.update(true);
        },
        slideChange: function slideChange() {
          var swiper = this;
          if (!swiper.thumbs.swiper) { return; }
          swiper.thumbs.update();
        },
        update: function update() {
          var swiper = this;
          if (!swiper.thumbs.swiper) { return; }
          swiper.thumbs.update();
        },
        resize: function resize() {
          var swiper = this;
          if (!swiper.thumbs.swiper) { return; }
          swiper.thumbs.update();
        },
        observerUpdate: function observerUpdate() {
          var swiper = this;
          if (!swiper.thumbs.swiper) { return; }
          swiper.thumbs.update();
        },
        setTransition: function setTransition(duration) {
          var swiper = this;
          var thumbsSwiper = swiper.thumbs.swiper;
          if (!thumbsSwiper) { return; }
          thumbsSwiper.setTransition(duration);
        },
        beforeDestroy: function beforeDestroy() {
          var swiper = this;
          var thumbsSwiper = swiper.thumbs.swiper;
          if (!thumbsSwiper) { return; }
          if (swiper.thumbs.swiperCreated && thumbsSwiper) {
            thumbsSwiper.destroy();
          }
        },
      },
    };
  
    // Swiper Class
  
    var components = [
      Device$1,
      Support$1,
      Browser$1,
      Resize,
      Observer$1,
      Virtual$1,
      Keyboard$1,
      Mousewheel$1,
      Navigation$1,
      Pagination$1,
      Scrollbar$1,
      Parallax$1,
      Zoom$1,
      Lazy$1,
      Controller$1,
      A11y,
      History$1,
      HashNavigation$1,
      Autoplay$1,
      EffectFade,
      EffectCube,
      EffectFlip,
      EffectCoverflow,
      Thumbs$1
    ];
  
    if (typeof Swiper.use === 'undefined') {
      Swiper.use = Swiper.Class.use;
      Swiper.installModule = Swiper.Class.installModule;
    }
  
    Swiper.use(components);
  
    return Swiper;
  
  }));
  
},{}],"index":[function(require,module,exports){
// require('./common')
require('../index/billboard'); //billboard img hover
require('../index/testimonial'); //fetch testimonals and contry flags
require('../index/recent_order'); //fetch recent order and scroll up
// require('../common/pop_currency').init(); //Pop Currency for Spanish
require('../common/pop_skip').init(); //Pop subdomain jump dialog
require('../styleGallery/user_gallery').init();
require('../index/special-offer-index').init();
require('../index/banner');
require('../common/download_app_sus');
// require('../lib/ecommerce').handleDOMReady();


},{"../common/download_app_sus":1,"../common/pop_skip":2,"../index/banner":3,"../index/billboard":4,"../index/recent_order":5,"../index/special-offer-index":6,"../index/testimonial":7,"../styleGallery/user_gallery":33}]},{},[])
//# sourceMappingURL=data:application/json;base64,
