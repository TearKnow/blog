require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var UserAgent = require('../mod/userAgent');
var userAgent = new UserAgent();
var StringHandle = require('../mod/stringHandle');
var stringHandle = new StringHandle();
var Cookie = require('../mod/cookie');
var cookie = new Cookie();

var status = {
    loadingGoodsInFavor : false,
    loadedGoodsInFavor : false,
    favorIsEmpty : true,
    mouseIsInFavorIcon : false
};

var favorIcon = $("#js-favor-icon");
var list = favorIcon.find(".nav-favor-desc");
var showRoomList = favorIcon.find(".showroom-list");
var navFavorite = favorIcon.find(".nav-favorite");

var userFavorCount = function() {
    $.ajax({
        'type': 'POST',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': 'act=get_default_showroom_goods_count',
        'dataType': 'json',
        'success': function (r) {
            if (r.code === 0 && r.count > 0) {
                $("#js-user-favor-count").html(r.count);
                $("#js-user-favor-count").show();
            }
        }
    });
};

var displayFavorList = function () {
    $('.tip-arrow').css('display','none');
    $('.showroom-tip').css('display','none');
    var favorCount = parseInt($('#favorGoodsTotal').html());
    if(favorCount <= 0){
        favorIcon.addClass("over");
    }
};

var hideFavorList = function () {
    status.mouseIsInFavorIcon = false;
    favorIcon.removeClass("over");
    showRoomList.css('display','none');
};

function openShowroomDialog() {
    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay');
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
    };

    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

    $(".showroom-dialog").css("display", "block");
    $('#loginDialog').css('display','none');
    var clientHeight = window.innerHeight ;
    if(clientHeight > 650){
        $(".showroom-dialog").css("top",$(window).scrollTop() + $(window).height() / 7);
    }else{
        $(".showroom-dialog").css("top",$(window).scrollTop());
    }
};

var init = function () {
    // var isShowDialog = cookie.getCookie('HowItWork') ? cookie.getCookie('HowItWork') : false;
    // if (isShowDialog) {
    //     openShowroomDialog();
    //     cookie.setCookie('HowItWork', false, -1);
    // }
    // userFavorCount();
    favorIcon.hover(displayFavorList, function () {
        hideFavorList();
    });

    $('.showroom-dialog-close').on("click",function () {
        $(".showroom-dialog").css("display", "none");
        $('#dialogOverlay').css("display", "none");
    });

    $('.showroom-work-explain').on('mouseenter',function () {
        $('.explain-showroom-content').css("display","block");
    });

    $('.showroom-work-explain').on('mouseleave',function () {
        $('.explain-showroom-content').css("display","none");
    });

    initShowRoomList();
    initCreateShowRoom();

};

var initShowRoomList = function () {
    var param = {
        "act": "get_user_showroom_list",
    }
    $.ajax({
        'type': 'get',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        'success': function (r) {
            if (r.code == 0) {
                var showroom_list = "";
                var otherShowroom = ""
                var defaultShowroom = ""
                var web_root = webData.WEB_ROOT || "/"
                var orignName = _lang.page_showroom_name || "{$sh_name}'s showroom"
                for (var i = 0;i<r.showroom_list.length;i++) {

                    //ellipsis the sh_name which is too long, it makes "aaaaaaaaaaaaaaaaaa's Showroom" to "aaaaaaaaaa...'s Showroom"
                    if(r.showroom_list[i]["sh_name"].length > 18)
                    {
                        r.showroom_list[i]["sh_name"] = r.showroom_list[i]["sh_name"].substr(0,15) + "..."
                    }

                    var name = orignName.replace("{$sh_name}", r.showroom_list[i]['sh_name'])
                    if (r.showroom_list[i]['is_default'] == 1) {
                        defaultShowroom = "<a class=\"default-showroom\" href=\"" + web_root + "showroom.php?id=" + r.showroom_list[i]['sh_id'] + "\">" + name + "</a>";
                    } else {
                        otherShowroom += "<a href=\"" + web_root + "showroom.php?id=" + r.showroom_list[i]['sh_id'] + "\">" + name + "</a>";
                    }
                }
                showroom_list += defaultShowroom + otherShowroom
                $('.user-showroom-list').html(showroom_list);
                if (r.self_showroom_count >= 3) {
                    $('.create-showroom').css('display','none');
                } else {
                    $('.create-showroom').css('display','block');
                }
            }
        }
    });
}

var initCreateShowRoom = function () {
    $('.create-showroom').on("click",function () {
        if (window.login_status === true) {
            openShowroomDialog();
        }
    });
}

var initActiveShowRoom = function () {
    var param = {
        "act": "get_active_showroom",
    }
    $.ajax({
        'type': 'get',
        'url': webData.WEB_ROOT + 'ajax.php',
        'data': param,
        'cache': true,
        'dataType': 'json',
        'success': function (r) {
            if (r.code == 0) {
                $('.favorite-link').find('.nologin-text').css("display", "none");
                $('.favorite-link').find('.showroom-text').css("display","block");
                $('.favorite-link').find('.showroom-text').text(r.data);
                $('.showroom-default-text').css("display","block");
                // $('.favorite-link').attr("href","/showroom.php");

                var width = $('.favorite-link').find('.showroom-text').width();
                var dwidth = $('.showroom-default-text').width();
                if (width+dwidth > 59) {
                    var dvalue = width+dwidth-59;
                    $('.nav-favorite').css('width',120+dvalue);
                    $('#js-favor-icon').css('right',120+dvalue);
                    $('.header-right').css('right',165+dvalue);
                }
                $('.nav-favorite').find('em').addClass('account-more');
            }
        }
    });
};

var disableLoaded = function () {
    status.loadedGoodsInFavor = false;
};

var pop = function () {
    displayFavorList();
};
module.exports = {
    "init": init,
    "disableLoaded": disableLoaded,
    "pop": pop,
    "initShowRoomList": initShowRoomList,
    "initActiveShowRoom": initActiveShowRoom,
    "initCreateShowRoom": initCreateShowRoom
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":3,"../mod/stringHandle":8,"../mod/userAgent":9}],2:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
	var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	/*!
	 * jQuery Form Plugin
	 * version: 3.45.0-2013.10.17
	 * Requires jQuery v1.5 or later
	 * Copyright (c) 2013 M. Alsup
	 * Examples and documentation at: http://malsup.com/jquery/form/
	 * Project repository: https://github.com/malsup/form
	 * Dual licensed under the MIT and GPL licenses.
	 * https://github.com/malsup/form#copyright-and-license
	 */
	/*global ActiveXObject */
	;(function($) {
	"use strict";

	/*
		Usage Note:
		-----------
		Do not use both ajaxSubmit and ajaxForm on the same form.  These
		functions are mutually exclusive.  Use ajaxSubmit if you want
		to bind your own submit handler to the form.  For example,

		$(document).ready(function() {
			$('#myForm').on('submit', function(e) {
				e.preventDefault(); // <-- important
				$(this).ajaxSubmit({
					target: '#output'
				});
			});
		});

		Use ajaxForm when you want the plugin to manage all the event binding
		for you.  For example,

		$(document).ready(function() {
			$('#myForm').ajaxForm({
				target: '#output'
			});
		});

		You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
		form does not have to exist when you invoke ajaxForm:

		$('#myForm').ajaxForm({
			delegation: true,
			target: '#output'
		});

		When using ajaxForm, the ajaxSubmit function will be invoked for you
		at the appropriate time.
	*/

	/**
	 * Feature detection
	 */
	var feature = {};
	feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
	feature.formdata = window.FormData !== undefined;

	var hasProp = !!$.fn.prop;

	// attr2 uses prop when it can but checks the return type for
	// an expected string.  this accounts for the case where a form 
	// contains inputs with names like "action" or "method"; in those
	// cases "prop" returns the element
	$.fn.attr2 = function() {
		if ( ! hasProp )
			return this.attr.apply(this, arguments);
		var val = this.prop.apply(this, arguments);
		if ( ( val && val.jquery ) || typeof val === 'string' )
			return val;
		return this.attr.apply(this, arguments);
	};

	/**
	 * ajaxSubmit() provides a mechanism for immediately submitting
	 * an HTML form using AJAX.
	 */
	$.fn.ajaxSubmit = function(options) {
		/*jshint scripturl:true */

		// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
		if (!this.length) {
			log('ajaxSubmit: skipping submit process - no element selected');
			return this;
		}

		var method, action, url, $form = this;

		if (typeof options == 'function') {
			options = { success: options };
		}
		else if ( options === undefined ) {
			options = {};
		}

		method = options.type || this.attr2('method');
		action = options.url  || this.attr2('action');

		url = (typeof action === 'string') ? $.trim(action) : '';
		url = url || window.location.href || '';
		if (url) {
			// clean url (don't include hash vaue)
			url = (url.match(/^([^#]+)/)||[])[1];
		}

		options = $.extend(true, {
			url:  url,
			success: $.ajaxSettings.success,
			type: method || $.ajaxSettings.type,
			iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
		}, options);

		// hook for manipulating the form data before it is extracted;
		// convenient for use with rich editors like tinyMCE or FCKEditor
		var veto = {};
		this.trigger('form-pre-serialize', [this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
			return this;
		}

		// provide opportunity to alter form data before it is serialized
		if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSerialize callback');
			return this;
		}

		var traditional = options.traditional;
		if ( traditional === undefined ) {
			traditional = $.ajaxSettings.traditional;
		}

		var elements = [];
		var qx, a = this.formToArray(options.semantic, elements);
		if (options.data) {
			options.extraData = options.data;
			qx = $.param(options.data, traditional);
		}

		// give pre-submit callback an opportunity to abort the submit
		if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSubmit callback');
			return this;
		}

		// fire vetoable 'validate' event
		this.trigger('form-submit-validate', [a, this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
			return this;
		}

		var q = $.param(a, traditional);
		if (qx) {
			q = ( q ? (q + '&' + qx) : qx );
		}
		if (options.type.toUpperCase() == 'GET') {
			options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
			options.data = null;  // data is null for 'get'
		}
		else {
			options.data = q; // data is the query string for 'post'
		}

		var callbacks = [];
		if (options.resetForm) {
			callbacks.push(function() { $form.resetForm(); });
		}
		if (options.clearForm) {
			callbacks.push(function() { $form.clearForm(options.includeHidden); });
		}

		// perform a load on the target only if dataType is not provided
		if (!options.dataType && options.target) {
			var oldSuccess = options.success || function(){};
			callbacks.push(function(data) {
				var fn = options.replaceTarget ? 'replaceWith' : 'html';
				$(options.target)[fn](data).each(oldSuccess, arguments);
			});
		}
		else if (options.success) {
			callbacks.push(options.success);
		}

		options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
			var context = options.context || this ;    // jQuery 1.4+ supports scope context
			for (var i=0, max=callbacks.length; i < max; i++) {
				callbacks[i].apply(context, [data, status, xhr || $form, $form]);
			}
		};

		if (options.error) {
			var oldError = options.error;
			options.error = function(xhr, status, error) {
				var context = options.context || this;
				oldError.apply(context, [xhr, status, error, $form]);
			};
		}

		 if (options.complete) {
			var oldComplete = options.complete;
			options.complete = function(xhr, status) {
				var context = options.context || this;
				oldComplete.apply(context, [xhr, status, $form]);
			};
		}

		// are there files to upload?

		// [value] (issue #113), also see comment:
		// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
		var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

		var hasFileInputs = fileInputs.length > 0;
		var mp = 'multipart/form-data';
		var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

		var fileAPI = feature.fileapi && feature.formdata;
		log("fileAPI :" + fileAPI);
		var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

		var jqxhr;

		// options.iframe allows user to force iframe mode
		// 06-NOV-09: now defaulting to iframe mode if file input is detected
		if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
			// hack to fix Safari hang (thanks to Tim Molendijk for this)
			// see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
			if (options.closeKeepAlive) {
				$.get(options.closeKeepAlive, function() {
					jqxhr = fileUploadIframe(a);
				});
			}
			else {
				jqxhr = fileUploadIframe(a);
			}
		}
		else if ((hasFileInputs || multipart) && fileAPI) {
			jqxhr = fileUploadXhr(a);
		}
		else {
			jqxhr = $.ajax(options);
		}

		$form.removeData('jqxhr').data('jqxhr', jqxhr);

		// clear element array
		for (var k=0; k < elements.length; k++)
			elements[k] = null;

		// fire 'notify' event
		this.trigger('form-submit-notify', [this, options]);
		return this;

		// utility fn for deep serialization
		function deepSerialize(extraData){
			var serialized = $.param(extraData, options.traditional).split('&');
			var len = serialized.length;
			var result = [];
			var i, part;
			for (i=0; i < len; i++) {
				// #252; undo param space replacement
				serialized[i] = serialized[i].replace(/\+/g,' ');
				part = serialized[i].split('=');
				// #278; use array instead of object storage, favoring array serializations
				result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
			}
			return result;
		}

		 // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
		function fileUploadXhr(a) {
			var formdata = new FormData();

			for (var i=0; i < a.length; i++) {
				formdata.append(a[i].name, a[i].value);
			}

			if (options.extraData) {
				var serializedData = deepSerialize(options.extraData);
				for (i=0; i < serializedData.length; i++)
					if (serializedData[i])
						formdata.append(serializedData[i][0], serializedData[i][1]);
			}

			options.data = null;

			var s = $.extend(true, {}, $.ajaxSettings, options, {
				contentType: false,
				processData: false,
				cache: false,
				type: method || 'POST'
			});

			if (options.uploadProgress) {
				// workaround because jqXHR does not expose upload property
				s.xhr = function() {
					var xhr = $.ajaxSettings.xhr();
					if (xhr.upload) {
						xhr.upload.addEventListener('progress', function(event) {
							var percent = 0;
							var position = event.loaded || event.position; /*event.position is deprecated*/
							var total = event.total;
							if (event.lengthComputable) {
								percent = Math.ceil(position / total * 100);
							}
							options.uploadProgress(event, position, total, percent);
						}, false);
					}
					return xhr;
				};
			}

			s.data = null;
			var beforeSend = s.beforeSend;
			s.beforeSend = function(xhr, o) {
				//Send FormData() provided by user
				if (options.formData)
					o.data = options.formData;
				else
					o.data = formdata;
				if(beforeSend)
					beforeSend.call(this, xhr, o);
			};
			return $.ajax(s);
		}

		// private function for handling file uploads (hat tip to YAHOO!)
		function fileUploadIframe(a) {
			var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
			var deferred = $.Deferred();

			// #341
			deferred.abort = function(status) {
				xhr.abort(status);
			};

			if (a) {
				// ensure that every serialized input is still enabled
				for (i=0; i < elements.length; i++) {
					el = $(elements[i]);
					if ( hasProp )
						el.prop('disabled', false);
					else
						el.removeAttr('disabled');
				}
			}

			s = $.extend(true, {}, $.ajaxSettings, options);
			s.context = s.context || s;
			id = 'jqFormIO' + (new Date().getTime());
			if (s.iframeTarget) {
				$io = $(s.iframeTarget);
				n = $io.attr2('name');
				if (!n)
					 $io.attr2('name', id);
				else
					id = n;
			}
			else {
				$io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
				$io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
			}
			io = $io[0];


			xhr = { // mock object
				aborted: 0,
				responseText: null,
				responseXML: null,
				status: 0,
				statusText: 'n/a',
				getAllResponseHeaders: function() {},
				getResponseHeader: function() {},
				setRequestHeader: function() {},
				abort: function(status) {
					var e = (status === 'timeout' ? 'timeout' : 'aborted');
					log('aborting upload... ' + e);
					this.aborted = 1;

					try { // #214, #257
						if (io.contentWindow.document.execCommand) {
							io.contentWindow.document.execCommand('Stop');
						}
					}
					catch(ignore) {}

					$io.attr('src', s.iframeSrc); // abort op in progress
					xhr.error = e;
					if (s.error)
						s.error.call(s.context, xhr, e, status);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, e]);
					if (s.complete)
						s.complete.call(s.context, xhr, e);
				}
			};

			g = s.global;
			// trigger ajax global events so that activity/block indicators work like normal
			if (g && 0 === $.active++) {
				$.event.trigger("ajaxStart");
			}
			if (g) {
				$.event.trigger("ajaxSend", [xhr, s]);
			}

			if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
				if (s.global) {
					$.active--;
				}
				deferred.reject();
				return deferred;
			}
			if (xhr.aborted) {
				deferred.reject();
				return deferred;
			}

			// add submitting element to data if we know it
			sub = form.clk;
			if (sub) {
				n = sub.name;
				if (n && !sub.disabled) {
					s.extraData = s.extraData || {};
					s.extraData[n] = sub.value;
					if (sub.type == "image") {
						s.extraData[n+'.x'] = form.clk_x;
						s.extraData[n+'.y'] = form.clk_y;
					}
				}
			}

			var CLIENT_TIMEOUT_ABORT = 1;
			var SERVER_ABORT = 2;
					
			function getDoc(frame) {
				/* it looks like contentWindow or contentDocument do not
				 * carry the protocol property in ie8, when running under ssl
				 * frame.document is the only valid response document, since
				 * the protocol is know but not on the other two objects. strange?
				 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
				 */
				
				var doc = null;
				
				// IE8 cascading access check
				try {
					if (frame.contentWindow) {
						doc = frame.contentWindow.document;
					}
				} catch(err) {
					// IE8 access denied under ssl & missing protocol
					log('cannot get iframe.contentWindow document: ' + err);
				}

				if (doc) { // successful getting content
					return doc;
				}

				try { // simply checking may throw in ie8 under ssl or mismatched protocol
					doc = frame.contentDocument ? frame.contentDocument : frame.document;
				} catch(err) {
					// last attempt
					log('cannot get iframe.contentDocument: ' + err);
					doc = frame.document;
				}
				return doc;
			}

			// Rails CSRF hack (thanks to Yvan Barthelemy)
			var csrf_token = $('meta[name=csrf-token]').attr('content');
			var csrf_param = $('meta[name=csrf-param]').attr('content');
			if (csrf_param && csrf_token) {
				s.extraData = s.extraData || {};
				s.extraData[csrf_param] = csrf_token;
			}

			// take a breath so that pending repaints get some cpu time before the upload starts
			function doSubmit() {
				// make sure form attrs are set
				var t = $form.attr2('target'), a = $form.attr2('action');

				// update form attrs in IE friendly way
				form.setAttribute('target',id);
				if (!method || /post/i.test(method) ) {
					form.setAttribute('method', 'POST');
				}
				if (a != s.url) {
					form.setAttribute('action', s.url);
				}

				// ie borks in some cases when setting encoding
				if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
					$form.attr({
						encoding: 'multipart/form-data',
						enctype:  'multipart/form-data'
					});
				}

				// support timout
				if (s.timeout) {
					timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
				}

				// look for server aborts
				function checkState() {
					try {
						var state = getDoc(io).readyState;
						log('state = ' + state);
						if (state && state.toLowerCase() == 'uninitialized')
							setTimeout(checkState,50);
					}
					catch(e) {
						log('Server abort: ' , e, ' (', e.name, ')');
						cb(SERVER_ABORT);
						if (timeoutHandle)
							clearTimeout(timeoutHandle);
						timeoutHandle = undefined;
					}
				}

				// add "extra" data to form if provided in options
				var extraInputs = [];
				try {
					if (s.extraData) {
						for (var n in s.extraData) {
							if (s.extraData.hasOwnProperty(n)) {
							   // if using the $.param format that allows for multiple values with the same name
							   if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
								   extraInputs.push(
								   $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
									   .appendTo(form)[0]);
							   } else {
								   extraInputs.push(
								   $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
									   .appendTo(form)[0]);
							   }
							}
						}
					}

					if (!s.iframeTarget) {
						// add iframe to doc and submit the form
						$io.appendTo('body');
					}
					if (io.attachEvent)
						io.attachEvent('onload', cb);
					else
						io.addEventListener('load', cb, false);
					setTimeout(checkState,15);

					try {
						form.submit();
					} catch(err) {
						// just in case form has element with name/id of 'submit'
						var submitFn = document.createElement('form').submit;
						submitFn.apply(form);
					}
				}
				finally {
					// reset attrs and remove "extra" input elements
					form.setAttribute('action',a);
					if(t) {
						form.setAttribute('target', t);
					} else {
						$form.removeAttr('target');
					}
					$(extraInputs).remove();
				}
			}

			if (s.forceSync) {
				doSubmit();
			}
			else {
				setTimeout(doSubmit, 10); // this lets dom updates render
			}

			var data, doc, domCheckCount = 50, callbackProcessed;

			function cb(e) {
				if (xhr.aborted || callbackProcessed) {
					return;
				}
				
				doc = getDoc(io);
				if(!doc) {
					log('cannot access response document');
					e = SERVER_ABORT;
				}
				if (e === CLIENT_TIMEOUT_ABORT && xhr) {
					xhr.abort('timeout');
					deferred.reject(xhr, 'timeout');
					return;
				}
				else if (e == SERVER_ABORT && xhr) {
					xhr.abort('server abort');
					deferred.reject(xhr, 'error', 'server abort');
					return;
				}

				if (!doc || doc.location.href == s.iframeSrc) {
					// response not received yet
					if (!timedOut)
						return;
				}
				if (io.detachEvent)
					io.detachEvent('onload', cb);
				else
					io.removeEventListener('load', cb, false);

				var status = 'success', errMsg;
				try {
					if (timedOut) {
						throw 'timeout';
					}

					var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
					log('isXml='+isXml);
					if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
						if (--domCheckCount) {
							// in some browsers (Opera) the iframe DOM is not always traversable when
							// the onload callback fires, so we loop a bit to accommodate
							log('requeing onLoad callback, DOM not available');
							setTimeout(cb, 250);
							return;
						}
						// let this fall through because server response could be an empty document
						//log('Could not access iframe DOM after mutiple tries.');
						//throw 'DOMException: not available';
					}

					//log('response detected');
					var docRoot = doc.body ? doc.body : doc.documentElement;
					xhr.responseText = docRoot ? docRoot.innerHTML : null;
					xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
					if (isXml)
						s.dataType = 'xml';
					xhr.getResponseHeader = function(header){
						var headers = {'content-type': s.dataType};
						return headers[header.toLowerCase()];
					};
					// support for XHR 'status' & 'statusText' emulation :
					if (docRoot) {
						xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
						xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
					}

					var dt = (s.dataType || '').toLowerCase();
					var scr = /(json|script|text)/.test(dt);
					if (scr || s.textarea) {
						// see if user embedded response in textarea
						var ta = doc.getElementsByTagName('textarea')[0];
						if (ta) {
							xhr.responseText = ta.value;
							// support for XHR 'status' & 'statusText' emulation :
							xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
							xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
						}
						else if (scr) {
							// account for browsers injecting pre around json response
							var pre = doc.getElementsByTagName('pre')[0];
							var b = doc.getElementsByTagName('body')[0];
							if (pre) {
								xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
							}
							else if (b) {
								xhr.responseText = b.textContent ? b.textContent : b.innerText;
							}
						}
					}
					else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
						xhr.responseXML = toXml(xhr.responseText);
					}

					try {
						data = httpData(xhr, dt, s);
					}
					catch (err) {
						status = 'parsererror';
						xhr.error = errMsg = (err || status);
					}
				}
				catch (err) {
					log('error caught: ',err);
					status = 'error';
					xhr.error = errMsg = (err || status);
				}

				if (xhr.aborted) {
					log('upload aborted');
					status = null;
				}

				if (xhr.status) { // we've set xhr.status
					status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
				}

				// ordering of these callbacks/triggers is odd, but that's how $.ajax does it
				if (status === 'success') {
					if (s.success)
						s.success.call(s.context, data, 'success', xhr);
					deferred.resolve(xhr.responseText, 'success', xhr);
					if (g)
						$.event.trigger("ajaxSuccess", [xhr, s]);
				}
				else if (status) {
					if (errMsg === undefined)
						errMsg = xhr.statusText;
					if (s.error)
						s.error.call(s.context, xhr, status, errMsg);
					deferred.reject(xhr, 'error', errMsg);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, errMsg]);
				}

				if (g)
					$.event.trigger("ajaxComplete", [xhr, s]);

				if (g && ! --$.active) {
					$.event.trigger("ajaxStop");
				}

				if (s.complete)
					s.complete.call(s.context, xhr, status);

				callbackProcessed = true;
				if (s.timeout)
					clearTimeout(timeoutHandle);

				// clean up
				setTimeout(function() {
					if (!s.iframeTarget)
						$io.remove();
					else  //adding else to clean up existing iframe response.
						$io.attr('src', s.iframeSrc);
					xhr.responseXML = null;
				}, 100);
			}

			var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
				if (window.ActiveXObject) {
					doc = new ActiveXObject('Microsoft.XMLDOM');
					doc.async = 'false';
					doc.loadXML(s);
				}
				else {
					doc = (new DOMParser()).parseFromString(s, 'text/xml');
				}
				return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
			};
			var parseJSON = $.parseJSON || function(s) {
				/*jslint evil:true */
				return window['eval']('(' + s + ')');
			};

			var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

				var ct = xhr.getResponseHeader('content-type') || '',
					xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
					data = xml ? xhr.responseXML : xhr.responseText;

				if (xml && data.documentElement.nodeName === 'parsererror') {
					if ($.error)
						$.error('parsererror');
				}
				if (s && s.dataFilter) {
					data = s.dataFilter(data, type);
				}
				if (typeof data === 'string') {
					if (type === 'json' || !type && ct.indexOf('json') >= 0) {
						data = parseJSON(data);
					} else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
						$.globalEval(data);
					}
				}
				return data;
			};

			return deferred;
		}
	};

	/**
	 * ajaxForm() provides a mechanism for fully automating form submission.
	 *
	 * The advantages of using this method instead of ajaxSubmit() are:
	 *
	 * 1: This method will include coordinates for <input type="image" /> elements (if the element
	 *    is used to submit the form).
	 * 2. This method will include the submit element's name/value data (for the element that was
	 *    used to submit the form).
	 * 3. This method binds the submit() method to the form for you.
	 *
	 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
	 * passes the options argument along after properly binding events for submit elements and
	 * the form itself.
	 */
	$.fn.ajaxForm = function(options) {
		options = options || {};
		options.delegation = options.delegation && $.isFunction($.fn.on);

		// in jQuery 1.3+ we can fix mistakes with the ready state
		if (!options.delegation && this.length === 0) {
			var o = { s: this.selector, c: this.context };
			if (!$.isReady && o.s) {
				log('DOM not ready, queuing ajaxForm');
				$(function() {
					$(o.s,o.c).ajaxForm(options);
				});
				return this;
			}
			// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
			log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
			return this;
		}

		if ( options.delegation ) {
			$(document)
				.off('submit.form-plugin', this.selector, doAjaxSubmit)
				.off('click.form-plugin', this.selector, captureSubmittingElement)
				.on('submit.form-plugin', this.selector, options, doAjaxSubmit)
				.on('click.form-plugin', this.selector, options, captureSubmittingElement);
			return this;
		}

		return this.ajaxFormUnbind()
			.bind('submit.form-plugin', options, doAjaxSubmit)
			.bind('click.form-plugin', options, captureSubmittingElement);
	};

	// private event handlers
	function doAjaxSubmit(e) {
		/*jshint validthis:true */
		var options = e.data;
		if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
			e.preventDefault();
			$(e.target).ajaxSubmit(options); // #365
		}
	}

	function captureSubmittingElement(e) {
		/*jshint validthis:true */
		var target = e.target;
		var $el = $(target);
		if (!($el.is("[type=submit],[type=image]"))) {
			// is this a child element of the submit el?  (ex: a span within a button)
			var t = $el.closest('[type=submit]');
			if (t.length === 0) {
				return;
			}
			target = t[0];
		}
		var form = this;
		form.clk = target;
		if (target.type == 'image') {
			if (e.offsetX !== undefined) {
				form.clk_x = e.offsetX;
				form.clk_y = e.offsetY;
			} else if (typeof $.fn.offset == 'function') {
				var offset = $el.offset();
				form.clk_x = e.pageX - offset.left;
				form.clk_y = e.pageY - offset.top;
			} else {
				form.clk_x = e.pageX - target.offsetLeft;
				form.clk_y = e.pageY - target.offsetTop;
			}
		}
		// clear form vars
		setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
	}


	// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
	$.fn.ajaxFormUnbind = function() {
		return this.unbind('submit.form-plugin click.form-plugin');
	};

	/**
	 * formToArray() gathers form element data into an array of objects that can
	 * be passed to any of the following ajax functions: $.get, $.post, or load.
	 * Each object in the array has both a 'name' and 'value' property.  An example of
	 * an array for a simple login form might be:
	 *
	 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
	 *
	 * It is this array that is passed to pre-submit callback functions provided to the
	 * ajaxSubmit() and ajaxForm() methods.
	 */
	$.fn.formToArray = function(semantic, elements) {
		var a = [];
		if (this.length === 0) {
			return a;
		}

		var form = this[0];
		var els = semantic ? form.getElementsByTagName('*') : form.elements;
		if (!els) {
			return a;
		}

		var i,j,n,v,el,max,jmax;
		for(i=0, max=els.length; i < max; i++) {
			el = els[i];
			n = el.name;
			if (!n || el.disabled) {
				continue;
			}

			if (semantic && form.clk && el.type == "image") {
				// handle image inputs on the fly when semantic == true
				if(form.clk == el) {
					a.push({name: n, value: $(el).val(), type: el.type });
					a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
				}
				continue;
			}

			v = $.fieldValue(el, true);
			if (v && v.constructor == Array) {
				if (elements)
					elements.push(el);
				for(j=0, jmax=v.length; j < jmax; j++) {
					a.push({name: n, value: v[j]});
				}
			}
			else if (feature.fileapi && el.type == 'file') {
				if (elements)
					elements.push(el);
				var files = el.files;
				if (files.length) {
					for (j=0; j < files.length; j++) {
						a.push({name: n, value: files[j], type: el.type});
					}
				}
				else {
					// #180
					a.push({ name: n, value: '', type: el.type });
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				if (elements)
					elements.push(el);
				a.push({name: n, value: v, type: el.type, required: el.required});
			}
		}

		if (!semantic && form.clk) {
			// input type=='image' are not found in elements array! handle it here
			var $input = $(form.clk), input = $input[0];
			n = input.name;
			if (n && !input.disabled && input.type == 'image') {
				a.push({name: n, value: $input.val()});
				a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
			}
		}
		return a;
	};

	/**
	 * Serializes form data into a 'submittable' string. This method will return a string
	 * in the format: name1=value1&amp;name2=value2
	 */
	$.fn.formSerialize = function(semantic) {
		//hand off to jQuery.param for proper encoding
		return $.param(this.formToArray(semantic));
	};

	/**
	 * Serializes all field elements in the jQuery object into a query string.
	 * This method will return a string in the format: name1=value1&amp;name2=value2
	 */
	$.fn.fieldSerialize = function(successful) {
		var a = [];
		this.each(function() {
			var n = this.name;
			if (!n) {
				return;
			}
			var v = $.fieldValue(this, successful);
			if (v && v.constructor == Array) {
				for (var i=0,max=v.length; i < max; i++) {
					a.push({name: n, value: v[i]});
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				a.push({name: this.name, value: v});
			}
		});
		//hand off to jQuery.param for proper encoding
		return $.param(a);
	};

	/**
	 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
	 *
	 *  <form><fieldset>
	 *      <input name="A" type="text" />
	 *      <input name="A" type="text" />
	 *      <input name="B" type="checkbox" value="B1" />
	 *      <input name="B" type="checkbox" value="B2"/>
	 *      <input name="C" type="radio" value="C1" />
	 *      <input name="C" type="radio" value="C2" />
	 *  </fieldset></form>
	 *
	 *  var v = $('input[type=text]').fieldValue();
	 *  // if no values are entered into the text inputs
	 *  v == ['','']
	 *  // if values entered into the text inputs are 'foo' and 'bar'
	 *  v == ['foo','bar']
	 *
	 *  var v = $('input[type=checkbox]').fieldValue();
	 *  // if neither checkbox is checked
	 *  v === undefined
	 *  // if both checkboxes are checked
	 *  v == ['B1', 'B2']
	 *
	 *  var v = $('input[type=radio]').fieldValue();
	 *  // if neither radio is checked
	 *  v === undefined
	 *  // if first radio is checked
	 *  v == ['C1']
	 *
	 * The successful argument controls whether or not the field element must be 'successful'
	 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
	 * The default value of the successful argument is true.  If this value is false the value(s)
	 * for each element is returned.
	 *
	 * Note: This method *always* returns an array.  If no valid value can be determined the
	 *    array will be empty, otherwise it will contain one or more values.
	 */
	$.fn.fieldValue = function(successful) {
		for (var val=[], i=0, max=this.length; i < max; i++) {
			var el = this[i];
			var v = $.fieldValue(el, successful);
			if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
				continue;
			}
			if (v.constructor == Array)
				$.merge(val, v);
			else
				val.push(v);
		}
		return val;
	};

	/**
	 * Returns the value of the field element.
	 */
	$.fieldValue = function(el, successful) {
		var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
		if (successful === undefined) {
			successful = true;
		}

		if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
			(t == 'checkbox' || t == 'radio') && !el.checked ||
			(t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
			tag == 'select' && el.selectedIndex == -1)) {
				return null;
		}

		if (tag == 'select') {
			var index = el.selectedIndex;
			if (index < 0) {
				return null;
			}
			var a = [], ops = el.options;
			var one = (t == 'select-one');
			var max = (one ? index+1 : ops.length);
			for(var i=(one ? index : 0); i < max; i++) {
				var op = ops[i];
				if (op.selected) {
					var v = op.value;
					if (!v) { // extra pain for IE...
						v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
					}
					if (one) {
						return v;
					}
					a.push(v);
				}
			}
			return a;
		}
		return $(el).val();
	};

	/**
	 * Clears the form data.  Takes the following actions on the form's input fields:
	 *  - input text fields will have their 'value' property set to the empty string
	 *  - select elements will have their 'selectedIndex' property set to -1
	 *  - checkbox and radio inputs will have their 'checked' property set to false
	 *  - inputs of type submit, button, reset, and hidden will *not* be effected
	 *  - button elements will *not* be effected
	 */
	$.fn.clearForm = function(includeHidden) {
		return this.each(function() {
			$('input,select,textarea', this).clearFields(includeHidden);
		});
	};

	/**
	 * Clears the selected form elements.
	 */
	$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
		var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
		return this.each(function() {
			var t = this.type, tag = this.tagName.toLowerCase();
			if (re.test(t) || tag == 'textarea') {
				this.value = '';
			}
			else if (t == 'checkbox' || t == 'radio') {
				this.checked = false;
			}
			else if (tag == 'select') {
				this.selectedIndex = -1;
			}
			else if (t == "file") {
				if (/MSIE/.test(navigator.userAgent)) {
					$(this).replaceWith($(this).clone(true));
				} else {
					$(this).val('');
				}
			}
			else if (includeHidden) {
				// includeHidden can be the value true, or it can be a selector string
				// indicating a special test; for example:
				//  $('#myForm').clearForm('.special:hidden')
				// the above would clean hidden inputs that have the class of 'special'
				if ( (includeHidden === true && /hidden/.test(t)) ||
					 (typeof includeHidden == 'string' && $(this).is(includeHidden)) )
					this.value = '';
			}
		});
	};

	/**
	 * Resets the form data.  Causes all form elements to be reset to their original value.
	 */
	$.fn.resetForm = function() {
		return this.each(function() {
			// guard against an input with the name of 'reset'
			// note that IE reports the reset function as an 'object'
			if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
				this.reset();
			}
		});
	};

	/**
	 * Enables or disables any matching elements.
	 */
	$.fn.enable = function(b) {
		if (b === undefined) {
			b = true;
		}
		return this.each(function() {
			this.disabled = !b;
		});
	};

	/**
	 * Checks/unchecks any matching checkboxes or radio buttons and
	 * selects/deselects and matching option elements.
	 */
	$.fn.selected = function(select) {
		if (select === undefined) {
			select = true;
		}
		return this.each(function() {
			var t = this.type;
			if (t == 'checkbox' || t == 'radio') {
				this.checked = select;
			}
			else if (this.tagName.toLowerCase() == 'option') {
				var $sel = $(this).parent('select');
				if (select && $sel[0] && $sel[0].type == 'select-one') {
					// deselect all other options
					$sel.find('option').selected(false);
				}
				this.selected = select;
			}
		});
	};

	// expose debug var
	$.fn.ajaxSubmit.debug = false;

	// helper fn for console logging
	function log() {
		if (!$.fn.ajaxSubmit.debug)
			return;
		var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
		if (window.console && window.console.log) {
			window.console.log(msg);
		}
		else if (window.opera && window.opera.postError) {
			window.opera.postError(msg);
		}
	}

	})( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],3:[function(require,module,exports){
//define(function (require, exports, module) {

	function Cookie() {}
	module.exports = Cookie;
	var cookie_domain = webData.cookie_domain
	
	Cookie.prototype.setCookie = function (NameOfCookie, value, expiredays, domain) {
		if (expiredays == null || expiredays == undefined || expiredays == '' || isNaN(expiredays)) {
			expiredays = 365;
		}
		var ExpireDate = new Date();
		ExpireDate.setTime(ExpireDate.getTime() + (expiredays * 24 * 3600 * 1000));
		domain = domain ? domain : cookie_domain
        var _domain = domain ? ";domain=" + domain : ""
		document.cookie = NameOfCookie + "=" + escape(value) + _domain + ((expiredays == null) ? "": ";path=/; expires=" + ExpireDate.toGMTString());
	}

	Cookie.prototype.getCookie = function (NameOfCookie) {
		if (document.cookie.length > 0) {
			begin = document.cookie.indexOf(NameOfCookie + "=");
			if (begin != -1) {
				begin += NameOfCookie.length + 1;
				end = document.cookie.indexOf(";", begin);
				if (end == -1) end = document.cookie.length;
				return unescape(document.cookie.substring(begin, end));
			}
		}
		return null;
	}
	
//});

},{}],4:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
	var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	$.fn.formCheck = function (items, params) {
		if (!params)
			params = {};
		params.rules = $.extend({
				'null' : function (obj, checks) {
					return $.trim($(obj).val()).length > 0
				},
				'maxlength' : function (obj, checks) {
					return $.trim($(obj).val()).length <= checks.maxlength
				},
				'minlength' : function (obj, checks) {
					return $.trim($(obj).val()).length >= checks.minlength
				},
				'digitMinlength' : function (obj, checks) {
					return $.trim($(obj).val().replace(/[^0-9]/g, '')).length >= checks.minlength
				},
				'email' : function (obj, checks) {
					return /(\,|^)([\w+._]+@\w+\.(\w+\.){0,3}\w{2,4})/.test($(obj).val().replace(/-|\//g, ''))
				},
				'checked' : function (obj, checks) {
					return obj.checked
				},
				'phone' : function (obj, checks) {
					return /^[\d-\s]{1,20}$/.test($(obj).val()) && $.trim($(obj).val()).replace(/[\s]+/g, ' ').length <= checks.maxlength
				},
				'number' : function (obj, checks) {
					return /^[0-9]+$/.test($.trim($(obj).val()))
				},
				'min' : function (obj, checks) {
					return parseInt($(obj).val()) >= checks.min
				},
				"regexp" : function (obj, checks) {
					return checks.pattern.test($.trim($(obj).val()))
				},
				'select' : function (obj, checks) {
					return $(obj).val() != checks.value
				},
				'user' : function (obj, checks) {
					return /^(?!\d)[a-zA-Z0-9\u4e00-\u9fa5_]{5,18}$/.test($.trim($(obj).val()))
				}
			}, params.rules);
		var result = true,
		focused = false;
		function checkItem(item, checks) {
			for (j in checks) {
				if (params.rules[checks[j].type])
					if (params.rules[checks[j].type](item, checks[j]))
						continue;
                /*
				if (!focused && !checks[j].noFocus) {
					if ($(item).offset().top < $(window).scrollTop()) {
						$('html, body').animate({
							scrollTop : $(item).offset().top
						}, 'fast')
					}
					focused = true
				};
                 */
				if (checks[j].showError) {
					checks[j].showError();
					result = false;
					break
				} else if (params.showError) {
					params.showError($(item), checks[j].errMsg, checks[j].errEvent);
					result = false;
					break
				} else if (params.errinfoFinder) {
					params.errinfoFinder($(item)).text(checks[j].errMsg);
					$(item).focus(function () {
						params.errinfoFinder($(item)).text('');
					});
					if ($(item).attr('type') != null && $(item).attr('type').toLowerCase() == 'checkbox') {
						$(item).click(function () {
							$(item).focus()
						})
					};
					result = false;
					break
				} else if (checks[j].errMsg) {
					alert(checks[j].errMsg);
					return false
				}
			};
			return true
		};
		for (i = 0; i < this[0].length; i++) {
			if ($(this[0][i]).attr('name') && $(this[0][i]).attr('name').length == 0 || $(this[0][i]).prop('disabled'))
				continue;
			var checks = items[$(this[0][i]).attr('name')];
			if (!checks)
				continue;
			if (!checkItem(this[0][i], checks))
				return false
		};
		return result
	};
	
//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1DaGVjay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG5cdHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cdFxyXG5cdCQuZm4uZm9ybUNoZWNrID0gZnVuY3Rpb24gKGl0ZW1zLCBwYXJhbXMpIHtcclxuXHRcdGlmICghcGFyYW1zKVxyXG5cdFx0XHRwYXJhbXMgPSB7fTtcclxuXHRcdHBhcmFtcy5ydWxlcyA9ICQuZXh0ZW5kKHtcclxuXHRcdFx0XHQnbnVsbCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkLnRyaW0oJChvYmopLnZhbCgpKS5sZW5ndGggPiAwXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWF4bGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA8PSBjaGVja3MubWF4bGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnbWlubGVuZ3RoJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuICQudHJpbSgkKG9iaikudmFsKCkpLmxlbmd0aCA+PSBjaGVja3MubWlubGVuZ3RoXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQnZGlnaXRNaW5sZW5ndGgnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJC50cmltKCQob2JqKS52YWwoKS5yZXBsYWNlKC9bXjAtOV0vZywgJycpKS5sZW5ndGggPj0gY2hlY2tzLm1pbmxlbmd0aFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J2VtYWlsJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIC8oXFwsfF4pKFtcXHcrLl9dK0BcXHcrXFwuKFxcdytcXC4pezAsM31cXHd7Miw0fSkvLnRlc3QoJChvYmopLnZhbCgpLnJlcGxhY2UoLy18XFwvL2csICcnKSlcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdjaGVja2VkJyA6IGZ1bmN0aW9uIChvYmosIGNoZWNrcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iai5jaGVja2VkXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQncGhvbmUnIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bXFxkLVxcc117MSwyMH0kLy50ZXN0KCQob2JqKS52YWwoKSkgJiYgJC50cmltKCQob2JqKS52YWwoKSkucmVwbGFjZSgvW1xcc10rL2csICcgJykubGVuZ3RoIDw9IGNoZWNrcy5tYXhsZW5ndGhcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCdudW1iZXInIDogZnVuY3Rpb24gKG9iaiwgY2hlY2tzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gL15bMC05XSskLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J21pbicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCgkKG9iaikudmFsKCkpID49IGNoZWNrcy5taW5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFwicmVnZXhwXCIgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiBjaGVja3MucGF0dGVybi50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0J3NlbGVjdCcgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAkKG9iaikudmFsKCkgIT0gY2hlY2tzLnZhbHVlXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQndXNlcicgOiBmdW5jdGlvbiAob2JqLCBjaGVja3MpIHtcclxuXHRcdFx0XHRcdHJldHVybiAvXig/IVxcZClbYS16QS1aMC05XFx1NGUwMC1cXHU5ZmE1X117NSwxOH0kLy50ZXN0KCQudHJpbSgkKG9iaikudmFsKCkpKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgcGFyYW1zLnJ1bGVzKTtcclxuXHRcdHZhciByZXN1bHQgPSB0cnVlLFxyXG5cdFx0Zm9jdXNlZCA9IGZhbHNlO1xyXG5cdFx0ZnVuY3Rpb24gY2hlY2tJdGVtKGl0ZW0sIGNoZWNrcykge1xyXG5cdFx0XHRmb3IgKGogaW4gY2hlY2tzKSB7XHJcblx0XHRcdFx0aWYgKHBhcmFtcy5ydWxlc1tjaGVja3Nbal0udHlwZV0pXHJcblx0XHRcdFx0XHRpZiAocGFyYW1zLnJ1bGVzW2NoZWNrc1tqXS50eXBlXShpdGVtLCBjaGVja3Nbal0pKVxyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIC8qXHJcblx0XHRcdFx0aWYgKCFmb2N1c2VkICYmICFjaGVja3Nbal0ubm9Gb2N1cykge1xyXG5cdFx0XHRcdFx0aWYgKCQoaXRlbSkub2Zmc2V0KCkudG9wIDwgJCh3aW5kb3cpLnNjcm9sbFRvcCgpKSB7XHJcblx0XHRcdFx0XHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuXHRcdFx0XHRcdFx0XHRzY3JvbGxUb3AgOiAkKGl0ZW0pLm9mZnNldCgpLnRvcFxyXG5cdFx0XHRcdFx0XHR9LCAnZmFzdCcpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmb2N1c2VkID0gdHJ1ZVxyXG5cdFx0XHRcdH07XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuXHRcdFx0XHRpZiAoY2hlY2tzW2pdLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0Y2hlY2tzW2pdLnNob3dFcnJvcigpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLnNob3dFcnJvcikge1xyXG5cdFx0XHRcdFx0cGFyYW1zLnNob3dFcnJvcigkKGl0ZW0pLCBjaGVja3Nbal0uZXJyTXNnLCBjaGVja3Nbal0uZXJyRXZlbnQpO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1zLmVycmluZm9GaW5kZXIpIHtcclxuXHRcdFx0XHRcdHBhcmFtcy5lcnJpbmZvRmluZGVyKCQoaXRlbSkpLnRleHQoY2hlY2tzW2pdLmVyck1zZyk7XHJcblx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cGFyYW1zLmVycmluZm9GaW5kZXIoJChpdGVtKSkudGV4dCgnJyk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGlmICgkKGl0ZW0pLmF0dHIoJ3R5cGUnKSAhPSBudWxsICYmICQoaXRlbSkuYXR0cigndHlwZScpLnRvTG93ZXJDYXNlKCkgPT0gJ2NoZWNrYm94Jykge1xyXG5cdFx0XHRcdFx0XHQkKGl0ZW0pLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGl0ZW0pLmZvY3VzKClcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fSBlbHNlIGlmIChjaGVja3Nbal0uZXJyTXNnKSB7XHJcblx0XHRcdFx0XHRhbGVydChjaGVja3Nbal0uZXJyTXNnKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdH07XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpc1swXS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykgJiYgJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJykubGVuZ3RoID09IDAgfHwgJCh0aGlzWzBdW2ldKS5wcm9wKCdkaXNhYmxlZCcpKVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR2YXIgY2hlY2tzID0gaXRlbXNbJCh0aGlzWzBdW2ldKS5hdHRyKCduYW1lJyldO1xyXG5cdFx0XHRpZiAoIWNoZWNrcylcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0aWYgKCFjaGVja0l0ZW0odGhpc1swXVtpXSwgY2hlY2tzKSlcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblx0fTtcclxuXHRcclxuLy99KTsiXX0=
},{}],5:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    require('./formCheck');


    function FormCheckEach(setting) {
        this.params = $.extend({
            "elem_form": $('form:eq(0)'),
            "items": {},
            "showError": function (obj, errMsg) {
                alert(errMsg);
                obj.focus();
            },
            "cleanError": function (obj) {
            },
            "rules": {}
        }, setting);
    }

    module.exports = FormCheckEach;

    FormCheckEach.prototype.checkOne = function (ipt, isShowError) {
        var me = this;
        var ipt_name = ipt.attr('name');

        //检查之前清除错误
        me.params.cleanError(ipt);

        for (var key in me.params.items) {
            if (ipt_name == key) {
                var item = {};
                item[ipt_name] = me.params.items[key];
                var isChecked = me.params.elem_form.formCheck(item, {
                    showError: function (obj, errMsg) {
                        if (isShowError) {
                            me.params.showError(obj, errMsg);
                        }
                    },
                    rules: me.params.rules
                });

                if (isChecked) {
                    me.params.cleanError(ipt);
                } else {
                    return false;
                }
                break;
            }
        }
        return true;
    };

    FormCheckEach.prototype.checkAll = function (ipts, isShowError) {
        var me = this;

        //检查之前清除错误
        for (var i = 0; i < ipts.length; i++) {
            me.params.cleanError(ipts.eq(i));
        }

        for (var i = 0; i < ipts.length; i++) {
            if(! me.checkOne(ipts.eq(i), isShowError)) {
                return false;
            }
        }
        return true;
    };

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1DaGVja0VhY2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcbiAgICB2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHJcbiAgICByZXF1aXJlKCcuL2Zvcm1DaGVjaycpO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBGb3JtQ2hlY2tFYWNoKHNldHRpbmcpIHtcclxuICAgICAgICB0aGlzLnBhcmFtcyA9ICQuZXh0ZW5kKHtcclxuICAgICAgICAgICAgXCJlbGVtX2Zvcm1cIjogJCgnZm9ybTplcSgwKScpLFxyXG4gICAgICAgICAgICBcIml0ZW1zXCI6IHt9LFxyXG4gICAgICAgICAgICBcInNob3dFcnJvclwiOiBmdW5jdGlvbiAob2JqLCBlcnJNc2cpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KGVyck1zZyk7XHJcbiAgICAgICAgICAgICAgICBvYmouZm9jdXMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJjbGVhbkVycm9yXCI6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJydWxlc1wiOiB7fVxyXG4gICAgICAgIH0sIHNldHRpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzID0gRm9ybUNoZWNrRWFjaDtcclxuXHJcbiAgICBGb3JtQ2hlY2tFYWNoLnByb3RvdHlwZS5jaGVja09uZSA9IGZ1bmN0aW9uIChpcHQsIGlzU2hvd0Vycm9yKSB7XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuICAgICAgICB2YXIgaXB0X25hbWUgPSBpcHQuYXR0cignbmFtZScpO1xyXG5cclxuICAgICAgICAvL+ajgOafpeS5i+WJjea4hemZpOmUmeivr1xyXG4gICAgICAgIG1lLnBhcmFtcy5jbGVhbkVycm9yKGlwdCk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtZS5wYXJhbXMuaXRlbXMpIHtcclxuICAgICAgICAgICAgaWYgKGlwdF9uYW1lID09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7fTtcclxuICAgICAgICAgICAgICAgIGl0ZW1baXB0X25hbWVdID0gbWUucGFyYW1zLml0ZW1zW2tleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNDaGVja2VkID0gbWUucGFyYW1zLmVsZW1fZm9ybS5mb3JtQ2hlY2soaXRlbSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dFcnJvcjogZnVuY3Rpb24gKG9iaiwgZXJyTXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Nob3dFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUucGFyYW1zLnNob3dFcnJvcihvYmosIGVyck1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzOiBtZS5wYXJhbXMucnVsZXNcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZS5wYXJhbXMuY2xlYW5FcnJvcihpcHQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgRm9ybUNoZWNrRWFjaC5wcm90b3R5cGUuY2hlY2tBbGwgPSBmdW5jdGlvbiAoaXB0cywgaXNTaG93RXJyb3IpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuICAgICAgICAvL+ajgOafpeS5i+WJjea4hemZpOmUmeivr1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBtZS5wYXJhbXMuY2xlYW5FcnJvcihpcHRzLmVxKGkpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZighIG1lLmNoZWNrT25lKGlwdHMuZXEoaSksIGlzU2hvd0Vycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbi8vfSk7Il19
},{"./formCheck":4}],6:[function(require,module,exports){
var openInPopup =  function (open) {
    return function (url, name, w, h) {
        var w = parseInt(w) || 475;
        var h = parseInt(h) || 183;
        // Fixes dual-screen position                         Most browsers      Firefox
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;

        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var override_features = 'width=' + w + ',height=' + h + ',left=' + left + ',top=' + top + ',scrollbars=1,location=1,toolbar=0';

        // set name if missing here
        //name = name || "default_window_name";
        return open.call(window, url, name, override_features);
    };
}(window.open);

module.exports = openInPopup;

},{}],7:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var dialog = $('#offgoods-subscribe-dialog')

function popSubscribeOffGoods(goods_id, source, onSuccess) {
    this.goods_id = goods_id
    this.source = source
    this.onSuccess = onSuccess
    this.isSubmitting = false
}

module.exports = popSubscribeOffGoods;

function checkEmail() {
    var email = $(dialog).find('#offgoods_subscribe_email').val()
    email = $.trim(email.replace(/-|\//g, ''))

    clearError()

    if (email.length <= 0) {
        showError(_lang.page_login_enter_email)
        return false;
    }

    if (!/(\,|^)([\w+._]+@\w+\.(\w+\.){0,3}\w{2,4})/.test(email)) {
        showError(_lang.page_login_email_invalid)
        return false;
    }

    return email;
}


function clearError() {
    var errorTip = $(dialog).find('.error-tip')
    errorTip.text()
    errorTip.hide()
}

function showError(msg) {
    var errorTip = $(dialog).find('.error-tip')
    errorTip.text(msg)
    errorTip.show()
}

popSubscribeOffGoods.prototype.showSuccessPanel = function() {
    var subscribePanel = $(dialog).find('.subscribe-container')
    var successPanel = $(dialog).find('.success-container')
    var self = this

    this.openDialog()
    $(subscribePanel).hide()
    $(successPanel).show()
    $(dialog).find('.dialog-close-icon').hide()

    setTimeout(function() {
        self.closeDialog()
    }, 3000)
}

popSubscribeOffGoods.prototype.showFailPanel = function() {
    var dialogWrapper = $(dialog).find('.dialog-wrapper')
    var subscribePanel = $(dialog).find('.subscribe-container')
    var failPanel = $(dialog).find('.fail-container')
    var self = this


    this.openDialog()
    $(dialogWrapper).addClass('mini')
    $(subscribePanel).hide()
    $(failPanel).show()
    $(dialog).find('.dialog-close-icon').hide()

    setTimeout(function() {
        if (window.login_status) {
            self.closeDialog()
        } else {
            self.hideFailPanel()
        }
    }, 1000)
}

popSubscribeOffGoods.prototype.hideFailPanel = function() {
    var dialogWrapper = $(dialog).find('.dialog-wrapper')
    var subscribePanel = $(dialog).find('.subscribe-container')
    var failPanel = $(dialog).find('.fail-container')

    $(dialogWrapper).removeClass('mini')

    $(failPanel).hide()
    $(subscribePanel).show()
    $(dialog).find('.dialog-close-icon').show()
}

popSubscribeOffGoods.prototype.subscribeOffGoods = function(email) {
    if (this.isSubmitting) {
        return false
    }

    var self = this
    var data = {
        act: "subscribe_off_goods",
        goods_id: this.goods_id,
        source: this.source,
    }

    if (email != undefined) {
        data.email = email
    }

    this.isSubmitting = true
    $.ajax({
        method: "POST",
        url: "/ajax.php",
        dataType: 'json',
        data: data,
        success: function(r) {
            this.isSubmitting = false
            if (r.error == 0) {
                self.showSuccessPanel()
                self.onSuccess()
            } else {
                self.showFailPanel()
            }
        },
        error: function() {
            this.isSubmitting = false
            self.showFailPanel()
        }
    });
}

popSubscribeOffGoods.prototype.closeDialog = function() {
    $('#dialogOverlay').hide()
    $(dialog).hide()
}


popSubscribeOffGoods.prototype.bindEvent = function() {
    var self = this
    $(dialog).find('.editable-clear-x').on('click', function() {
        $(dialog).find('#offgoods_subscribe_email').val("")
    })
    $(dialog).find('#offgoods_subscribe_button').on('click', function() {
        var email = checkEmail()
        if (email) {
            self.subscribeOffGoods(email)
        }
    })
    $(dialog).find('.dialog-close-icon').on('click', this.closeDialog)
}

popSubscribeOffGoods.prototype.openDialog = function() {
    if (dialog.length == 0) {
        return false
    }

    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay')
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body')
    }
    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5)
    $(dialog).css('display', 'flex')

    clearError()
    $(dialog).find('#offgoods_subscribe_email').val("")

    return true
}

popSubscribeOffGoods.prototype.open = function() {
    this.bindEvent()
    if (window.login_status) {
        this.subscribeOffGoods()
    } else {
        this.openDialog()
    }
}


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL3BvcFN1YnNjcmliZU9mZkdvb2RzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcblxyXG52YXIgZGlhbG9nID0gJCgnI29mZmdvb2RzLXN1YnNjcmliZS1kaWFsb2cnKVxyXG5cclxuZnVuY3Rpb24gcG9wU3Vic2NyaWJlT2ZmR29vZHMoZ29vZHNfaWQsIHNvdXJjZSwgb25TdWNjZXNzKSB7XHJcbiAgICB0aGlzLmdvb2RzX2lkID0gZ29vZHNfaWRcclxuICAgIHRoaXMuc291cmNlID0gc291cmNlXHJcbiAgICB0aGlzLm9uU3VjY2VzcyA9IG9uU3VjY2Vzc1xyXG4gICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSBmYWxzZVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHBvcFN1YnNjcmliZU9mZkdvb2RzO1xyXG5cclxuZnVuY3Rpb24gY2hlY2tFbWFpbCgpIHtcclxuICAgIHZhciBlbWFpbCA9ICQoZGlhbG9nKS5maW5kKCcjb2ZmZ29vZHNfc3Vic2NyaWJlX2VtYWlsJykudmFsKClcclxuICAgIGVtYWlsID0gJC50cmltKGVtYWlsLnJlcGxhY2UoLy18XFwvL2csICcnKSlcclxuXHJcbiAgICBjbGVhckVycm9yKClcclxuXHJcbiAgICBpZiAoZW1haWwubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICBzaG93RXJyb3IoX2xhbmcucGFnZV9sb2dpbl9lbnRlcl9lbWFpbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEvKFxcLHxeKShbXFx3Ky5fXStAXFx3K1xcLihcXHcrXFwuKXswLDN9XFx3ezIsNH0pLy50ZXN0KGVtYWlsKSkge1xyXG4gICAgICAgIHNob3dFcnJvcihfbGFuZy5wYWdlX2xvZ2luX2VtYWlsX2ludmFsaWQpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbWFpbDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNsZWFyRXJyb3IoKSB7XHJcbiAgICB2YXIgZXJyb3JUaXAgPSAkKGRpYWxvZykuZmluZCgnLmVycm9yLXRpcCcpXHJcbiAgICBlcnJvclRpcC50ZXh0KClcclxuICAgIGVycm9yVGlwLmhpZGUoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93RXJyb3IobXNnKSB7XHJcbiAgICB2YXIgZXJyb3JUaXAgPSAkKGRpYWxvZykuZmluZCgnLmVycm9yLXRpcCcpXHJcbiAgICBlcnJvclRpcC50ZXh0KG1zZylcclxuICAgIGVycm9yVGlwLnNob3coKVxyXG59XHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUuc2hvd1N1Y2Nlc3NQYW5lbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHN1YnNjcmliZVBhbmVsID0gJChkaWFsb2cpLmZpbmQoJy5zdWJzY3JpYmUtY29udGFpbmVyJylcclxuICAgIHZhciBzdWNjZXNzUGFuZWwgPSAkKGRpYWxvZykuZmluZCgnLnN1Y2Nlc3MtY29udGFpbmVyJylcclxuICAgIHZhciBzZWxmID0gdGhpc1xyXG5cclxuICAgIHRoaXMub3BlbkRpYWxvZygpXHJcbiAgICAkKHN1YnNjcmliZVBhbmVsKS5oaWRlKClcclxuICAgICQoc3VjY2Vzc1BhbmVsKS5zaG93KClcclxuICAgICQoZGlhbG9nKS5maW5kKCcuZGlhbG9nLWNsb3NlLWljb24nKS5oaWRlKClcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGYuY2xvc2VEaWFsb2coKVxyXG4gICAgfSwgMzAwMClcclxufVxyXG5cclxucG9wU3Vic2NyaWJlT2ZmR29vZHMucHJvdG90eXBlLnNob3dGYWlsUGFuZWwgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkaWFsb2dXcmFwcGVyID0gJChkaWFsb2cpLmZpbmQoJy5kaWFsb2ctd3JhcHBlcicpXHJcbiAgICB2YXIgc3Vic2NyaWJlUGFuZWwgPSAkKGRpYWxvZykuZmluZCgnLnN1YnNjcmliZS1jb250YWluZXInKVxyXG4gICAgdmFyIGZhaWxQYW5lbCA9ICQoZGlhbG9nKS5maW5kKCcuZmFpbC1jb250YWluZXInKVxyXG4gICAgdmFyIHNlbGYgPSB0aGlzXHJcblxyXG5cclxuICAgIHRoaXMub3BlbkRpYWxvZygpXHJcbiAgICAkKGRpYWxvZ1dyYXBwZXIpLmFkZENsYXNzKCdtaW5pJylcclxuICAgICQoc3Vic2NyaWJlUGFuZWwpLmhpZGUoKVxyXG4gICAgJChmYWlsUGFuZWwpLnNob3coKVxyXG4gICAgJChkaWFsb2cpLmZpbmQoJy5kaWFsb2ctY2xvc2UtaWNvbicpLmhpZGUoKVxyXG5cclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2dpbl9zdGF0dXMpIHtcclxuICAgICAgICAgICAgc2VsZi5jbG9zZURpYWxvZygpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5oaWRlRmFpbFBhbmVsKClcclxuICAgICAgICB9XHJcbiAgICB9LCAxMDAwKVxyXG59XHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUuaGlkZUZhaWxQYW5lbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGRpYWxvZ1dyYXBwZXIgPSAkKGRpYWxvZykuZmluZCgnLmRpYWxvZy13cmFwcGVyJylcclxuICAgIHZhciBzdWJzY3JpYmVQYW5lbCA9ICQoZGlhbG9nKS5maW5kKCcuc3Vic2NyaWJlLWNvbnRhaW5lcicpXHJcbiAgICB2YXIgZmFpbFBhbmVsID0gJChkaWFsb2cpLmZpbmQoJy5mYWlsLWNvbnRhaW5lcicpXHJcblxyXG4gICAgJChkaWFsb2dXcmFwcGVyKS5yZW1vdmVDbGFzcygnbWluaScpXHJcblxyXG4gICAgJChmYWlsUGFuZWwpLmhpZGUoKVxyXG4gICAgJChzdWJzY3JpYmVQYW5lbCkuc2hvdygpXHJcbiAgICAkKGRpYWxvZykuZmluZCgnLmRpYWxvZy1jbG9zZS1pY29uJykuc2hvdygpXHJcbn1cclxuXHJcbnBvcFN1YnNjcmliZU9mZkdvb2RzLnByb3RvdHlwZS5zdWJzY3JpYmVPZmZHb29kcyA9IGZ1bmN0aW9uKGVtYWlsKSB7XHJcbiAgICBpZiAodGhpcy5pc1N1Ym1pdHRpbmcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgIGFjdDogXCJzdWJzY3JpYmVfb2ZmX2dvb2RzXCIsXHJcbiAgICAgICAgZ29vZHNfaWQ6IHRoaXMuZ29vZHNfaWQsXHJcbiAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW1haWwgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZGF0YS5lbWFpbCA9IGVtYWlsXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSB0cnVlXHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgdXJsOiBcIi9hamF4LnBocFwiLFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTdWJtaXR0aW5nID0gZmFsc2VcclxuICAgICAgICAgICAgaWYgKHIuZXJyb3IgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zaG93U3VjY2Vzc1BhbmVsKClcclxuICAgICAgICAgICAgICAgIHNlbGYub25TdWNjZXNzKClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0ZhaWxQYW5lbCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgICBzZWxmLnNob3dGYWlsUGFuZWwoKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUuY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcclxuICAgICQoJyNkaWFsb2dPdmVybGF5JykuaGlkZSgpXHJcbiAgICAkKGRpYWxvZykuaGlkZSgpXHJcbn1cclxuXHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUuYmluZEV2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICQoZGlhbG9nKS5maW5kKCcuZWRpdGFibGUtY2xlYXIteCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoZGlhbG9nKS5maW5kKCcjb2ZmZ29vZHNfc3Vic2NyaWJlX2VtYWlsJykudmFsKFwiXCIpXHJcbiAgICB9KVxyXG4gICAgJChkaWFsb2cpLmZpbmQoJyNvZmZnb29kc19zdWJzY3JpYmVfYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGVtYWlsID0gY2hlY2tFbWFpbCgpXHJcbiAgICAgICAgaWYgKGVtYWlsKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc3Vic2NyaWJlT2ZmR29vZHMoZW1haWwpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICQoZGlhbG9nKS5maW5kKCcuZGlhbG9nLWNsb3NlLWljb24nKS5vbignY2xpY2snLCB0aGlzLmNsb3NlRGlhbG9nKVxyXG59XHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUub3BlbkRpYWxvZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGRpYWxvZy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICgkKCcjZGlhbG9nT3ZlcmxheScpLnNpemUoKSA+IDApIHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSAkKCcjZGlhbG9nT3ZlcmxheScpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBsYXllciA9ICQoJzxkaXYgaWQ9XCJkaWFsb2dPdmVybGF5XCI+PGRpdiBzdHlsZT1cImJhY2tncm91bmQ6cmdiKDAsMCwwKTtcIj48L2Rpdj48L2Rpdj4nKS5wcmVwZW5kVG8oJ2JvZHknKVxyXG4gICAgfVxyXG4gICAgbGF5ZXIuc2hvdygpLmNoaWxkcmVuKCdkaXYnKS5zdG9wKCkuZmFkZVRvKDAsIDAuMSkuZmFkZVRvKFwiZmFzdFwiLCAwLjUpXHJcbiAgICAkKGRpYWxvZykuY3NzKCdkaXNwbGF5JywgJ2ZsZXgnKVxyXG5cclxuICAgIGNsZWFyRXJyb3IoKVxyXG4gICAgJChkaWFsb2cpLmZpbmQoJyNvZmZnb29kc19zdWJzY3JpYmVfZW1haWwnKS52YWwoXCJcIilcclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5wb3BTdWJzY3JpYmVPZmZHb29kcy5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5iaW5kRXZlbnQoKVxyXG4gICAgaWYgKHdpbmRvdy5sb2dpbl9zdGF0dXMpIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmliZU9mZkdvb2RzKClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5vcGVuRGlhbG9nKClcclxuICAgIH1cclxufVxyXG5cclxuIl19
},{}],8:[function(require,module,exports){
//define(function(require, exports, module) {
function StringHandle() {}
module.exports = StringHandle;

StringHandle.prototype.quoteattr = function (string, preserveCR) {
	preserveCR = preserveCR ? '&#13;' : '\n';
	return ('' + string)                   /* Forces the conversion to string. */
		.replace(/&/g, '&amp;')            /* This MUST be the 1st replacement. */
		.replace(/'/g, '&apos;')           /* The 4 other predefined entities, required. */
		.replace(/"/g, '&quot;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
		/*
		 You may add other replacements here for HTML only
		 (but it's not necessary).
		 Or for XML, only if the named entities are defined in its DTD.
		 */
		.replace(/\r\n/g, preserveCR)      /* Must be before the next replacement. */
		.replace(/[\r\n]/g, preserveCR);
	;
}

//});
},{}],9:[function(require,module,exports){
//define(function (require, exports, module) {

    function UserAgent() {}
    module.exports = UserAgent;

    UserAgent.prototype.isIpad = function () {
        if (navigator.userAgent.match(/iPad/i)) {
            return true;
        } else {
            return false;
        }
    }
    
    UserAgent.prototype.isPhone = function () {
        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/) || navigator.userAgent.match(/Windows Phone/i) ||	navigator.userAgent.match(/ZuneWP7/i)) {
            return true;
        } else {
            return false;
        }
    }

    UserAgent.prototype.isIE = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        return isIE;
    }

    UserAgent.prototype.isIEVersion = function (version) {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        var uaVersion = (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [])[1];
        if(isIE && parseInt(uaVersion) == parseInt(version)) {
            return true;
        } else {
            return false;
        }
    }
    UserAgent.prototype.detectBrowser=function(){
        var ua= navigator.userAgent, tem, 
        M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if(/trident/i.test(M[1])){
            tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE '+(tem[1] || '');
        }
        if(M[1]=== 'Chrome'){
            tem= ua.match(/\bOPR\/(\d+)/)
            if(tem!= null) return 'Opera '+tem[1];
        }
        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
        if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
        return M.join(' ');
    };

//});
},{}],10:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('../lib/jqueryForm');

exports.init = function () {
    var deleteDialog = $('.delete-showroom-dialog');
    var confirmBtn = deleteDialog.find('.confirm-button');
    var cancel = deleteDialog.find('.cancel-button');

    deleteDialog.find('.delete-showroom-close').on("click",function () {
        $('#dialogOverlay').css("display", "none");
        deleteDialog.css("display",'none');
    });

    cancel.on("click",function () {
        $('#dialogOverlay').css("display", "none");
        deleteDialog.css("display",'none');
    });

    confirmBtn.on("click",function () {
        var sh_id = pageData.showroom_id;

        var param = {
            "act": "delete_showroom",
            "sh_id": sh_id
        }
        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    location.href = webData.WEB_ROOT + 'showroom.php';
                } else if (r.code == 2) {
                    var tips = _lang.page_refuse_delete_showroom;
                    var rs = confirm(tips);
                    if (rs == false || rs == true) {
                        $('#dialogOverlay').css("display", "none");
                        deleteDialog.css("display",'none');
                    }
                }
            }
        });
    });

};


//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc2hvd3Jvb20vZGVsZXRlX3Nob3dyb29tLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xyXG52YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxucmVxdWlyZSgnLi4vbGliL2pxdWVyeUZvcm0nKTtcclxuXHJcbmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBkZWxldGVEaWFsb2cgPSAkKCcuZGVsZXRlLXNob3dyb29tLWRpYWxvZycpO1xyXG4gICAgdmFyIGNvbmZpcm1CdG4gPSBkZWxldGVEaWFsb2cuZmluZCgnLmNvbmZpcm0tYnV0dG9uJyk7XHJcbiAgICB2YXIgY2FuY2VsID0gZGVsZXRlRGlhbG9nLmZpbmQoJy5jYW5jZWwtYnV0dG9uJyk7XHJcblxyXG4gICAgZGVsZXRlRGlhbG9nLmZpbmQoJy5kZWxldGUtc2hvd3Jvb20tY2xvc2UnKS5vbihcImNsaWNrXCIsZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJyNkaWFsb2dPdmVybGF5JykuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgZGVsZXRlRGlhbG9nLmNzcyhcImRpc3BsYXlcIiwnbm9uZScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY2FuY2VsLm9uKFwiY2xpY2tcIixmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnI2RpYWxvZ092ZXJsYXknKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICBkZWxldGVEaWFsb2cuY3NzKFwiZGlzcGxheVwiLCdub25lJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25maXJtQnRuLm9uKFwiY2xpY2tcIixmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNoX2lkID0gcGFnZURhdGEuc2hvd3Jvb21faWQ7XHJcblxyXG4gICAgICAgIHZhciBwYXJhbSA9IHtcclxuICAgICAgICAgICAgXCJhY3RcIjogXCJkZWxldGVfc2hvd3Jvb21cIixcclxuICAgICAgICAgICAgXCJzaF9pZFwiOiBzaF9pZFxyXG4gICAgICAgIH1cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAndHlwZSc6ICdnZXQnLFxyXG4gICAgICAgICAgICAndXJsJzogd2ViRGF0YS5XRUJfUk9PVCArICdhamF4LnBocCcsXHJcbiAgICAgICAgICAgICdkYXRhJzogcGFyYW0sXHJcbiAgICAgICAgICAgICdjYWNoZSc6IHRydWUsXHJcbiAgICAgICAgICAgICdkYXRhVHlwZSc6ICdqc29uJyxcclxuICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIuY29kZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHdlYkRhdGEuV0VCX1JPT1QgKyAnc2hvd3Jvb20ucGhwJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5jb2RlID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGlwcyA9IF9sYW5nLnBhZ2VfcmVmdXNlX2RlbGV0ZV9zaG93cm9vbTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnMgPSBjb25maXJtKHRpcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChycyA9PSBmYWxzZSB8fCBycyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNkaWFsb2dPdmVybGF5JykuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZURpYWxvZy5jc3MoXCJkaXNwbGF5XCIsJ25vbmUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxufTtcclxuXHJcblxyXG4vL30pOyJdfQ==
},{"../lib/jqueryForm":2}],11:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {

var FavorDisplay = require('../common/favor_quick_display');

exports.init = function () {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    var editShowRoom = $('.edit-showroom');
    var edit = editShowRoom.find('.edit');
    var del = editShowRoom.find('.delete');
    var save = editShowRoom.find('.save-edit');
    var cancel = editShowRoom.find('.cancel-edit');
    var form_showroom_name = $('.user-showroom-name').text();
    var origin_showroom_name = $('.user-showroom-name').attr('data-origin-name');
    var form_date = $('.showroom-date').text();
    var inviteContent = $('.invite-and-avatar');

    var submitting = false;

    if ($(".empty-showroom-goods-content").is(":visible")) {
        $(".delete-all-goods").css("display","none");
    }

    function openShowroomInviteDialog(obj) {
        if ($('#dialogOverlay').size() > 0) {
            var layer = $('#dialogOverlay');
        } else {
            var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
        };

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

        obj.css("display", "block");
        var clientHeight = window.innerHeight ;
        if(clientHeight > 650){
            $(".showroom-dialog").css("top",$(window).scrollTop() + $(window).height() / 7);
        }else{
            $(".showroom-dialog").css("top",$(window).scrollTop());
        }
    };

    edit.on("click",function () {
        edit.addClass('hide');
        del.addClass('hide');
        save.addClass('show');
        cancel.addClass('show');
        $('.user-showroom-name').remove();
        var edit_showroom_html = "<textarea class=\"edit-user-showroom-name\" placeholder=\"" + form_showroom_name +"\"></textarea>";
        $('.user-showroom').prepend(edit_showroom_html);
        $('#datepicker').val(form_date);

        //日期
        $('.showroom-date').css('display','none');
        $('#datepicker').css('display','inline-block');
        $('#datepicker').attr('placeholder',form_date);
        $('#datepicker').focus();
    });

    save.on("click",function () {
        var edit_text = $('.edit-user-showroom-name').val().trim();
        if (edit_text == "") {
            edit_text = origin_showroom_name;
        }
        var sh_id = pageData.showroom_id
        var modify_date = $('#datepicker').val();
        if (modify_date == "") {
            modify_date = form_date;
        }
        var param = {
            "act": "update_showroom_information",
            "edit_text": edit_text,
            "sh_id": sh_id,
            "modify_date": modify_date
        }

        if (submitting) {
            return false;
        }
        submitting = true;
        $.ajax({
            'type': 'post',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                submitting = false;

                edit.removeClass('hide');
                del.removeClass('hide');
                save.removeClass('show');
                cancel.removeClass('show');

                var name = _lang.page_showroom_name || "{$sh_name}'s showroom";
                if (r.code == 0) {
                    name = name.replace("{$sh_name}", edit_text)

                    var edit_showroom_html = "<p class=\"user-showroom-name\" data-origin-name=\"" + edit_text + "\">" + name + "</p>";
                    FavorDisplay.initShowRoomList();
                    FavorDisplay.initActiveShowRoom();
                    $('.showroom-date').text(r.new_time);
                    form_showroom_name = name;
                    origin_showroom_name = edit_text;
                    form_date = r.new_time;
                } else {
                    name = name.replace("{$sh_name}", origin_showroom_name)

                    var edit_showroom_html = "<p class=\"user-showroom-name\">" + name + "</p>";
                    $('.showroom-date').text(form_date);
                }
                $('.edit-user-showroom-name').remove();
                $('.user-showroom').prepend(edit_showroom_html);
                $('.showroom-date').css('display','inline-block');
                $('#datepicker').css('display','none');
            }
        });
    });

    cancel.on("click",function () {
        edit.removeClass('hide');
        del.removeClass('hide');
        save.removeClass('show');
        cancel.removeClass('show');
        $('.edit-user-showroom-name').remove();
        var edit_showroom_html = "<p class=\"user-showroom-name\" data-origin-name=\"" + origin_showroom_name + "\" >" + form_showroom_name + "</p>";
        $('.user-showroom').prepend(edit_showroom_html);

        //日期
        $('.showroom-date').css('display','inline-block');
        $('#datepicker').css('display','none');
        $('#datepicker').val("");
    });

    del.on("click",function () {
        var delete_dialog = $(".delete-showroom-dialog");
        openShowroomInviteDialog(delete_dialog);
    });

    $('.owner-user').on('mouseenter',function () {
        $(this).css('background-color','#E4E4E4');
        $(this).find('p').css('display','block');
    });

    $('.owner-user').on('mouseleave',function () {
        $(this).css('background-color','');
        $(this).find('p').css('display','none');
    });

    $('.delete-owner-user').on('click',function() {
        var me = $(this);
        var user_id = $(this).attr('data-kvalue');
        var param = {
            "act": "delete_owner_user",
            "sh_id": pageData.showroom_id,
            "user_id": user_id
        }
        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    if (r.jump == true) {
                        location.href = webData.WEB_ROOT;
                    } else {
                        me.parent().css('display','none');
                    }
                }
            }
        });
    });

    inviteContent.find('.invite-friend').on("click",function () {
        var invite_dialog = $(".showroom-invite-friend-dialog");
        openShowroomInviteDialog(invite_dialog);
    });

};

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../common/favor_quick_display":1}],12:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {

var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

$.fn.commentCarousel = function () {
    var viewport = $(this).find("#showroom_comment_screen_viewport");
    var itemList = viewport.find("ul");
    var items = itemList.find("li");
    var btnPrev = $(this).find(".showroom-comment-screen-prev-arraw");
    var btnNext = $(this).find(".showroom-comment-screen-next-arraw");

    var isShowBtn = false;
    var isMoveOne = true;
    var itemsLen = items.length;
    if (itemsLen < 2) {
        return false;
    }

    var viewportHeight = viewport.height();
    var unit = items.eq(0).height();
    var viewItemsLen = Math.floor((viewportHeight + 2 + 30) / (unit + 8));
    if (itemsLen > viewItemsLen) {
        btnPrev.show();
        btnNext.show();
        isShowBtn = true;
    }

    var moveLen = 1;
    var speed = 200;
    viewport.scrollTop(0);

    var prevStep = function(idx){
        if(idx <= 0) return false;
        itemList.find("li:last-child").prependTo(itemList);
        viewport.scrollTop(unit);
        viewport.animate({
            scrollTop : 0
        }, speed, function(){
            prevStep(idx - 1);
        });
    };
    var nextStep = function(idx){
        if(idx <= 0) return false;
        viewport.animate({
            scrollTop : unit
        }, speed, function(){
            itemList.find("li:first-child").appendTo(itemList);
            viewport.scrollTop(0);
            nextStep(idx - 1);
        });
    };

    if(isShowBtn){
        btnPrev.click(function () {
            if (!viewport.is(':animated')) {
                prevStep(moveLen);
            }
        });

        btnNext.click(function () {
            if (!viewport.is(':animated')) {
                nextStep(moveLen);
            }
        });
    }

    items.find('img').click(function(){
        if (isMoveOne && isShowBtn) {
            var idx = $(this).closest('li').index();
            if (idx == 0) {
                prevStep(1);
            } else if(idx == viewItemsLen - 1) {
                if (!viewport.is(':animated')) {
                    nextStep(1);
                }
            }
        }
    });
};

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc2hvd3Jvb20vc2hvd3Jvb21fY29tbWVudF9jYXJvdXNlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxuXHJcbnZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuJC5mbi5jb21tZW50Q2Fyb3VzZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmlld3BvcnQgPSAkKHRoaXMpLmZpbmQoXCIjc2hvd3Jvb21fY29tbWVudF9zY3JlZW5fdmlld3BvcnRcIik7XHJcbiAgICB2YXIgaXRlbUxpc3QgPSB2aWV3cG9ydC5maW5kKFwidWxcIik7XHJcbiAgICB2YXIgaXRlbXMgPSBpdGVtTGlzdC5maW5kKFwibGlcIik7XHJcbiAgICB2YXIgYnRuUHJldiA9ICQodGhpcykuZmluZChcIi5zaG93cm9vbS1jb21tZW50LXNjcmVlbi1wcmV2LWFycmF3XCIpO1xyXG4gICAgdmFyIGJ0bk5leHQgPSAkKHRoaXMpLmZpbmQoXCIuc2hvd3Jvb20tY29tbWVudC1zY3JlZW4tbmV4dC1hcnJhd1wiKTtcclxuXHJcbiAgICB2YXIgaXNTaG93QnRuID0gZmFsc2U7XHJcbiAgICB2YXIgaXNNb3ZlT25lID0gdHJ1ZTtcclxuICAgIHZhciBpdGVtc0xlbiA9IGl0ZW1zLmxlbmd0aDtcclxuICAgIGlmIChpdGVtc0xlbiA8IDIpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0KCk7XHJcbiAgICB2YXIgdW5pdCA9IGl0ZW1zLmVxKDApLmhlaWdodCgpO1xyXG4gICAgdmFyIHZpZXdJdGVtc0xlbiA9IE1hdGguZmxvb3IoKHZpZXdwb3J0SGVpZ2h0ICsgMiArIDMwKSAvICh1bml0ICsgOCkpO1xyXG4gICAgaWYgKGl0ZW1zTGVuID4gdmlld0l0ZW1zTGVuKSB7XHJcbiAgICAgICAgYnRuUHJldi5zaG93KCk7XHJcbiAgICAgICAgYnRuTmV4dC5zaG93KCk7XHJcbiAgICAgICAgaXNTaG93QnRuID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbW92ZUxlbiA9IDE7XHJcbiAgICB2YXIgc3BlZWQgPSAyMDA7XHJcbiAgICB2aWV3cG9ydC5zY3JvbGxUb3AoMCk7XHJcblxyXG4gICAgdmFyIHByZXZTdGVwID0gZnVuY3Rpb24oaWR4KXtcclxuICAgICAgICBpZihpZHggPD0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGl0ZW1MaXN0LmZpbmQoXCJsaTpsYXN0LWNoaWxkXCIpLnByZXBlbmRUbyhpdGVtTGlzdCk7XHJcbiAgICAgICAgdmlld3BvcnQuc2Nyb2xsVG9wKHVuaXQpO1xyXG4gICAgICAgIHZpZXdwb3J0LmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3AgOiAwXHJcbiAgICAgICAgfSwgc3BlZWQsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHByZXZTdGVwKGlkeCAtIDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBuZXh0U3RlcCA9IGZ1bmN0aW9uKGlkeCl7XHJcbiAgICAgICAgaWYoaWR4IDw9IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2aWV3cG9ydC5hbmltYXRlKHtcclxuICAgICAgICAgICAgc2Nyb2xsVG9wIDogdW5pdFxyXG4gICAgICAgIH0sIHNwZWVkLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpdGVtTGlzdC5maW5kKFwibGk6Zmlyc3QtY2hpbGRcIikuYXBwZW5kVG8oaXRlbUxpc3QpO1xyXG4gICAgICAgICAgICB2aWV3cG9ydC5zY3JvbGxUb3AoMCk7XHJcbiAgICAgICAgICAgIG5leHRTdGVwKGlkeCAtIDEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZihpc1Nob3dCdG4pe1xyXG4gICAgICAgIGJ0blByZXYuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXZpZXdwb3J0LmlzKCc6YW5pbWF0ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgcHJldlN0ZXAobW92ZUxlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnRuTmV4dC5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdmlld3BvcnQuaXMoJzphbmltYXRlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0U3RlcChtb3ZlTGVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZW1zLmZpbmQoJ2ltZycpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYgKGlzTW92ZU9uZSAmJiBpc1Nob3dCdG4pIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9ICQodGhpcykuY2xvc2VzdCgnbGknKS5pbmRleCgpO1xyXG4gICAgICAgICAgICBpZiAoaWR4ID09IDApIHtcclxuICAgICAgICAgICAgICAgIHByZXZTdGVwKDEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYoaWR4ID09IHZpZXdJdGVtc0xlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdmlld3BvcnQuaXMoJzphbmltYXRlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFN0ZXAoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbi8vfSk7Il19
},{}],13:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
require('./showroom_comment_carousel');

exports.init = function () {
    var currentDialog;
    var showroomlist = $('.showroom-goods-list')

    $(showroomlist).on('click', '.showroom-good-comments',function () {
        var showroomCommentDialog = $(this).parent().parent().parent().siblings(".showroom-goods-comment-dialog");
        currentDialog = showroomCommentDialog;
        var magnifyImg = showroomCommentDialog.find('#showroom_magnify_thumb');
        openShowroomCommentDialog(showroomCommentDialog);
        var goods_id = $(this).attr('data-kvalue');
        var DefaultColorUp = $(this).attr('data-defaultcolor').replace(" ","_");
        var DefaultColor = $(this).attr('data-defaultcolor').toLowerCase().replace(" ","_");
        var CurrentColorText = $(this).parent().siblings('.color-part').find('.showroom-color-text').text();
        var CurrentColor = $(this).parent().siblings('.color-part').find('.current-goods-color').attr('data-kvalue').replace(" ","_");
        var GoodUrl = $(this).parent().parent().siblings(".p_price").find("a").attr("href");
        var CurrentColorLower = CurrentColor.toLowerCase();
        if (DefaultColorUp != CurrentColor) {
            var newItems = '';
            var shopByColor = pageData.shopByColor;
            var goodShopByColor = shopByColor[goods_id];
            for (var key in goodShopByColor) {
                if (key == CurrentColorLower && key != "") {
                    var img = goodShopByColor[key];
                }
            }
            if (img != "" && typeof img != "undefined") {
                var thumb_src = webData.PIC_PATH + "l/" + img;
                var large_src = webData.PIC_PATH + webData.domain.toLowerCase() + "/o600/" + img;
                var item = showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('.shopbyColor');
                if (item.is(':visible')) {
                    item.find('img').attr('src',thumb_src);
                    item.find('img').attr('data-pimage',large_src);
                    item.find('img').attr('data-image',thumb_src);
                } else {
                    showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('.showroom-comment-screen-zoomThumb').removeClass('showroom-comment-screen-zoomThumbActive');

                    var imgAlt = "";
                    showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('img').each(function() {
                        var thumbImg = $(this);
                        imgAlt = typeof thumbImg.attr("alt") == "undefined" ? "" : thumbImg.attr("alt");
                        if(imgAlt != ""){
                            return false;
                        }
                    });
                    newItems += '<li class="shopbyColor" color="' + CurrentColor + '" kcolor="' + CurrentColorLower + '">'
                        + '<a href="javascript:void(0);" class="showroom-comment-screen-zoomThumb showroom-comment-screen-zoomThumbActive">'
                        + '<img src="' + thumb_src + '" data-pimage="' + large_src + '" data-image="' + thumb_src + '" alt="' + imgAlt + '">'
                        + '<em class="showroom-comment-screen-arrow"></em>'
                        + '</a>'
                        + '</li>';
                    showroomCommentDialog.find('#showroom_comment_screen_thumblist').prepend(newItems);
                }
            }
        } else {
            showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('.shopbyColor').remove();
            showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('.showroom-comment-screen-zoomThumb').removeClass('showroom-comment-screen-zoomThumbActive');
            $(showroomCommentDialog.find('#showroom_comment_screen_thumblist').find('.showroom-comment-screen-zoomThumb')[0]).addClass('showroom-comment-screen-zoomThumbActive');
        }
        showroomCommentDialog.find('.showroom-comment-color-text').text(CurrentColorText);
        showroomCommentDialog.find('.showroom-comment-good-color').find('span').attr('class','showroom-comment-color-lump');
        showroomCommentDialog.find('.showroom-comment-good-color').find('span').addClass(CurrentColorLower);
        showroomCommentDialog.find('.showroom-goods-url').attr('href',GoodUrl);
        showroomCommentDialog.find('.goods_price').attr('href',GoodUrl);
        showroomCommentDialog.find('.showroom-comment-order-dress').attr('href',GoodUrl);
        var DefaultSrc = showroomCommentDialog.find('a.showroom-comment-screen-zoomThumb.showroom-comment-screen-zoomThumbActive').find('img').attr('data-pimage');
        magnifyImg.attr('src',DefaultSrc);
        magnifyImg.load(function() {
            var magnify_pic_height = magnifyImg.height();
            var magnify_pic_width = magnifyImg.width();

            magnifyImg.css({"height":magnify_pic_height,"width":magnify_pic_width});

            if (magnify_pic_height == magnify_pic_width && magnify_pic_height != 0 && magnify_pic_width != 0) {
                magnifyImg.css({"height":"408px","width":"408px"});
            } else {
                magnifyImg.css({"height":"550px","width":"408px"});
            }

            showroomCommentDialog.find('.showroom-comment-screen-carousel:eq(0)').commentCarousel();
        });
        var commentPart = showroomCommentDialog.find('.showroom-good-user-comments');
        commentPart.scrollTop(commentPart[0].scrollHeight);
    });

    function openShowroomCommentDialog(showroomCommentDialog) {
        if ($('#dialogOverlay').size() > 0) {
            var layer = $('#dialogOverlay');
        } else {
            var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body');
        };

        layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5);

        showroomCommentDialog.css("display", "block");
        showroomCommentDialog.css("top",$(window).scrollTop() + window.innerHeight / 7);
    };

    $(showroomlist).on('click', '.showroom-goods-comment-dialog #showroom_comment_screen_viewport img', function() {
        var showroomThumbList = $(this).parent().parent().parent();
        var ThumbBox = $(this).parent().parent().parent().parent().parent().siblings('#showroom_magnify_thumb_box');
        var color = $(this).attr("color");
        var kcolor = $(this).attr("kcolor");
        var image = new Image();
        image.src = $(this).attr('data-pimage');
        if (!image.complete) {
            ThumbBox.find('.imagePreload').show().css("visibility", 'visible');
        }

        ThumbBox.find('#showroom_magnify_thumb').attr('src', image.src);
        ThumbBox.find('#showroom_magnify_thumb').load(function(){
            $(this).siblings('.imagePreload').hide().css('visibility', 'hidden');
        });
        showroomThumbList.find('.showroom-comment-screen-zoomThumb').removeClass('showroom-comment-screen-zoomThumbActive');
        $(this).parent().addClass('showroom-comment-screen-zoomThumbActive');

    });

    $(showroomlist).on('click', '.showroom-good-dialog-favorite', function() {
        if ($(this).hasClass('selected')) {
            var change_status = 1;
        } else {
            var change_status = 0;
        }
        var me = $(this);
        var currentUserName = $(this).attr('data-cname');
        var title = $(this).attr('title');
        var otitle = $(this).attr('data-otitle');
        var goods_id = $(this).attr('data-kvalue');
        var sh_id = pageData.showroom_id;
        var count = $(this).find('.showroom-good-favorite-count').text();
        var icon = $(this).find('.showroom-good-favorite-icon');
        var favorite_part = $(this);

        var param = {
            "act": "change_showroom_goods_favorite",
            "goodsId": goods_id,
            "sh_id": sh_id,
            "change_status": change_status
        }

        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    if (r.type == 'add') {
                        count++;
                        favorite_part.find('.showroom-good-favorite-count').text(count);
                        favorite_part.find('.showroom-good-favorite-icon').addClass('selected');
                        favorite_part.addClass('selected');

                        var list_like_icons = $('.showroom-good-information:not(.deleted) .showroom-good-favorite');
                        $.each(list_like_icons,function (i,item) {
                            if ($(item).attr('data-kvalue') == goods_id) {
                                $(item).find('.showroom-good-favorite-icon').addClass('selected');
                                $(item).addClass('selected');
                                $(item).find('.showroom-good-favorite-count').text(count);

                                var length = me.siblings('.fav-user-list').find('.favorite_user_name').length;
                                if (length == 0) {
                                    var html = "<div data-kvalue='" + r.userId + "' class='favorite_user_name last_user_name'>" + currentUserName + "</div>"
                                } else {
                                    var html = "<div data-kvalue='" + r.userId + "' class='favorite_user_name last_user_name'>" + currentUserName + "," + "</div>"
                                }
                                me.siblings('.fav-user-list').removeClass('unshow');
                                me.siblings('.fav-user-list').prepend(html);
                                if (title == "") {
                                    $(item).attr("title",currentUserName);
                                } else {
                                    $(item).attr("title",title + "," + currentUserName);
                                }
                            }
                        });
                        if (title == "") {
                            me.attr("title",currentUserName);
                        } else {
                            me.attr("title",title + "," + currentUserName);
                        }
                    } else {
                        count--;
                        favorite_part.find('.showroom-good-favorite-count').text(count);
                        favorite_part.find('.showroom-good-favorite-icon').removeClass('selected');
                        favorite_part.removeClass('selected');

                        var titlelist = title.split(",");
                        var index = titlelist.indexOf(currentUserName);
                        if (index > -1) {
                            titlelist.splice(index,1);
                        }
                        var newtitle = titlelist.join(",");

                        var list_like_icons = $('.showroom-good-favorite');
                        $.each(list_like_icons,function (i,item) {
                            if ($(item).attr('data-kvalue') == goods_id) {
                                $(item).find('.showroom-good-favorite-icon').removeClass('selected');
                                $(item).removeClass('selected');
                                $(item).find('.showroom-good-favorite-count').text(count);

                                var userList = me.siblings('.fav-user-list').find('.favorite_user_name');
                                $.each(userList,function (i,value) {
                                    if ($(value).attr('data-kvalue') == r.userId) {
                                        $(value).remove();
                                    }
                                });
                                var length = me.siblings('.fav-user-list').find('.favorite_user_name').length;
                                if (length == 0) {
                                    me.siblings('.fav-user-list').addClass('unshow');
                                }
                                $(item).attr("title",newtitle);
                            }
                        });
                        me.attr("title",newtitle);
                    }
                }
            }
        });
    });

    var commiting = false;

    var postComment = function (event) {
        var inputComment = $(event.currentTarget).parent().find('.input-comment');
        var postBtn = $(event.currentTarget).parent().find('.post-goods-comment');
        var errorTip = $(event.currentTarget).parent().parent().find('.error-tip');

        var new_comment = $(inputComment).val().trim();
        var sh_id = pageData.showroom_id;
        var goods_id = $(postBtn).attr('data-kvalue');
        var sendContent = $(postBtn).parent().parent().parent();
        var count = sendContent.parent().siblings('.showroom-good-comment-title').find('.comment-count').text();
        var me = $(postBtn);

        var tip = pageData.langs.page_showroom_write_comment || "Please write your comment."

        if (new_comment == "" || typeof new_comment == "undefined") {
            $(errorTip).text(tip);
            return false;
        }

        $(errorTip).text("");

        if (commiting) {
            return false
        }
        commiting = true

        var param = {
            "act": "add_showroom_goods_comment",
            "goodsId": goods_id,
            "sh_id": sh_id,
            "comment": new_comment
        }

        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                commiting = false
                if (r.code == 0) {
                    var user_name = r.add_comment.user_name;
                    var comments = r.add_comment.comments;
                    var firstCharacter = user_name.substring(0,1).toUpperCase();
                    var html = "<div class='good-user-comment'>" +
                        "<div class='user_icon'>" + firstCharacter + "</div>" +
                        "<div class='user-comment-content'>" +
                        "<div class='clearfix' style='width: 280px;margin-bottom: 10px'>" +
                        "<div class='comment_user_name'>" + user_name + "</div>" +
                        "<div data-value='" + goods_id +"' data-kvalue='" + r.add_comment.sgc_id + "' class='delete_user_comment'>" +
                        "<span style='float: right'>×</span>" +
                        "</div>" +
                        "</div>" +
                        "<div class='clearfix' style='width: 280px'>" +
                        "<div class='comment_content'>" + comments + "</div>" +
                        "<div class='comment_add_date'>" + r.add_comment.last_update_time + "</div>" +
                        "</div>" +
                        "</div>" +
                        "</div>";
                    sendContent.before(html);
                    count++;
                    sendContent.parent().siblings('.showroom-good-comment-title').find('.comment-count').text(count);

                    var Comments = $('.showroom-good-comments');
                    $.each(Comments,function (i,item) {
                        if ($(item).attr('data-kvalue') == goods_id) {
                            if (count == 1) {
                                $(item).find('.showroom-good-comment-icon').addClass("more-comments");
                                $(item).find('.comment-module').addClass("have-comment");
                                $(item).find('.comment-text').text(_lang.page_common_comments);
                            }
                            $(item).find('.comment-count').text(count);
                        }
                    });
                    me.siblings('input').val("");
                    $('.delete_user_comment').unbind();

                    var commentPart = currentDialog.find('.showroom-good-user-comments');
                    commentPart.scrollTop(commentPart[0].scrollHeight);
                }
            }
        });
    }

    $(showroomlist).on('keypress', '.showroom-good-comment-content .input-comment', function(event) {
        if (event.keyCode == "13") { // 回车事件
            postComment(event)
        }
    });

    $(showroomlist).on('click', '.post-goods-comment', postComment)

    $(showroomlist).on('click', '.showroom-comment-close', function () {
        $(".showroom-goods-comment-dialog").css("display", "none");
        $('#dialogOverlay').css("display", "none");
    });

    $(showroomlist).on('click', '.delete_user_comment', function () {
        var sgc_id = $(this).attr('data-kvalue');
        var goods_id = $(this).attr('data-value');
        var count = $(this).parent().parent().parent().parent().siblings('.showroom-good-comment-title').find('.comment-count');
        var currentCount = $(this).parent().parent().parent().parent().siblings('.showroom-good-comment-title').find('.comment-count').text();
        var deleteBtn = $(this);
    
        var param = {
            "act": "delete_showroom_goods_comment",
            "sgc_id": sgc_id,
            "sh_id": pageData.showroom_id
        }
        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    deleteBtn.parent().parent().parent().css('display','none');
                    currentCount--;
                    count.text(currentCount);
    
                    var Comments = $('.showroom-good-comments');
                    $.each(Comments,function (i,item) {
                        if ($(item).attr('data-kvalue') == goods_id) {
                            if (currentCount == 0) {
                                $(item).find('.showroom-good-comment-icon').removeClass("more-comments");
                                $(item).find('.comment-module').removeClass("have-comment");
                                $(item).find('.comment-text').text(_lang.page_common_comment);
                            }
                            $(item).find('.comment-count').text(currentCount);
                        }
                    });
                }
            }
        });
    });
};
//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./showroom_comment_carousel":12}],14:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
var popSubscribeOffGoods = require('../mod/popSubscribeOffGoods');

exports.init = function () {
    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    var deleteAll = $('.delete-all-goods');
    var showroomlist = $('.showroom-goods-list')

    // $('.showroom-good-style').find('.colorlump-arrow').on("click",function () {
    //     $(this).parent().siblings('.showroom-color-lumps').css('display','block');
    // });

    deleteAll.on("click",function () {
        var tips = _lang.page_delete_showroom_all_goods;
        var rs = confirm(tips);
        if (rs == false) {
            return;
        }
        var me = $(this);
        var param = {
            "act": "delete_all_showroom_goods",
            "sh_id": pageData.showroom_id,
        }
        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    $('.empty-showroom-goods-content').removeClass("nodisplay");
                    me.hide()
                    $('.showroom-goods-content').hide()
                    $('#showroom-tutorial-list').hide()
                    $('.showroom-good-information').each(function () {
                        $(this).addClass('deleted')
                    })
                }
            }
        });
    });

    $('.see-more-dresses-url').on('click', function(event) {
        event.preventDefault()
        var me = $(this)
        var list = $(this).parents('.showroom-goods-list')

        var currTotal = $(list).find('.showroom-good-information:not(.deleted)').size()
        var total = $(list).siblings('.goods-count').text()

        var sh_cat = $(this).attr('data-sh-cat')
        var page = $(this).attr('data-page')
        sh_cat = sh_cat ? parseInt(sh_cat) : -1
        page = page ? parseInt(page) : 0

        if (total > currTotal  && page > 1 && [0, 2, 3, 4].indexOf(sh_cat) > -1) {
            $.ajax({
                method: "POST",
                url: window.location.href,
                dataType: 'json',
                data: {
                    p: page,
                    sh_cat: sh_cat
                },
                success: function(r) {
                    if (r.code == 0 && typeof r.goods_list != "undefined" && r.goods_count > 0) {
                        Object.assign(pageData.shopByColor, r.shopByColorImgs)
                        var anchor = $(list).find('.add-see-more-dresses')
                        anchor.before(r.goods_list)
                        if (total <= $(list).find('.showroom-good-information:not(.deleted)').size()) {
                            $(me).parent().hide()
                            if ($(anchor).find('.add-more-dresses').length == 0) {
                                $(anchor).hide()
                            }
                        }
                        $(me).attr('data-page', (page + 1))
                    } else {
                        $(me).parent().hide()
                        if ($(anchor).find('.add-more-dresses').length == 0) {
                            $(anchor).hide()
                        }
                    }
                }
            })
        }
    })

    $(showroomlist).on('click', '.subscribe_offgoods', function() {
        var goods_id = $(this).attr('data-goods-id')
        var source = $(this).attr('data-source')
        var self = $(this).parent()

        new popSubscribeOffGoods(goods_id, source, function() {
            self.hide()
            self.siblings(".subscribe-line").text(_lang.page_offgoods_have_subscribed)
        }).open()
    });

    $(showroomlist).on('mouseenter', '.showroom-good-style .color-part', function () {
        var show = $(this).find('.colorlump-arrow').is(':visible');
        if (show) {
            $(this).find('.showroom-color-lumps').css('display','block');
            $(this).addClass('active');
        }
    });

    $(showroomlist).on('mouseleave', '.showroom-good-style .color-part', function () {
        $(this).find('.showroom-color-lumps').css('display','none');
        $(this).removeClass('active');
    });

    $(showroomlist).on('mouseleave', '.showroom-color-lumps', function () {
        $(this).css('display','none');
    });

    $(showroomlist).on('click', '.showroom-color-lumps .showroom-pis-color-a .showroom-pis-color', function () {
        var goods_id = $(this).parent().parent().attr("data-kvalue");
        var bigColor = $(this).attr("data-value");
        var color = $(this).attr("data-kvalue");
        var defaultColor = $(this).attr("data-defaultcolor");
        var defaultColorUp = $(this).attr("data-default");
        var recordGoodsColor = $(this).parent().parent().siblings('.current-goods-color');

        if (Object.keys(pageData.shopByColor).length > 0) {
            var shopByColor = pageData.shopByColor;
            var goodShopByColor = shopByColor[goods_id];
            for (var key in goodShopByColor) {
                if (key == color && key != "") {
                    var img = goodShopByColor['good_thumb_prefix'] + goodShopByColor[key];
                }
            }

            var href = $(this).parents(".good-character-part").siblings('.good-picture-part').find('.good-pic').find('a').attr('data-kvalue');
            var swatchhref = $(this).parents(".good-character-part").siblings('.good-picture-part').find('.showroom-color-swatch').attr('data-kvalue');
            if (typeof img != "undefined") {
                $(this).parents(".good-character-part").siblings('.good-picture-part').find('.imageSrc').attr('src',img);
                $(this).parents(".good-character-part").siblings('.good-picture-part').find('.good-pic').find('a').attr('href',href+"?filterColor="+color);
                $(this).parents(".showroom-good-style").siblings('.p_price').find('a').attr('href',href+"?filterColor="+color);
                $(this).parents(".good-character-part").find('.showroom-good-name').attr('href',href+"?filterColor="+color);
                $(this).parents(".good-character-part").siblings('.good-picture-part').find('.showroom-color-swatch').attr('href',swatchhref+"?swatch_color="+color);
                $(this).parents(".showroom-color-lumps").siblings('.current-goods-color').find('.showroom-color-text').text(bigColor);
            } else {
                if (defaultColor == color) {
                    var defaultimg = $(this).parents(".good-character-part").siblings('.good-picture-part').find('.imageSrc').attr('data-defaultimg');
                    $(this).parents(".good-character-part").siblings('.good-picture-part').find('.imageSrc').attr('src',defaultimg);
                    $(this).parents(".good-character-part").siblings('.good-picture-part').find('.good-pic').find('a').attr('href',href);
                    $(this).parents(".showroom-good-style").siblings('.p_price').find('a').attr('href',href);
                    $(this).parents(".good-character-part").find('.showroom-good-name').attr('href',href);
                    $(this).parents(".good-character-part").siblings('.good-picture-part').find('.showroom-color-swatch').attr('href',swatchhref);
                    $(this).parents(".showroom-color-lumps").siblings('.current-goods-color').find('.showroom-color-text').text(defaultColorUp);
                } else {
                    $(this).parents(".showroom-color-lumps").siblings('.current-goods-color').find('.showroom-color-text').text(bigColor);
                }
            }
            $(this).parents(".showroom-color-lumps").siblings('.current-goods-color').find('.showroom-good-color').find('span').attr('class','showroom-color-lump');
            $(this).parents(".showroom-color-lumps").siblings('.current-goods-color').find('.showroom-good-color').find('span').addClass(color);
            $(this).parents(".good-character-part").siblings('.good-picture-part').find('#showroom-swatch_icon').attr('class','swatch-icon');
            $(this).parents(".good-character-part").siblings('.good-picture-part').find('#showroom-swatch_icon').addClass(color);
            $(recordGoodsColor).attr('data-kvalue', color)
        }

        $(this).parent().parent().find('dt').removeClass('selected');
        $(this).find('dt').addClass('selected');
    });

    $(showroomlist).on('click', '.remove-showroom-good', function () {
        var remove = $(this);
        var goodsCount = $(this).parent().parent().parent().siblings('.goods-count');
        var goods_id = $(this).attr('data-kvalue');

        var anchor = $(this).parents('.showroom-goods-list').find('.add-see-more-dresses')
        var dataEle = $(anchor).find('.see-more-dresses-url')

        var pageSize = dataEle.attr('data-page-size')
        var sh_cat = dataEle.attr('data-sh-cat')
        var page = dataEle.attr('data-page')
        var next_index = (parseInt(page) - 1) * parseInt(pageSize)
        next_index = next_index > 0 ? next_index : -1;

        var sh_id = pageData.showroom_id;
        var param = {
            "act": "move_from_showroom",
            "goodsId": goods_id,
            "sh_id": sh_id,
            "sh_cat": sh_cat,
            "next_index": next_index,
        }
        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    var count = parseInt(goodsCount.text()) - 1
                    goodsCount.text(count)
                    remove.parent().parent().addClass('deleted');
                    if (count == 0) {
                        goodsCount.parent().css('display','none');
                    } else if (r.afterGoods && r.afterGoods.goods_count > 0 && r.afterGoods.goods_list) {
                        anchor.before(r.afterGoods.goods_list)
                    }
                    if (count <= pageSize || (r.afterGoods && r.afterGoods.goods_count <= 0)) {
                        $(dataEle).parent().hide()
                        $(dataEle).parent().siblings('hr').hide()
                        if ($(anchor).find('.add-more-dresses').length == 0) {
                            $(anchor).hide()
                        }
                    }
                    if ($('.showroom-goods-content').height() == 0) {
                        $('.empty-showroom-goods-content').removeClass("nodisplay");
                        $('.delete-icon').css("display","none");
                    }

                }
            }
        });

        var firstRemove = $('.showroom-good-information:not(.deleted) .remove-showroom-good')[0]
        if (firstRemove && goods_id == $(firstRemove).attr('data-kvalue')) {
            $('#showroom-tutorial-list').hide()
        }
    });


    $(showroomlist).on('click', '.showroom-good-favorite', function () {
        if ($(this).find('.showroom-good-favorite-icon').hasClass('selected')) {
            var change_status = 1;
        } else {
            var change_status = 0;
        }
        var currentUserName = $(this).attr('data-cname');
        var title = $(this).attr('title');
        var otitle = $(this).attr('data-otitle');
        var goods_id = $(this).attr('data-kvalue');
        var sh_id = pageData.showroom_id;
        var count = $(this).find('.showroom-good-favorite-count').text();
        var icon = $(this).find('.showroom-good-favorite-icon');
        var favorite_part = $(this);
        var me = $(this);

        var param = {
            "act": "change_showroom_goods_favorite",
            "goodsId": goods_id,
            "sh_id": sh_id,
            "change_status": change_status
        }

        $.ajax({
            'type': 'get',
            'url': webData.WEB_ROOT + 'ajax.php',
            'data': param,
            'cache': true,
            'dataType': 'json',
            'success': function (r) {
                if (r.code == 0) {
                    if (r.type == 'add') {
                        count++;
                        favorite_part.find('.showroom-good-favorite-count').text(count);
                        favorite_part.find('.showroom-good-favorite-icon').addClass('selected');
                        favorite_part.addClass('selected');

                        var dialog_like_icons = $('.showroom-good-dialog-favorite');
                        $.each(dialog_like_icons,function (i,item) {
                            if ($(item).attr('data-kvalue') == goods_id) {
                                $(item).find('.showroom-good-favorite-icon').addClass('selected');
                                $(item).find('.showroom-good-favorite-count').text(count);
                                $(item).addClass('selected');

                                var length = $(item).siblings('.fav-user-list').find('.favorite_user_name').length;
                                if (length == 0) {
                                    var html = "<div data-kvalue='" + r.userId + "' class='favorite_user_name last_user_name'>" + currentUserName + "</div>"
                                } else {
                                    var html = "<div data-kvalue='" + r.userId + "' class='favorite_user_name last_user_name'>" + currentUserName + "," + "</div>"
                                }
                                $(item).siblings('.fav-user-list').removeClass('unshow');
                                $(item).siblings('.fav-user-list').prepend(html);
                                if (title == "") {
                                    $(item).attr("title",currentUserName);
                                } else {
                                    $(item).attr("title",title + "," + currentUserName);
                                }
                            }
                        });
                        if (title == "") {
                            me.attr("title",currentUserName);
                        } else {
                            me.attr("title",title + "," + currentUserName);
                        }
                    } else {
                        count--;
                        favorite_part.find('.showroom-good-favorite-count').text(count);
                        favorite_part.find('.showroom-good-favorite-icon').removeClass('selected');
                        favorite_part.removeClass('selected');
                        var titlelist = title.split(",");
                        var index = titlelist.indexOf(currentUserName);
                        if (index > -1) {
                            titlelist.splice(index,1);
                        }
                        var newtitle = titlelist.join(",");

                        var dialog_like_icons = $('.showroom-good-dialog-favorite');
                        $.each(dialog_like_icons,function (i,item) {
                            if ($(item).attr('data-kvalue') == goods_id) {
                                $(item).find('.showroom-good-favorite-icon').removeClass('selected');
                                $(item).find('.showroom-good-favorite-count').text(count);
                                $(item).removeClass('selected');

                                var userList = $(item).siblings('.fav-user-list').find('.favorite_user_name');
                                $.each(userList,function (i,value) {
                                    if ($(value).attr('data-kvalue') == r.userId) {
                                        $(value).remove();
                                    }
                                });
                                var length = $(item).siblings('.fav-user-list').find('.favorite_user_name').length;
                                if (length == 0) {
                                    $(item).siblings('.fav-user-list').addClass('unshow');
                                }
                                $(item).attr("title",newtitle);
                            }
                        });
                        me.attr("title",newtitle);
                    }
                }
            }
        });
    });

    $(showroomlist).on('mouseenter', '.good-picture-part', function () {
        var color = $(this).parents('.showroom-good-information').find('.showroom-color-text').text();
        color = color.replace(" ","_");
        color = color.toLowerCase();
        var banColorList = pageData.hideOrderSwatchSpecialColor;
        if ($.inArray(color, banColorList) >= 0) {
            $(this).find('.showroom-order-swatch').css('display','none');
        } else {
            $(this).find('.showroom-order-swatch').css('display','block');
        }
    });

    $(showroomlist).on('mouseleave', '.good-picture-part', function () {
        $(this).find('.showroom-order-swatch').css('display','none');
    });
};

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/popSubscribeOffGoods":7}],15:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var Facebook = require('../socialMedia/facebook');
require('../lib/jqueryForm');
var FormCheckEach = require('../mod/formCheckEach'); //检查表单

exports.init = function () {
    $('.facebook-invite').on('click',function () {
        $(this).siblings().removeClass('active');
        $(this).addClass('active');
        $('.facebook-content').siblings().removeClass('active');
        $('.facebook-content').addClass('active');
    });

    $('.email-invite').on('click',function () {
        $(this).siblings().removeClass('active');
        $(this).addClass('active');
        $('.email-content').siblings().removeClass('active');
        $('.email-content').addClass('active');
    });

    $('.link-invite').on('click',function () {
        $(this).siblings().removeClass('active');
        $(this).addClass('active');
        $('.link-content').siblings().removeClass('active');
        $('.link-content').addClass('active');
    });

    $('.facebook-invite').click();

    $('.showroom-invite-close').on("click",function () {
        $(".showroom-invite-friend-dialog").css("display", "none");
        $('#dialogOverlay').css("display", "none");
    });

    faceBookShare();
    emailShare();
    LinkShare();

};

var faceBookShare = function () {
    Facebook.init();
    var name = $('.user-showroom-name').text();
    var desc = pageData.langs.page_showroom_invite_email_title || "You've been invited to " + name + "'s Showroom!"
    desc.replace("{$showroom_name}", name)
    $('.facebook-button').on("click",function () {
        FB.ui({
            method: 'send',
            link: $('meta[property="og:url"]').attr('content') + "&showroom_invite=1&utm_source=" + pageData.showroom_id + "&utm_medium=facebook&utm_content=invite",
            description: desc
        });
    });
}

var placeholder = pageData.langs.page_forgotpassword_email || "Email Address"


var emailShare = function () {
    $('.add-email-address').on("click",function () {
        var length = $('#showroom_email_form').find('input').length;
        $('.showroom-email-share-list').append("<input placeholder=\"" +    placeholder + "\" type=\"text\" name='email" + length + "'>");
    });

    var showroom_email_form = $('#showroom_email_form');
    var emailShareBtn = $('.email-button');
    var showroom_user_name = $('.invite-and-avatar').find('.master-name').text();
    var showroom_url = $('meta[property="og:url"]').attr('content') + "&showroom_invite=1&utm_source=" + pageData.showroom_id + "&utm_medium=email&utm_content=invite";
    var empty_showroom_goods = $('.empty-showroom-goods-content');
    var empty_goods = false;
    if (empty_showroom_goods.is(':visible')) {
        empty_goods = true;
    }

    //检查表单
    var formItems = {
        "email0": [
            {type: "null", errMsg: _lang.page_email_enter_email},
            {type : "email", errMsg : _lang.page_common_email_format_error}
        ],
    };

    var fce = new FormCheckEach({
        "elem_form" : showroom_email_form,
        "items" : formItems
    });

    var param = {
        "showroom_user_name": showroom_user_name,
        "showroom_url": showroom_url,
        "empty_goods": empty_goods ? 1 : 0,
    }

    var opt = {
        'dataType': 'json',
        'data': param,
        'beforeSend': function () {

        },
        'success': function (r) {
            if (r.code == 0) {
                alert(_lang.page_common_send_email_successfully);
                $('.showroom-invite-close').click();
                $('.showroom-email-share-list').find('input').val("");
            }
        },
        'error': function () {

        }
    }

    emailShareBtn.on('click', function () {
        var ipts = showroom_email_form.find('input');
        if(!fce.checkAll(ipts, true)) {
            return false;
        }else {
            showroom_email_form.ajaxSubmit(opt);
            return false;
        }
    });
}

var LinkShare = function () {
}

//});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvc2hvd3Jvb20vc2hvd3Jvb21faW52aXRlX2ZyaWVuZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxudmFyICQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snJCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnJCddIDogbnVsbCk7XHJcbnZhciBGYWNlYm9vayA9IHJlcXVpcmUoJy4uL3NvY2lhbE1lZGlhL2ZhY2Vib29rJyk7XHJcbnJlcXVpcmUoJy4uL2xpYi9qcXVlcnlGb3JtJyk7XHJcbnZhciBGb3JtQ2hlY2tFYWNoID0gcmVxdWlyZSgnLi4vbW9kL2Zvcm1DaGVja0VhY2gnKTsgLy/mo4Dmn6XooajljZVcclxuXHJcbmV4cG9ydHMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICQoJy5mYWNlYm9vay1pbnZpdGUnKS5vbignY2xpY2snLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICQoJy5mYWNlYm9vay1jb250ZW50Jykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgJCgnLmZhY2Vib29rLWNvbnRlbnQnKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuZW1haWwtaW52aXRlJykub24oJ2NsaWNrJyxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKCcuZW1haWwtY29udGVudCcpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICQoJy5lbWFpbC1jb250ZW50JykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmxpbmstaW52aXRlJykub24oJ2NsaWNrJyxmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKCcubGluay1jb250ZW50Jykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgJCgnLmxpbmstY29udGVudCcpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJy5mYWNlYm9vay1pbnZpdGUnKS5jbGljaygpO1xyXG5cclxuICAgICQoJy5zaG93cm9vbS1pbnZpdGUtY2xvc2UnKS5vbihcImNsaWNrXCIsZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIuc2hvd3Jvb20taW52aXRlLWZyaWVuZC1kaWFsb2dcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgJCgnI2RpYWxvZ092ZXJsYXknKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZhY2VCb29rU2hhcmUoKTtcclxuICAgIGVtYWlsU2hhcmUoKTtcclxuICAgIExpbmtTaGFyZSgpO1xyXG5cclxufTtcclxuXHJcbnZhciBmYWNlQm9va1NoYXJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgRmFjZWJvb2suaW5pdCgpO1xyXG4gICAgdmFyIG5hbWUgPSAkKCcudXNlci1zaG93cm9vbS1uYW1lJykudGV4dCgpO1xyXG4gICAgdmFyIGRlc2MgPSBwYWdlRGF0YS5sYW5ncy5wYWdlX3Nob3dyb29tX2ludml0ZV9lbWFpbF90aXRsZSB8fCBcIllvdSd2ZSBiZWVuIGludml0ZWQgdG8gXCIgKyBuYW1lICsgXCIncyBTaG93cm9vbSFcIlxyXG4gICAgZGVzYy5yZXBsYWNlKFwieyRzaG93cm9vbV9uYW1lfVwiLCBuYW1lKVxyXG4gICAgJCgnLmZhY2Vib29rLWJ1dHRvbicpLm9uKFwiY2xpY2tcIixmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgRkIudWkoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdzZW5kJyxcclxuICAgICAgICAgICAgbGluazogJCgnbWV0YVtwcm9wZXJ0eT1cIm9nOnVybFwiXScpLmF0dHIoJ2NvbnRlbnQnKSArIFwiJnNob3dyb29tX2ludml0ZT0xJnV0bV9zb3VyY2U9XCIgKyBwYWdlRGF0YS5zaG93cm9vbV9pZCArIFwiJnV0bV9tZWRpdW09ZmFjZWJvb2smdXRtX2NvbnRlbnQ9aW52aXRlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxudmFyIHBsYWNlaG9sZGVyID0gcGFnZURhdGEubGFuZ3MucGFnZV9mb3Jnb3RwYXNzd29yZF9lbWFpbCB8fCBcIkVtYWlsIEFkZHJlc3NcIlxyXG5cclxuXHJcbnZhciBlbWFpbFNoYXJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnLmFkZC1lbWFpbC1hZGRyZXNzJykub24oXCJjbGlja1wiLGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gJCgnI3Nob3dyb29tX2VtYWlsX2Zvcm0nKS5maW5kKCdpbnB1dCcpLmxlbmd0aDtcclxuICAgICAgICAkKCcuc2hvd3Jvb20tZW1haWwtc2hhcmUtbGlzdCcpLmFwcGVuZChcIjxpbnB1dCBwbGFjZWhvbGRlcj1cXFwiXCIgKyAgICBwbGFjZWhvbGRlciArIFwiXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPSdlbWFpbFwiICsgbGVuZ3RoICsgXCInPlwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBzaG93cm9vbV9lbWFpbF9mb3JtID0gJCgnI3Nob3dyb29tX2VtYWlsX2Zvcm0nKTtcclxuICAgIHZhciBlbWFpbFNoYXJlQnRuID0gJCgnLmVtYWlsLWJ1dHRvbicpO1xyXG4gICAgdmFyIHNob3dyb29tX3VzZXJfbmFtZSA9ICQoJy5pbnZpdGUtYW5kLWF2YXRhcicpLmZpbmQoJy5tYXN0ZXItbmFtZScpLnRleHQoKTtcclxuICAgIHZhciBzaG93cm9vbV91cmwgPSAkKCdtZXRhW3Byb3BlcnR5PVwib2c6dXJsXCJdJykuYXR0cignY29udGVudCcpICsgXCImc2hvd3Jvb21faW52aXRlPTEmdXRtX3NvdXJjZT1cIiArIHBhZ2VEYXRhLnNob3dyb29tX2lkICsgXCImdXRtX21lZGl1bT1lbWFpbCZ1dG1fY29udGVudD1pbnZpdGVcIjtcclxuICAgIHZhciBlbXB0eV9zaG93cm9vbV9nb29kcyA9ICQoJy5lbXB0eS1zaG93cm9vbS1nb29kcy1jb250ZW50Jyk7XHJcbiAgICB2YXIgZW1wdHlfZ29vZHMgPSBmYWxzZTtcclxuICAgIGlmIChlbXB0eV9zaG93cm9vbV9nb29kcy5pcygnOnZpc2libGUnKSkge1xyXG4gICAgICAgIGVtcHR5X2dvb2RzID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvL+ajgOafpeihqOWNlVxyXG4gICAgdmFyIGZvcm1JdGVtcyA9IHtcclxuICAgICAgICBcImVtYWlsMFwiOiBbXHJcbiAgICAgICAgICAgIHt0eXBlOiBcIm51bGxcIiwgZXJyTXNnOiBfbGFuZy5wYWdlX2VtYWlsX2VudGVyX2VtYWlsfSxcclxuICAgICAgICAgICAge3R5cGUgOiBcImVtYWlsXCIsIGVyck1zZyA6IF9sYW5nLnBhZ2VfY29tbW9uX2VtYWlsX2Zvcm1hdF9lcnJvcn1cclxuICAgICAgICBdLFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZmNlID0gbmV3IEZvcm1DaGVja0VhY2goe1xyXG4gICAgICAgIFwiZWxlbV9mb3JtXCIgOiBzaG93cm9vbV9lbWFpbF9mb3JtLFxyXG4gICAgICAgIFwiaXRlbXNcIiA6IGZvcm1JdGVtc1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHBhcmFtID0ge1xyXG4gICAgICAgIFwic2hvd3Jvb21fdXNlcl9uYW1lXCI6IHNob3dyb29tX3VzZXJfbmFtZSxcclxuICAgICAgICBcInNob3dyb29tX3VybFwiOiBzaG93cm9vbV91cmwsXHJcbiAgICAgICAgXCJlbXB0eV9nb29kc1wiOiBlbXB0eV9nb29kcyA/IDEgOiAwLFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBvcHQgPSB7XHJcbiAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLFxyXG4gICAgICAgICdkYXRhJzogcGFyYW0sXHJcbiAgICAgICAgJ2JlZm9yZVNlbmQnOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICBpZiAoci5jb2RlID09IDApIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KF9sYW5nLnBhZ2VfY29tbW9uX3NlbmRfZW1haWxfc3VjY2Vzc2Z1bGx5KTtcclxuICAgICAgICAgICAgICAgICQoJy5zaG93cm9vbS1pbnZpdGUtY2xvc2UnKS5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgJCgnLnNob3dyb29tLWVtYWlsLXNoYXJlLWxpc3QnKS5maW5kKCdpbnB1dCcpLnZhbChcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2Vycm9yJzogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW1haWxTaGFyZUJ0bi5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlwdHMgPSBzaG93cm9vbV9lbWFpbF9mb3JtLmZpbmQoJ2lucHV0Jyk7XHJcbiAgICAgICAgaWYoIWZjZS5jaGVja0FsbChpcHRzLCB0cnVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICBzaG93cm9vbV9lbWFpbF9mb3JtLmFqYXhTdWJtaXQob3B0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgTGlua1NoYXJlID0gZnVuY3Rpb24gKCkge1xyXG59XHJcblxyXG4vL30pOyJdfQ==
},{"../lib/jqueryForm":2,"../mod/formCheckEach":5,"../socialMedia/facebook":17}],16:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null)
var Cookie = require('../mod/cookie')

var tutorialEntry = $('.showroom-tutorial-entry')
var tutorialList = $('#showroom-tutorial-list')
var close = $('.dialog-close-icon')

var shopTogetherDialog = $('#tutorial-shop-together')
var saveFavDialog = $('#tutorial-save-fav')
var inviteFriendDialog = $('#tutorial-invite-friend')
var getSocialDialog = $('#tutorial-get-social')
var removeFavDialog = $('#tutorial-remove-fav')

var cookie = new Cookie()

var stepList = [shopTogetherDialog, saveFavDialog, inviteFriendDialog, getSocialDialog, removeFavDialog]

const STEPS = {
    INIT: 0,
    SUMMARY: 0,
    SAVE_GOODS: 1,
    INVITE: 2,
    COMMENT: 3,
    REMOVE: 4,
    END: (pageData.have_policy ? 4 : 3),
}

var currentStep = STEPS.INIT

function hideMask() {
    $('#dialogOverlay').hide()
    
    $('body').css('overflow', 'visible')
}

function showMask() {
    if ($('#dialogOverlay').size() > 0) {
        var layer = $('#dialogOverlay')
    } else {
        var layer = $('<div id="dialogOverlay"><div style="background:rgb(0,0,0);"></div></div>').prependTo('body')
    };

    layer.show().children('div').stop().fadeTo(0, 0.1).fadeTo("fast", 0.5)

    $('body').css('overflow', 'hidden')
}

function showStep(step) {
    if (step < STEPS.INIT || step > STEPS.END) {
        tutorialList.hide()
        hideMask()
        window.scrollTo(0, 0)
        return false
    }

    $.each(stepList, function(index, value) {
        if (index == step) {
            value.show()
        } else {
            value.hide()
        }
   })

   return true
}

function moveToInvite() {
    var inviteFriend = $('.invite-friend')[0]
    var offset = $(inviteFriend).offset()

    var top = offset.top + $(inviteFriend).height() + 10
    var left = offset.left + ($(inviteFriend).width() - 340) / 2

    tutorialList.css('top', top)
    tutorialList.css('left', left)
    tutorialList.css('bottom', 'unset')
    tutorialList.css('right', 'unset')

    window.scrollTo(0, top - window.innerHeight / 2)
}

function moveToComment() {
    var firstGoods = getFirstGoods()
    var firstComments = $(firstGoods).find('.showroom-good-comments')[0]

    var offset = $(firstComments).offset()
    width = $(firstComments).width()
    
    var top = offset.top - 70
    var left = offset.left + width + 15
    
    tutorialList.css('top', top)
    tutorialList.css('left', left)
    tutorialList.css('bottom', 'unset')
    tutorialList.css('right', 'unset')

    window.scrollTo(0, top - window.innerHeight / 2)
}

function moveToRemove() {
    var firstGoods = getFirstGoods()
    var firstRemove = $(firstGoods).find('.remove-showroom-good')[0]

    var offset = $(firstRemove).offset()
    var width = $(firstRemove).width()
    
    var top = offset.top - 80
    var left = offset.left + width + 15

    tutorialList.css('top', top)
    tutorialList.css('left', left)
    tutorialList.css('bottom', 'unset')
    tutorialList.css('right', 'unset')

    window.scrollTo(0, top - window.innerHeight / 2)
}

function moveDialogCenter() {
    tutorialList.addClass('showroom-tutorial-dialog-center')
    tutorialList.css('top', 0)
    tutorialList.css('left', 0)
    tutorialList.css('bottom', 0)
    tutorialList.css('right', 0)
}

function handleMove() {
    if (!showStep(currentStep)) {
        return
    }

    switch (currentStep) {
        case STEPS.SUMMARY:
            showMask()
            moveDialogCenter()
        break;
        case STEPS.SAVE_GOODS:
            showMask()
            setSaveContent()
            moveDialogCenter()
        break;
        case STEPS.INVITE:
            hideMask()
            addDefaultGoods()
            moveToInvite()
            tutorialList.removeClass('showroom-tutorial-dialog-center')
        break;
        case STEPS.COMMENT:
            // addDefaultGoods()
            moveToComment()
            if (!pageData.have_policy) {
                var startText = pageData.langs['page_showroom_guide_start'] ? pageData.langs['page_showroom_guide_start'] : 'Get Started!'
                getSocialDialog.find('.step-next').text(startText)
            }
        break;
        case STEPS.REMOVE:
            // addDefaultGoods()
            moveToRemove()
        break;
        default:
    }
}

function getFirstGoods() {
    return $('.showroom-good-information:not(.deleted,.out-of-stock-info)')[0]
}

function addDefaultGoods() {
    var firstGoods = getFirstGoods()
    if (undefined == firstGoods) {
        $('.showroom-goods-content').show()
        $('.empty-showroom-goods-content').addClass('nodisplay')
        var defaultTutorial = $('.showroom-good-information.tutorial')[0]
        var goods_id = $(defaultTutorial).attr('data-goods-id')
        $(defaultTutorial).removeClass('deleted')
        
        $('.welcome-to-showroom .delete-icon').show()
        $('.welcome-to-showroom .delete-all-goods').show()

        $('.category-dress-list').each(function() {
            if ($(this).find('.showroom-good-information.tutorial').length > 0) {
                var count = parseInt($(this).find('.goods-count').text()) || 0
                $(this).find('.goods-count').text(1 + count)
                $(this).show()
            } else if ($(this).find('.goods-count').text() == "0") {
                $(this).hide()
            }
        })

        if (goods_id > 0) {
            var param = {
                "act": "add_to_showroom",
                "goodsId": goods_id,
            }
    
            $.ajax({
                'type': 'get',
                'url': webData.WEB_ROOT + 'ajax.php',
                'data': param,
                'cache': true,
                'dataType': 'json',
                'success': function (r) {
                    if (r.code == 0) {
                        
                    }
                }
            })
        }
    }
}

function setSaveContent() {
    var firstGoods = getFirstGoods()
    if (undefined != firstGoods) {
        var imgSrc = $(firstGoods).find('.imageSrc').attr('src')
        var text = pageData.langs['page_showroom_guide_add_fav_content']

        if (text) {
            saveFavDialog.find('.tutorial-content').text(text)
        }
    } else {
        var defaultTutorialGoods = $('.showroom-good-information.tutorial')[0]
        var imgSrc = $(defaultTutorialGoods).find('.imageSrc').attr('src')
    }
    if (imgSrc) {
        saveFavDialog.find('#product-img').attr('src', imgSrc)
    }
}

var click_handler = function() {
    tutorialEntry.on("click",function () {
        currentStep = STEPS.INIT
        handleMove()

        tutorialList.css('display', 'flex')
    })

    tutorialList.find('.step-prev').on('click', function () {
        currentStep -= 1
        handleMove()
    })

    tutorialList.find('.step-next').on('click', function () {
        currentStep += 1
        handleMove()
    })

    close.on("click", function () {
        tutorialList.hide()
        hideMask()
    })

    var hasShow = cookie.getCookie("showroom_tutorial_show")

    if (pageData.show_tutorial && !hasShow) {
        cookie.setCookie("showroom_tutorial_show", 1, 30)

        tutorialEntry.click()
        if (history.replaceState) {
            var url = location.href.replace(/[?,&]show_tutorial=[0,1]+/g, "")
            window.history.replaceState(null, null, url)
        }
    }
}

var resize_handler = function() {
    $(window).resize(function () {
        switch (currentStep) {
            case STEPS.SUMMARY:
                moveDialogCenter()
            break;
            case STEPS.SAVE_GOODS:
                moveDialogCenter()
            break;
            case STEPS.INVITE:
                moveToInvite()
            break;
            case STEPS.COMMENT:
                moveToComment()
            break;
            case STEPS.REMOVE:
                moveToRemove()
            break;
            default:
        }
    })
}

exports.init = function () {
    click_handler()
    resize_handler()
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/cookie":3}],17:[function(require,module,exports){
//define(function (require, exports, module) {
   var openInPopup = require('../mod/openInPopup');
   var init = function(FBAppId) {
        if (!FBAppId) {
            return false;
        }

        FB.init({
            appId : FBAppId,
            status : false,
            cookie : true,
            xfbml : true,
            oauth : true,
            version : 'v2.3'
        });
    };

   var shareGoodsPic = function (link, picUrl, name, caption, description, pageType) {
       window.open = openInPopup;
       FB.ui({
           method: 'feed',
           display: 'popup',
           link: link,
           picture: picUrl,
           name: name,
           caption: caption,
           description: description
       }, function(response){
           window.open = window.originOpen;
           var SHARE_SUCC_CONST = 1
           var SHARE_FAIL_CONST = 0
           if (response && !response.error_message) {
               window.dataLayer.push({
                   'snsPageType' : pageType,
                   'event' : 'fbShareSuccess'
               });
               // trackFacebookShare(link, picUrl, caption, SHARE_SUCC_CONST)
           } else {
               //only record when fail
               trackFacebookShare(link, picUrl, caption, SHARE_FAIL_CONST)
           }
       });
   };

   var trackFacebookShare = function (link, picUrl, caption, status) {
       var goodsId = link.replace(/.*-g([0-9]+).*/, "$1")
       if(goodsId == link) return
       $.ajax({
           "type": "POST",
           "url": webData.WEB_ROOT + "ajax.php",
           "data": "act=sns_share_data_record&goods_id=" + goodsId + "&domain=" + caption + "&share_status=" + status + "&sns_type=facebook",
           "cache": false,
           "dataType": "json"
       });
   }

    module.exports = {
        "init": init,
        "shareGoodsPic": shareGoodsPic
    };
//});
},{"../mod/openInPopup":6}],"showroom":[function(require,module,exports){
// require('./common')

require('../showroom/showroom_invite_friend').init();
require('../showroom/showroom').init();
require('../showroom/showroom_goods_list').init();
require('../showroom/showroom_goods_comment').init();
require('../showroom/delete_showroom').init();
require('../showroom/showroom_tutorial').init();
},{"../showroom/delete_showroom":10,"../showroom/showroom":11,"../showroom/showroom_goods_comment":13,"../showroom/showroom_goods_list":14,"../showroom/showroom_invite_friend":15,"../showroom/showroom_tutorial":16}]},{},[])
//# sourceMappingURL=data:application/json;base64,
