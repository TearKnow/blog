require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
	var jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
	
	/*!
	 * jQuery Form Plugin
	 * version: 3.45.0-2013.10.17
	 * Requires jQuery v1.5 or later
	 * Copyright (c) 2013 M. Alsup
	 * Examples and documentation at: http://malsup.com/jquery/form/
	 * Project repository: https://github.com/malsup/form
	 * Dual licensed under the MIT and GPL licenses.
	 * https://github.com/malsup/form#copyright-and-license
	 */
	/*global ActiveXObject */
	;(function($) {
	"use strict";

	/*
		Usage Note:
		-----------
		Do not use both ajaxSubmit and ajaxForm on the same form.  These
		functions are mutually exclusive.  Use ajaxSubmit if you want
		to bind your own submit handler to the form.  For example,

		$(document).ready(function() {
			$('#myForm').on('submit', function(e) {
				e.preventDefault(); // <-- important
				$(this).ajaxSubmit({
					target: '#output'
				});
			});
		});

		Use ajaxForm when you want the plugin to manage all the event binding
		for you.  For example,

		$(document).ready(function() {
			$('#myForm').ajaxForm({
				target: '#output'
			});
		});

		You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
		form does not have to exist when you invoke ajaxForm:

		$('#myForm').ajaxForm({
			delegation: true,
			target: '#output'
		});

		When using ajaxForm, the ajaxSubmit function will be invoked for you
		at the appropriate time.
	*/

	/**
	 * Feature detection
	 */
	var feature = {};
	feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
	feature.formdata = window.FormData !== undefined;

	var hasProp = !!$.fn.prop;

	// attr2 uses prop when it can but checks the return type for
	// an expected string.  this accounts for the case where a form 
	// contains inputs with names like "action" or "method"; in those
	// cases "prop" returns the element
	$.fn.attr2 = function() {
		if ( ! hasProp )
			return this.attr.apply(this, arguments);
		var val = this.prop.apply(this, arguments);
		if ( ( val && val.jquery ) || typeof val === 'string' )
			return val;
		return this.attr.apply(this, arguments);
	};

	/**
	 * ajaxSubmit() provides a mechanism for immediately submitting
	 * an HTML form using AJAX.
	 */
	$.fn.ajaxSubmit = function(options) {
		/*jshint scripturl:true */

		// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
		if (!this.length) {
			log('ajaxSubmit: skipping submit process - no element selected');
			return this;
		}

		var method, action, url, $form = this;

		if (typeof options == 'function') {
			options = { success: options };
		}
		else if ( options === undefined ) {
			options = {};
		}

		method = options.type || this.attr2('method');
		action = options.url  || this.attr2('action');

		url = (typeof action === 'string') ? $.trim(action) : '';
		url = url || window.location.href || '';
		if (url) {
			// clean url (don't include hash vaue)
			url = (url.match(/^([^#]+)/)||[])[1];
		}

		options = $.extend(true, {
			url:  url,
			success: $.ajaxSettings.success,
			type: method || $.ajaxSettings.type,
			iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
		}, options);

		// hook for manipulating the form data before it is extracted;
		// convenient for use with rich editors like tinyMCE or FCKEditor
		var veto = {};
		this.trigger('form-pre-serialize', [this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
			return this;
		}

		// provide opportunity to alter form data before it is serialized
		if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSerialize callback');
			return this;
		}

		var traditional = options.traditional;
		if ( traditional === undefined ) {
			traditional = $.ajaxSettings.traditional;
		}

		var elements = [];
		var qx, a = this.formToArray(options.semantic, elements);
		if (options.data) {
			options.extraData = options.data;
			qx = $.param(options.data, traditional);
		}

		// give pre-submit callback an opportunity to abort the submit
		if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
			log('ajaxSubmit: submit aborted via beforeSubmit callback');
			return this;
		}

		// fire vetoable 'validate' event
		this.trigger('form-submit-validate', [a, this, options, veto]);
		if (veto.veto) {
			log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
			return this;
		}

		var q = $.param(a, traditional);
		if (qx) {
			q = ( q ? (q + '&' + qx) : qx );
		}
		if (options.type.toUpperCase() == 'GET') {
			options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
			options.data = null;  // data is null for 'get'
		}
		else {
			options.data = q; // data is the query string for 'post'
		}

		var callbacks = [];
		if (options.resetForm) {
			callbacks.push(function() { $form.resetForm(); });
		}
		if (options.clearForm) {
			callbacks.push(function() { $form.clearForm(options.includeHidden); });
		}

		// perform a load on the target only if dataType is not provided
		if (!options.dataType && options.target) {
			var oldSuccess = options.success || function(){};
			callbacks.push(function(data) {
				var fn = options.replaceTarget ? 'replaceWith' : 'html';
				$(options.target)[fn](data).each(oldSuccess, arguments);
			});
		}
		else if (options.success) {
			callbacks.push(options.success);
		}

		options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
			var context = options.context || this ;    // jQuery 1.4+ supports scope context
			for (var i=0, max=callbacks.length; i < max; i++) {
				callbacks[i].apply(context, [data, status, xhr || $form, $form]);
			}
		};

		if (options.error) {
			var oldError = options.error;
			options.error = function(xhr, status, error) {
				var context = options.context || this;
				oldError.apply(context, [xhr, status, error, $form]);
			};
		}

		 if (options.complete) {
			var oldComplete = options.complete;
			options.complete = function(xhr, status) {
				var context = options.context || this;
				oldComplete.apply(context, [xhr, status, $form]);
			};
		}

		// are there files to upload?

		// [value] (issue #113), also see comment:
		// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
		var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });

		var hasFileInputs = fileInputs.length > 0;
		var mp = 'multipart/form-data';
		var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);

		var fileAPI = feature.fileapi && feature.formdata;
		log("fileAPI :" + fileAPI);
		var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;

		var jqxhr;

		// options.iframe allows user to force iframe mode
		// 06-NOV-09: now defaulting to iframe mode if file input is detected
		if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
			// hack to fix Safari hang (thanks to Tim Molendijk for this)
			// see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
			if (options.closeKeepAlive) {
				$.get(options.closeKeepAlive, function() {
					jqxhr = fileUploadIframe(a);
				});
			}
			else {
				jqxhr = fileUploadIframe(a);
			}
		}
		else if ((hasFileInputs || multipart) && fileAPI) {
			jqxhr = fileUploadXhr(a);
		}
		else {
			jqxhr = $.ajax(options);
		}

		$form.removeData('jqxhr').data('jqxhr', jqxhr);

		// clear element array
		for (var k=0; k < elements.length; k++)
			elements[k] = null;

		// fire 'notify' event
		this.trigger('form-submit-notify', [this, options]);
		return this;

		// utility fn for deep serialization
		function deepSerialize(extraData){
			var serialized = $.param(extraData, options.traditional).split('&');
			var len = serialized.length;
			var result = [];
			var i, part;
			for (i=0; i < len; i++) {
				// #252; undo param space replacement
				serialized[i] = serialized[i].replace(/\+/g,' ');
				part = serialized[i].split('=');
				// #278; use array instead of object storage, favoring array serializations
				result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
			}
			return result;
		}

		 // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
		function fileUploadXhr(a) {
			var formdata = new FormData();

			for (var i=0; i < a.length; i++) {
				formdata.append(a[i].name, a[i].value);
			}

			if (options.extraData) {
				var serializedData = deepSerialize(options.extraData);
				for (i=0; i < serializedData.length; i++)
					if (serializedData[i])
						formdata.append(serializedData[i][0], serializedData[i][1]);
			}

			options.data = null;

			var s = $.extend(true, {}, $.ajaxSettings, options, {
				contentType: false,
				processData: false,
				cache: false,
				type: method || 'POST'
			});

			if (options.uploadProgress) {
				// workaround because jqXHR does not expose upload property
				s.xhr = function() {
					var xhr = $.ajaxSettings.xhr();
					if (xhr.upload) {
						xhr.upload.addEventListener('progress', function(event) {
							var percent = 0;
							var position = event.loaded || event.position; /*event.position is deprecated*/
							var total = event.total;
							if (event.lengthComputable) {
								percent = Math.ceil(position / total * 100);
							}
							options.uploadProgress(event, position, total, percent);
						}, false);
					}
					return xhr;
				};
			}

			s.data = null;
			var beforeSend = s.beforeSend;
			s.beforeSend = function(xhr, o) {
				//Send FormData() provided by user
				if (options.formData)
					o.data = options.formData;
				else
					o.data = formdata;
				if(beforeSend)
					beforeSend.call(this, xhr, o);
			};
			return $.ajax(s);
		}

		// private function for handling file uploads (hat tip to YAHOO!)
		function fileUploadIframe(a) {
			var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
			var deferred = $.Deferred();

			// #341
			deferred.abort = function(status) {
				xhr.abort(status);
			};

			if (a) {
				// ensure that every serialized input is still enabled
				for (i=0; i < elements.length; i++) {
					el = $(elements[i]);
					if ( hasProp )
						el.prop('disabled', false);
					else
						el.removeAttr('disabled');
				}
			}

			s = $.extend(true, {}, $.ajaxSettings, options);
			s.context = s.context || s;
			id = 'jqFormIO' + (new Date().getTime());
			if (s.iframeTarget) {
				$io = $(s.iframeTarget);
				n = $io.attr2('name');
				if (!n)
					 $io.attr2('name', id);
				else
					id = n;
			}
			else {
				$io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
				$io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
			}
			io = $io[0];


			xhr = { // mock object
				aborted: 0,
				responseText: null,
				responseXML: null,
				status: 0,
				statusText: 'n/a',
				getAllResponseHeaders: function() {},
				getResponseHeader: function() {},
				setRequestHeader: function() {},
				abort: function(status) {
					var e = (status === 'timeout' ? 'timeout' : 'aborted');
					log('aborting upload... ' + e);
					this.aborted = 1;

					try { // #214, #257
						if (io.contentWindow.document.execCommand) {
							io.contentWindow.document.execCommand('Stop');
						}
					}
					catch(ignore) {}

					$io.attr('src', s.iframeSrc); // abort op in progress
					xhr.error = e;
					if (s.error)
						s.error.call(s.context, xhr, e, status);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, e]);
					if (s.complete)
						s.complete.call(s.context, xhr, e);
				}
			};

			g = s.global;
			// trigger ajax global events so that activity/block indicators work like normal
			if (g && 0 === $.active++) {
				$.event.trigger("ajaxStart");
			}
			if (g) {
				$.event.trigger("ajaxSend", [xhr, s]);
			}

			if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
				if (s.global) {
					$.active--;
				}
				deferred.reject();
				return deferred;
			}
			if (xhr.aborted) {
				deferred.reject();
				return deferred;
			}

			// add submitting element to data if we know it
			sub = form.clk;
			if (sub) {
				n = sub.name;
				if (n && !sub.disabled) {
					s.extraData = s.extraData || {};
					s.extraData[n] = sub.value;
					if (sub.type == "image") {
						s.extraData[n+'.x'] = form.clk_x;
						s.extraData[n+'.y'] = form.clk_y;
					}
				}
			}

			var CLIENT_TIMEOUT_ABORT = 1;
			var SERVER_ABORT = 2;
					
			function getDoc(frame) {
				/* it looks like contentWindow or contentDocument do not
				 * carry the protocol property in ie8, when running under ssl
				 * frame.document is the only valid response document, since
				 * the protocol is know but not on the other two objects. strange?
				 * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
				 */
				
				var doc = null;
				
				// IE8 cascading access check
				try {
					if (frame.contentWindow) {
						doc = frame.contentWindow.document;
					}
				} catch(err) {
					// IE8 access denied under ssl & missing protocol
					log('cannot get iframe.contentWindow document: ' + err);
				}

				if (doc) { // successful getting content
					return doc;
				}

				try { // simply checking may throw in ie8 under ssl or mismatched protocol
					doc = frame.contentDocument ? frame.contentDocument : frame.document;
				} catch(err) {
					// last attempt
					log('cannot get iframe.contentDocument: ' + err);
					doc = frame.document;
				}
				return doc;
			}

			// Rails CSRF hack (thanks to Yvan Barthelemy)
			var csrf_token = $('meta[name=csrf-token]').attr('content');
			var csrf_param = $('meta[name=csrf-param]').attr('content');
			if (csrf_param && csrf_token) {
				s.extraData = s.extraData || {};
				s.extraData[csrf_param] = csrf_token;
			}

			// take a breath so that pending repaints get some cpu time before the upload starts
			function doSubmit() {
				// make sure form attrs are set
				var t = $form.attr2('target'), a = $form.attr2('action');

				// update form attrs in IE friendly way
				form.setAttribute('target',id);
				if (!method || /post/i.test(method) ) {
					form.setAttribute('method', 'POST');
				}
				if (a != s.url) {
					form.setAttribute('action', s.url);
				}

				// ie borks in some cases when setting encoding
				if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
					$form.attr({
						encoding: 'multipart/form-data',
						enctype:  'multipart/form-data'
					});
				}

				// support timout
				if (s.timeout) {
					timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
				}

				// look for server aborts
				function checkState() {
					try {
						var state = getDoc(io).readyState;
						log('state = ' + state);
						if (state && state.toLowerCase() == 'uninitialized')
							setTimeout(checkState,50);
					}
					catch(e) {
						log('Server abort: ' , e, ' (', e.name, ')');
						cb(SERVER_ABORT);
						if (timeoutHandle)
							clearTimeout(timeoutHandle);
						timeoutHandle = undefined;
					}
				}

				// add "extra" data to form if provided in options
				var extraInputs = [];
				try {
					if (s.extraData) {
						for (var n in s.extraData) {
							if (s.extraData.hasOwnProperty(n)) {
							   // if using the $.param format that allows for multiple values with the same name
							   if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
								   extraInputs.push(
								   $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
									   .appendTo(form)[0]);
							   } else {
								   extraInputs.push(
								   $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
									   .appendTo(form)[0]);
							   }
							}
						}
					}

					if (!s.iframeTarget) {
						// add iframe to doc and submit the form
						$io.appendTo('body');
					}
					if (io.attachEvent)
						io.attachEvent('onload', cb);
					else
						io.addEventListener('load', cb, false);
					setTimeout(checkState,15);

					try {
						form.submit();
					} catch(err) {
						// just in case form has element with name/id of 'submit'
						var submitFn = document.createElement('form').submit;
						submitFn.apply(form);
					}
				}
				finally {
					// reset attrs and remove "extra" input elements
					form.setAttribute('action',a);
					if(t) {
						form.setAttribute('target', t);
					} else {
						$form.removeAttr('target');
					}
					$(extraInputs).remove();
				}
			}

			if (s.forceSync) {
				doSubmit();
			}
			else {
				setTimeout(doSubmit, 10); // this lets dom updates render
			}

			var data, doc, domCheckCount = 50, callbackProcessed;

			function cb(e) {
				if (xhr.aborted || callbackProcessed) {
					return;
				}
				
				doc = getDoc(io);
				if(!doc) {
					log('cannot access response document');
					e = SERVER_ABORT;
				}
				if (e === CLIENT_TIMEOUT_ABORT && xhr) {
					xhr.abort('timeout');
					deferred.reject(xhr, 'timeout');
					return;
				}
				else if (e == SERVER_ABORT && xhr) {
					xhr.abort('server abort');
					deferred.reject(xhr, 'error', 'server abort');
					return;
				}

				if (!doc || doc.location.href == s.iframeSrc) {
					// response not received yet
					if (!timedOut)
						return;
				}
				if (io.detachEvent)
					io.detachEvent('onload', cb);
				else
					io.removeEventListener('load', cb, false);

				var status = 'success', errMsg;
				try {
					if (timedOut) {
						throw 'timeout';
					}

					var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
					log('isXml='+isXml);
					if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
						if (--domCheckCount) {
							// in some browsers (Opera) the iframe DOM is not always traversable when
							// the onload callback fires, so we loop a bit to accommodate
							log('requeing onLoad callback, DOM not available');
							setTimeout(cb, 250);
							return;
						}
						// let this fall through because server response could be an empty document
						//log('Could not access iframe DOM after mutiple tries.');
						//throw 'DOMException: not available';
					}

					//log('response detected');
					var docRoot = doc.body ? doc.body : doc.documentElement;
					xhr.responseText = docRoot ? docRoot.innerHTML : null;
					xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
					if (isXml)
						s.dataType = 'xml';
					xhr.getResponseHeader = function(header){
						var headers = {'content-type': s.dataType};
						return headers[header.toLowerCase()];
					};
					// support for XHR 'status' & 'statusText' emulation :
					if (docRoot) {
						xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
						xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
					}

					var dt = (s.dataType || '').toLowerCase();
					var scr = /(json|script|text)/.test(dt);
					if (scr || s.textarea) {
						// see if user embedded response in textarea
						var ta = doc.getElementsByTagName('textarea')[0];
						if (ta) {
							xhr.responseText = ta.value;
							// support for XHR 'status' & 'statusText' emulation :
							xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
							xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
						}
						else if (scr) {
							// account for browsers injecting pre around json response
							var pre = doc.getElementsByTagName('pre')[0];
							var b = doc.getElementsByTagName('body')[0];
							if (pre) {
								xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
							}
							else if (b) {
								xhr.responseText = b.textContent ? b.textContent : b.innerText;
							}
						}
					}
					else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
						xhr.responseXML = toXml(xhr.responseText);
					}

					try {
						data = httpData(xhr, dt, s);
					}
					catch (err) {
						status = 'parsererror';
						xhr.error = errMsg = (err || status);
					}
				}
				catch (err) {
					log('error caught: ',err);
					status = 'error';
					xhr.error = errMsg = (err || status);
				}

				if (xhr.aborted) {
					log('upload aborted');
					status = null;
				}

				if (xhr.status) { // we've set xhr.status
					status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
				}

				// ordering of these callbacks/triggers is odd, but that's how $.ajax does it
				if (status === 'success') {
					if (s.success)
						s.success.call(s.context, data, 'success', xhr);
					deferred.resolve(xhr.responseText, 'success', xhr);
					if (g)
						$.event.trigger("ajaxSuccess", [xhr, s]);
				}
				else if (status) {
					if (errMsg === undefined)
						errMsg = xhr.statusText;
					if (s.error)
						s.error.call(s.context, xhr, status, errMsg);
					deferred.reject(xhr, 'error', errMsg);
					if (g)
						$.event.trigger("ajaxError", [xhr, s, errMsg]);
				}

				if (g)
					$.event.trigger("ajaxComplete", [xhr, s]);

				if (g && ! --$.active) {
					$.event.trigger("ajaxStop");
				}

				if (s.complete)
					s.complete.call(s.context, xhr, status);

				callbackProcessed = true;
				if (s.timeout)
					clearTimeout(timeoutHandle);

				// clean up
				setTimeout(function() {
					if (!s.iframeTarget)
						$io.remove();
					else  //adding else to clean up existing iframe response.
						$io.attr('src', s.iframeSrc);
					xhr.responseXML = null;
				}, 100);
			}

			var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
				if (window.ActiveXObject) {
					doc = new ActiveXObject('Microsoft.XMLDOM');
					doc.async = 'false';
					doc.loadXML(s);
				}
				else {
					doc = (new DOMParser()).parseFromString(s, 'text/xml');
				}
				return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
			};
			var parseJSON = $.parseJSON || function(s) {
				/*jslint evil:true */
				return window['eval']('(' + s + ')');
			};

			var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4

				var ct = xhr.getResponseHeader('content-type') || '',
					xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
					data = xml ? xhr.responseXML : xhr.responseText;

				if (xml && data.documentElement.nodeName === 'parsererror') {
					if ($.error)
						$.error('parsererror');
				}
				if (s && s.dataFilter) {
					data = s.dataFilter(data, type);
				}
				if (typeof data === 'string') {
					if (type === 'json' || !type && ct.indexOf('json') >= 0) {
						data = parseJSON(data);
					} else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
						$.globalEval(data);
					}
				}
				return data;
			};

			return deferred;
		}
	};

	/**
	 * ajaxForm() provides a mechanism for fully automating form submission.
	 *
	 * The advantages of using this method instead of ajaxSubmit() are:
	 *
	 * 1: This method will include coordinates for <input type="image" /> elements (if the element
	 *    is used to submit the form).
	 * 2. This method will include the submit element's name/value data (for the element that was
	 *    used to submit the form).
	 * 3. This method binds the submit() method to the form for you.
	 *
	 * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
	 * passes the options argument along after properly binding events for submit elements and
	 * the form itself.
	 */
	$.fn.ajaxForm = function(options) {
		options = options || {};
		options.delegation = options.delegation && $.isFunction($.fn.on);

		// in jQuery 1.3+ we can fix mistakes with the ready state
		if (!options.delegation && this.length === 0) {
			var o = { s: this.selector, c: this.context };
			if (!$.isReady && o.s) {
				log('DOM not ready, queuing ajaxForm');
				$(function() {
					$(o.s,o.c).ajaxForm(options);
				});
				return this;
			}
			// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
			log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
			return this;
		}

		if ( options.delegation ) {
			$(document)
				.off('submit.form-plugin', this.selector, doAjaxSubmit)
				.off('click.form-plugin', this.selector, captureSubmittingElement)
				.on('submit.form-plugin', this.selector, options, doAjaxSubmit)
				.on('click.form-plugin', this.selector, options, captureSubmittingElement);
			return this;
		}

		return this.ajaxFormUnbind()
			.bind('submit.form-plugin', options, doAjaxSubmit)
			.bind('click.form-plugin', options, captureSubmittingElement);
	};

	// private event handlers
	function doAjaxSubmit(e) {
		/*jshint validthis:true */
		var options = e.data;
		if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
			e.preventDefault();
			$(e.target).ajaxSubmit(options); // #365
		}
	}

	function captureSubmittingElement(e) {
		/*jshint validthis:true */
		var target = e.target;
		var $el = $(target);
		if (!($el.is("[type=submit],[type=image]"))) {
			// is this a child element of the submit el?  (ex: a span within a button)
			var t = $el.closest('[type=submit]');
			if (t.length === 0) {
				return;
			}
			target = t[0];
		}
		var form = this;
		form.clk = target;
		if (target.type == 'image') {
			if (e.offsetX !== undefined) {
				form.clk_x = e.offsetX;
				form.clk_y = e.offsetY;
			} else if (typeof $.fn.offset == 'function') {
				var offset = $el.offset();
				form.clk_x = e.pageX - offset.left;
				form.clk_y = e.pageY - offset.top;
			} else {
				form.clk_x = e.pageX - target.offsetLeft;
				form.clk_y = e.pageY - target.offsetTop;
			}
		}
		// clear form vars
		setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
	}


	// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
	$.fn.ajaxFormUnbind = function() {
		return this.unbind('submit.form-plugin click.form-plugin');
	};

	/**
	 * formToArray() gathers form element data into an array of objects that can
	 * be passed to any of the following ajax functions: $.get, $.post, or load.
	 * Each object in the array has both a 'name' and 'value' property.  An example of
	 * an array for a simple login form might be:
	 *
	 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
	 *
	 * It is this array that is passed to pre-submit callback functions provided to the
	 * ajaxSubmit() and ajaxForm() methods.
	 */
	$.fn.formToArray = function(semantic, elements) {
		var a = [];
		if (this.length === 0) {
			return a;
		}

		var form = this[0];
		var els = semantic ? form.getElementsByTagName('*') : form.elements;
		if (!els) {
			return a;
		}

		var i,j,n,v,el,max,jmax;
		for(i=0, max=els.length; i < max; i++) {
			el = els[i];
			n = el.name;
			if (!n || el.disabled) {
				continue;
			}

			if (semantic && form.clk && el.type == "image") {
				// handle image inputs on the fly when semantic == true
				if(form.clk == el) {
					a.push({name: n, value: $(el).val(), type: el.type });
					a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
				}
				continue;
			}

			v = $.fieldValue(el, true);
			if (v && v.constructor == Array) {
				if (elements)
					elements.push(el);
				for(j=0, jmax=v.length; j < jmax; j++) {
					a.push({name: n, value: v[j]});
				}
			}
			else if (feature.fileapi && el.type == 'file') {
				if (elements)
					elements.push(el);
				var files = el.files;
				if (files.length) {
					for (j=0; j < files.length; j++) {
						a.push({name: n, value: files[j], type: el.type});
					}
				}
				else {
					// #180
					a.push({ name: n, value: '', type: el.type });
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				if (elements)
					elements.push(el);
				a.push({name: n, value: v, type: el.type, required: el.required});
			}
		}

		if (!semantic && form.clk) {
			// input type=='image' are not found in elements array! handle it here
			var $input = $(form.clk), input = $input[0];
			n = input.name;
			if (n && !input.disabled && input.type == 'image') {
				a.push({name: n, value: $input.val()});
				a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
			}
		}
		return a;
	};

	/**
	 * Serializes form data into a 'submittable' string. This method will return a string
	 * in the format: name1=value1&amp;name2=value2
	 */
	$.fn.formSerialize = function(semantic) {
		//hand off to jQuery.param for proper encoding
		return $.param(this.formToArray(semantic));
	};

	/**
	 * Serializes all field elements in the jQuery object into a query string.
	 * This method will return a string in the format: name1=value1&amp;name2=value2
	 */
	$.fn.fieldSerialize = function(successful) {
		var a = [];
		this.each(function() {
			var n = this.name;
			if (!n) {
				return;
			}
			var v = $.fieldValue(this, successful);
			if (v && v.constructor == Array) {
				for (var i=0,max=v.length; i < max; i++) {
					a.push({name: n, value: v[i]});
				}
			}
			else if (v !== null && typeof v != 'undefined') {
				a.push({name: this.name, value: v});
			}
		});
		//hand off to jQuery.param for proper encoding
		return $.param(a);
	};

	/**
	 * Returns the value(s) of the element in the matched set.  For example, consider the following form:
	 *
	 *  <form><fieldset>
	 *      <input name="A" type="text" />
	 *      <input name="A" type="text" />
	 *      <input name="B" type="checkbox" value="B1" />
	 *      <input name="B" type="checkbox" value="B2"/>
	 *      <input name="C" type="radio" value="C1" />
	 *      <input name="C" type="radio" value="C2" />
	 *  </fieldset></form>
	 *
	 *  var v = $('input[type=text]').fieldValue();
	 *  // if no values are entered into the text inputs
	 *  v == ['','']
	 *  // if values entered into the text inputs are 'foo' and 'bar'
	 *  v == ['foo','bar']
	 *
	 *  var v = $('input[type=checkbox]').fieldValue();
	 *  // if neither checkbox is checked
	 *  v === undefined
	 *  // if both checkboxes are checked
	 *  v == ['B1', 'B2']
	 *
	 *  var v = $('input[type=radio]').fieldValue();
	 *  // if neither radio is checked
	 *  v === undefined
	 *  // if first radio is checked
	 *  v == ['C1']
	 *
	 * The successful argument controls whether or not the field element must be 'successful'
	 * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
	 * The default value of the successful argument is true.  If this value is false the value(s)
	 * for each element is returned.
	 *
	 * Note: This method *always* returns an array.  If no valid value can be determined the
	 *    array will be empty, otherwise it will contain one or more values.
	 */
	$.fn.fieldValue = function(successful) {
		for (var val=[], i=0, max=this.length; i < max; i++) {
			var el = this[i];
			var v = $.fieldValue(el, successful);
			if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
				continue;
			}
			if (v.constructor == Array)
				$.merge(val, v);
			else
				val.push(v);
		}
		return val;
	};

	/**
	 * Returns the value of the field element.
	 */
	$.fieldValue = function(el, successful) {
		var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
		if (successful === undefined) {
			successful = true;
		}

		if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
			(t == 'checkbox' || t == 'radio') && !el.checked ||
			(t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
			tag == 'select' && el.selectedIndex == -1)) {
				return null;
		}

		if (tag == 'select') {
			var index = el.selectedIndex;
			if (index < 0) {
				return null;
			}
			var a = [], ops = el.options;
			var one = (t == 'select-one');
			var max = (one ? index+1 : ops.length);
			for(var i=(one ? index : 0); i < max; i++) {
				var op = ops[i];
				if (op.selected) {
					var v = op.value;
					if (!v) { // extra pain for IE...
						v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
					}
					if (one) {
						return v;
					}
					a.push(v);
				}
			}
			return a;
		}
		return $(el).val();
	};

	/**
	 * Clears the form data.  Takes the following actions on the form's input fields:
	 *  - input text fields will have their 'value' property set to the empty string
	 *  - select elements will have their 'selectedIndex' property set to -1
	 *  - checkbox and radio inputs will have their 'checked' property set to false
	 *  - inputs of type submit, button, reset, and hidden will *not* be effected
	 *  - button elements will *not* be effected
	 */
	$.fn.clearForm = function(includeHidden) {
		return this.each(function() {
			$('input,select,textarea', this).clearFields(includeHidden);
		});
	};

	/**
	 * Clears the selected form elements.
	 */
	$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
		var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
		return this.each(function() {
			var t = this.type, tag = this.tagName.toLowerCase();
			if (re.test(t) || tag == 'textarea') {
				this.value = '';
			}
			else if (t == 'checkbox' || t == 'radio') {
				this.checked = false;
			}
			else if (tag == 'select') {
				this.selectedIndex = -1;
			}
			else if (t == "file") {
				if (/MSIE/.test(navigator.userAgent)) {
					$(this).replaceWith($(this).clone(true));
				} else {
					$(this).val('');
				}
			}
			else if (includeHidden) {
				// includeHidden can be the value true, or it can be a selector string
				// indicating a special test; for example:
				//  $('#myForm').clearForm('.special:hidden')
				// the above would clean hidden inputs that have the class of 'special'
				if ( (includeHidden === true && /hidden/.test(t)) ||
					 (typeof includeHidden == 'string' && $(this).is(includeHidden)) )
					this.value = '';
			}
		});
	};

	/**
	 * Resets the form data.  Causes all form elements to be reset to their original value.
	 */
	$.fn.resetForm = function() {
		return this.each(function() {
			// guard against an input with the name of 'reset'
			// note that IE reports the reset function as an 'object'
			if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
				this.reset();
			}
		});
	};

	/**
	 * Enables or disables any matching elements.
	 */
	$.fn.enable = function(b) {
		if (b === undefined) {
			b = true;
		}
		return this.each(function() {
			this.disabled = !b;
		});
	};

	/**
	 * Checks/unchecks any matching checkboxes or radio buttons and
	 * selects/deselects and matching option elements.
	 */
	$.fn.selected = function(select) {
		if (select === undefined) {
			select = true;
		}
		return this.each(function() {
			var t = this.type;
			if (t == 'checkbox' || t == 'radio') {
				this.checked = select;
			}
			else if (this.tagName.toLowerCase() == 'option') {
				var $sel = $(this).parent('select');
				if (select && $sel[0] && $sel[0].type == 'select-one') {
					// deselect all other options
					$sel.find('option').selected(false);
				}
				this.selected = select;
			}
		});
	};

	// expose debug var
	$.fn.ajaxSubmit.debug = false;

	// helper fn for console logging
	function log() {
		if (!$.fn.ajaxSubmit.debug)
			return;
		var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
		if (window.console && window.console.log) {
			window.console.log(msg);
		}
		else if (window.opera && window.opera.postError) {
			window.opera.postError(msg);
		}
	}

	})( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],2:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {
    var $ = jQuery = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

	var UserAgent = require('../mod/userAgent');
	var userAgent = new UserAgent();
	function auto_iframe_css(recId){
		var input = $("#sbmt_comment_" + recId);
		var iframe = $("#tickets_img_" + recId);
		var div = $("#rule_" + recId);
	    var width = input.width();
	    // $("#tickets_img_"+goodsId).load(function(){
	    // 	var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
	    // 	div.css('padding-left',422-iframeInput-width+'px');
	    // 	$("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
	    // 	$("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
	    // });
	    // var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
    	// div.css('padding-left',422-iframeInput-width+'px');
    	// $("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
    	// $("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
    	iframe.width(470-width);
    }

	/*
	 ### jQuery Star Rating Plugin v3.13 - 2009-03-26 ###
	 * Home: http://www.fyneworks.com/jquery/star-rating/
	 * Code: http://code.google.com/p/jquery-star-rating-plugin/
	 *
		* Dual licensed under the MIT and GPL licenses:
	 *   http://www.opensource.org/licenses/mit-license.php
	 *   http://www.gnu.org/licenses/gpl.html
	 ###
	*/

	/*# AVOID COLLISIONS #*/
	;if(window.jQuery) (function($){
	/*# AVOID COLLISIONS #*/

		// IE6 Background Image Fix
		if (userAgent.isIE()) try { document.execCommand("BackgroundImageCache", false, true)} catch(e) { };
		// Thanks to http://www.visualjquery.com/rating/rating_redux.html

		// plugin initialization
		$.fn.rating = function(options){
			if(this.length==0) return this; // quick fail

			// Handle API methods
			if(typeof arguments[0]=='string'){
				// Perform API methods on individual elements
				if(this.length>1){
					var args = arguments;
					return this.each(function(){
						$.fn.rating.apply($(this), args);
		});
				};
				// Invoke API method handler
				$.fn.rating[arguments[0]].apply(this, $.makeArray(arguments).slice(1) || []);
				// Quick exit...
				return this;
			};

			// Initialize options for this call
			var options = $.extend(
				{}/* new object */,
				$.fn.rating.options/* default options */,
				options || {} /* just-in-time options */
			);

			// Allow multiple controls with the same name by making each call unique
			$.fn.rating.calls++;

			// loop through each matched element
			this
			 .not('.star-rating-applied')
				.addClass('star-rating-applied')
			.each(function(){

				// Load control parameters / find context / etc
				var control, input = $(this);
				var eid = (this.name || 'unnamed-rating').replace(/\[|\]/g, '_').replace(/^\_+|\_+$/g,'');
				var context = $(this.form || document.body);

				// FIX: http://code.google.com/p/jquery-star-rating-plugin/issues/detail?id=23
				var raters = context.data('rating');
				if(!raters || raters.call!=$.fn.rating.calls) raters = { count:0, call:$.fn.rating.calls };
				var rater = raters[eid];

				// if rater is available, verify that the control still exists
				if(rater) control = rater.data('rating');

				if(rater && control)//{// save a byte!
					// add star to control if rater is available and the same control still exists
					control.count++;

				//}// save a byte!
				else{
					// create new control if first star or control element was removed/replaced

					// Initialize options for this raters
					control = $.extend(
						{}/* new object */,
						options || {} /* current call options */,
						($.metadata? input.metadata(): ($.meta?input.data():null)) || {}, /* metadata options */
						{ count:0, stars: [], inputs: [] }
					);

					// increment number of rating controls
					control.serial = raters.count++;

					// create rating element
					rater = $('<span class="star-rating-control"/>');
					input.before(rater);

					// Mark element for initialization (once all stars are ready)
					rater.addClass('rating-to-be-drawn');

					// Accept readOnly setting from 'disabled' property
					if(input.attr('disabled')) control.readOnly = true;

					// Create 'cancel' button
					rater.append(
						control.cancel = $('<div class="rating-cancel" style="height: 0px;"><a title="' + control.cancel + '">' + control.cancelValue + '</a></div>')
						.mouseover(function(){
							$(this).rating('drain');
							$(this).addClass('star-rating-hover-v2');
							//$(this).rating('focus');
						})
						.mouseout(function(){
							$(this).rating('draw');
							$(this).removeClass('star-rating-hover-v2');
							//$(this).rating('blur');
						})
						.click(function(){
						 $(this).rating('select');
						})
						.data('rating', control)
					);

				}; // first element of group

				// insert rating star
				var star = $('<div class="star-rating-v2 rater-'+ control.serial +'"><a title="' + (this.title || this.value) + '">' + this.value + '</a></div>');
				rater.append(star);

				// inherit attributes from input element
				if(this.id) star.attr('id', this.id);
				if(this.className) star.addClass(this.className);

				// Half-stars?
				if(control.half) control.split = 2;

				// Prepare division control
				if(typeof control.split=='number' && control.split>0){
					var stw = ($.fn.width ? star.width() : 0) || control.starWidth;
					var spi = (control.count % control.split), spw = Math.floor(stw/control.split);
					star
					// restrict star's width and hide overflow (already in CSS)
					.width(spw)
					// move the star left by using a negative margin
					// this is work-around to IE's stupid box model (position:relative doesn't work)
					.find('a').css({ 'margin-left':'-'+ (spi*spw) +'px' })
				};

				// readOnly?
				if(control.readOnly)//{ //save a byte!
					// Mark star as readOnly so user can customize display
					star.addClass('star-rating-readonly');
				//}  //save a byte!
				else//{ //save a byte!
				 // Enable hover css effects
					star.addClass('star-rating-live')
					 // Attach mouse events
						.mouseover(function(){
							$(this).rating('fill');
							$(this).rating('focus');
						})
						.mouseout(function(){
							$(this).rating('draw');
							$(this).rating('blur');
						})
						.click(function(){
							$(this).rating('select');
						})
					;
				//}; //save a byte!

				// set current selection
				if(this.checked)	control.current = star;

				// hide input element
				input.hide();

				// backward compatibility, form element to plugin
				input.change(function(){
		$(this).rating('select');
	   });

				// attach reference to star to input element and vice-versa
				star.data('rating.input', input.data('rating.star', star));

				// store control information in form (or body when form not available)
				control.stars[control.stars.length] = star[0];
				control.inputs[control.inputs.length] = input[0];
				control.rater = raters[eid] = rater;
				control.context = context;

				input.data('rating', control);
				rater.data('rating', control);
				star.data('rating', control);
				context.data('rating', raters);
	  }); // each element

			// Initialize ratings (first draw)
			$('.rating-to-be-drawn').rating('draw').removeClass('rating-to-be-drawn');

			return this; // don't break the chain...
		};

		/*--------------------------------------------------------*/

		/*
			### Core functionality and API ###
		*/
		$.extend($.fn.rating, {
			// Used to append a unique serial number to internal control ID
			// each time the plugin is invoked so same name controls can co-exist
			calls: 0,

			focus: function(){
				var control = this.data('rating'); if(!control) return this;
				if(!control.focus) return this; // quick fail if not required
				// find data for event
				var input = $(this).data('rating.input') || $( this.tagName=='INPUT' ? this : null );
	   // focus handler, as requested by focusdigital.co.uk
				if(control.focus) control.focus.apply(input[0], [input.val(), $('a', input.data('rating.star'))[0]]);
			}, // $.fn.rating.focus

			blur: function(){
				var control = this.data('rating'); if(!control) return this;
				if(!control.blur) return this; // quick fail if not required
				// find data for event
				var input = $(this).data('rating.input') || $( this.tagName=='INPUT' ? this : null );
	   // blur handler, as requested by focusdigital.co.uk
				if(control.blur) control.blur.apply(input[0], [input.val(), $('a', input.data('rating.star'))[0]]);
			}, // $.fn.rating.blur

			fill: function(){ // fill to the current mouse position.
				var control = this.data('rating'); if(!control) return this;
				// do not execute when control is in read-only mode
				if(control.readOnly) return;
				// Reset all stars and highlight them up to this element
				this.rating('drain');
				this.prevAll().andSelf().filter('.rater-'+ control.serial).addClass('star-rating-hover-v2');
                var recId = $(this).closest("form").attr("data-rec-id");
				$('#starnum_' + recId).html($('.starx[value="' + this[0].getElementsByTagName("a")[0].innerHTML + '"]').attr('title'));
				$('#star_content_tip_' + recId).html("");
			},// $.fn.rating.fill

			drain: function() { // drain all the stars.
				var control = this.data('rating'); if(!control) return this;
				// do not execute when control is in read-only mode
				if(control.readOnly) return;
				// Reset all stars
				control.rater.children().filter('.rater-'+ control.serial).removeClass('star-rating-on-v2').removeClass('star-rating-hover-v2');
                var recId = $(this).closest("form").attr("data-rec-id");
				$('#starnum_' + recId).html($('#startitle_' + recId).val());
			},// $.fn.rating.drain

			clearSelection: function() { // drain all the stars.
				var control = this.data('rating'); if(!control) return this;
				// do not execute when control is in read-only mode
				if(control.readOnly) return;
				control.current = null;
			},

			draw: function(){ // set value and stars to reflect current selection
				var control = this.data('rating'); if(!control) return this;
				// Clear all stars
				this.rating('drain');
				// Set control value
				if(control.current){
					control.current.data('rating.input').attr('checked','checked');
					control.current.prevAll().andSelf().filter('.rater-'+ control.serial).addClass('star-rating-on-v2');
				}
				else
				 $(control.inputs).removeAttr('checked');
				// Show/hide 'cancel' button
				control.cancel[control.readOnly || control.required?'hide':'show']();
				// Add/remove read-only classes to remove hand pointer
				this.siblings()[control.readOnly?'addClass':'removeClass']('star-rating-readonly');
			},// $.fn.rating.draw





			select: function(value,wantCallBack){ // select a value

						// ***** MODIFICATION *****
						// Thanks to faivre.thomas - http://code.google.com/p/jquery-star-rating-plugin/issues/detail?id=27
						//
						// ***** LIST OF MODIFICATION *****
						// ***** added Parameter wantCallBack : false if you don't want a callback. true or undefined if you want postback to be performed at the end of this method'
						// ***** recursive calls to this method were like : ... .rating('select') it's now like .rating('select',undefined,wantCallBack); (parameters are set.)
						// ***** line which is calling callback
						// ***** /LIST OF MODIFICATION *****

				var control = this.data('rating'); if(!control) return this;
				// do not execute when control is in read-only mode
				if(control.readOnly) return;
				// clear selection
				control.current = null;
				// programmatically (based on user input)
				if(typeof value!='undefined'){
				 // select by index (0 based)
					if(typeof value=='number')
				 return $(control.stars[value]).rating('select',undefined,wantCallBack);
					// select by literal value (must be passed as a string
					if(typeof value=='string')
						//return
						$.each(control.stars, function(){
							if($(this).data('rating.input').val()==value) $(this).rating('select',undefined,wantCallBack);
						});
				}
				else
					control.current = this[0].tagName=='INPUT' ?
					 this.data('rating.star') :
						(this.is('.rater-'+ control.serial) ? this : null);

				// Update rating control state
				this.data('rating', control);
				// Update display
				this.rating('draw');
				// find data for event
				var input = $( control.current ? control.current.data('rating.input') : null );
				// click callback, as requested here: http://plugins.jquery.com/node/1655

						// **** MODIFICATION *****
						// Thanks to faivre.thomas - http://code.google.com/p/jquery-star-rating-plugin/issues/detail?id=27
						//
						//old line doing the callback :
						//if(control.callback) control.callback.apply(input[0], [input.val(), $('a', control.current)[0]]);// callback event
						//
						//new line doing the callback (if i want :)
						if((wantCallBack ||wantCallBack == undefined) && control.callback) control.callback.apply(input[0], [input.val(), $('a', control.current)[0]]);// callback event
						//to ensure retro-compatibility, wantCallBack must be considered as true by default
						// **** /MODIFICATION *****
                		var recId = $(this).closest("form").attr("data-rec-id");
						auto_iframe_css(recId);
	  },// $.fn.rating.select





			readOnly: function(toggle, disable){ // make the control read-only (still submits value)
				var control = this.data('rating'); if(!control) return this;
				// setread-only status
				control.readOnly = toggle || toggle==undefined ? true : false;
				// enable/disable control value submission
				if(disable) $(control.inputs).attr("disabled", "disabled");
				else     			$(control.inputs).removeAttr("disabled");
				// Update rating control state
				this.data('rating', control);
				// Update display
				this.rating('draw');
			},// $.fn.rating.readOnly

			disable: function(){ // make read-only and never submit value
				this.rating('readOnly', true, true);
			},// $.fn.rating.disable

			enable: function(){ // make read/write and submit value
				this.rating('readOnly', false, false);
			}// $.fn.rating.select

	 });

		/*--------------------------------------------------------*/

		/*
			### Default Settings ###
			eg.: You can override default control like this:
			$.fn.rating.options.cancel = 'Clear';
		*/
		$.fn.rating.options = { //$.extend($.fn.rating, { options: {
				cancel: 'Cancel Rating',   // advisory title for the 'cancel' link
				cancelValue: '',           // value to submit when user click the 'cancel' link
				split: 0,                  // split the star into how many parts?

				// Width of star image in case the plugin can't work it out. This can happen if
				// the jQuery.dimensions plugin is not available OR the image is hidden at installation
				starWidth: 16//,

				//NB.: These don't need to be pre-defined (can be undefined/null) so let's save some code!
				//half:     false,         // just a shortcut to control.split = 2
				//required: false,         // disables the 'cancel' button so user can only select one of the specified values
				//readOnly: false,         // disable rating plugin interaction/ values cannot be changed
				//focus:    function(){},  // executed when stars are focused
				//blur:     function(){},  // executed when stars are focused
				//callback: function(){},  // executed when a star is clicked
	 }; //} });

		/*--------------------------------------------------------*/

		/*
			### Default implementation ###
			The plugin will attach itself to file inputs
			with the class 'multi' when the page loads
		*/
		$(function(){
		 $('input[type=radio].star').rating();
		});



	/*# AVOID COLLISIONS #*/
	})(jQuery);
	/*# AVOID COLLISIONS #*/

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../mod/userAgent":6}],3:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {

    exports.upload = function(elem_form, elem_btn) {

        var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

        var obj_form = $(elem_form);
        var obj_btn = $(elem_btn);

        var ffh = require('../mod/formFieldsHandle'); //操作表单元素
        var btn_text = ffh.getBtnText(obj_btn);

        window.doSumbit = function(s,size,filetype) {
            obj_form.find('#file_upload_list_id').val(s);
            obj_form.find('#file_upload_list_size').val(size);
            obj_form.find('#file_upload_list_type').val(filetype);
            obj_form.trigger("submit");
        }

        window.alertMsg = window.alertMsg || function(s) {
            alert(s);
            obj_btn.prop('disabled', false);
            ffh.setBtnText(obj_btn, btn_text);
        }

        obj_btn.prop('disabled', true);
        ffh.setBtnText(obj_btn, _lang.page_order_progress_processing + '...');

        //有sns图片
        if($('#file-social-first').val()){
            //向iframe 页面发送消息
            var data = [];
            data['type'] = 'shareImgValArray';
            data['fromdomain'] = location.origin;
            for(var i = 0; i < document.getElementsByName('pic_url').length; i++){
                var picUrl = document.getElementsByName('pic_url')[i].value;
                if(picUrl != ''){
                    data[i] =  document.getElementsByName('pic_url')[i].value;
                }
            }
            var ticketsImg = document.getElementById('tickets_img');
            var iframeSrc = decodeURIComponent(ticketsImg.src);
            ticketsImg.contentWindow.postMessage(data, iframeSrc);
        }

        if(obj_form.find('.tickets_img').length > 0) {
            var upimgSubmitFrame = $("#upimgSubmitFrame");
            var lang = webData && webData.lang ? webData.lang : 'en';
            var picuploadUrl = pageData && pageData.picUploadUrl ? pageData.picUploadUrl : '';
            var upimgHtmlUrl = picuploadUrl + '?act=submit&fromdomain=' + location.host + '&langcode=' + lang;
            if($('#file-social-first').val()){
                upimgHtmlUrl = picuploadUrl + '?act=submitSharePic&fromdomain=' + location.host + '&langcode=' + lang;
            }

            if(!(upimgSubmitFrame.length > 0)) {
                var upimgSubmitFrameElement = $('<iframe id="upimgSubmitFrame" name="upimgSubmitFrame" style="display:none">');
                upimgSubmitFrameElement.attr('src', upimgHtmlUrl);
                obj_form.append(upimgSubmitFrameElement);
            }
            else {
                upimgSubmitFrame.attr('src', upimgHtmlUrl);
            }
        } else {
            obj_form.submit();
        }
    };

//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2F0dGFjaG1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLy9kZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XHJcblxyXG4gICAgZXhwb3J0cy51cGxvYWQgPSBmdW5jdGlvbihlbGVtX2Zvcm0sIGVsZW1fYnRuKSB7XHJcblxyXG4gICAgICAgIHZhciAkID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJyQnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJyQnXSA6IG51bGwpO1xyXG5cclxuICAgICAgICB2YXIgb2JqX2Zvcm0gPSAkKGVsZW1fZm9ybSk7XHJcbiAgICAgICAgdmFyIG9ial9idG4gPSAkKGVsZW1fYnRuKTtcclxuXHJcbiAgICAgICAgdmFyIGZmaCA9IHJlcXVpcmUoJy4uL21vZC9mb3JtRmllbGRzSGFuZGxlJyk7IC8v5pON5L2c6KGo5Y2V5YWD57SgXHJcbiAgICAgICAgdmFyIGJ0bl90ZXh0ID0gZmZoLmdldEJ0blRleHQob2JqX2J0bik7XHJcblxyXG4gICAgICAgIHdpbmRvdy5kb1N1bWJpdCA9IGZ1bmN0aW9uKHMsc2l6ZSxmaWxldHlwZSkge1xyXG4gICAgICAgICAgICBvYmpfZm9ybS5maW5kKCcjZmlsZV91cGxvYWRfbGlzdF9pZCcpLnZhbChzKTtcclxuICAgICAgICAgICAgb2JqX2Zvcm0uZmluZCgnI2ZpbGVfdXBsb2FkX2xpc3Rfc2l6ZScpLnZhbChzaXplKTtcclxuICAgICAgICAgICAgb2JqX2Zvcm0uZmluZCgnI2ZpbGVfdXBsb2FkX2xpc3RfdHlwZScpLnZhbChmaWxldHlwZSk7XHJcbiAgICAgICAgICAgIG9ial9mb3JtLnRyaWdnZXIoXCJzdWJtaXRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aW5kb3cuYWxlcnRNc2cgPSB3aW5kb3cuYWxlcnRNc2cgfHwgZnVuY3Rpb24ocykge1xyXG4gICAgICAgICAgICBhbGVydChzKTtcclxuICAgICAgICAgICAgb2JqX2J0bi5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgZmZoLnNldEJ0blRleHQob2JqX2J0biwgYnRuX3RleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb2JqX2J0bi5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIGZmaC5zZXRCdG5UZXh0KG9ial9idG4sIF9sYW5nLnBhZ2Vfb3JkZXJfcHJvZ3Jlc3NfcHJvY2Vzc2luZyArICcuLi4nKTtcclxuXHJcbiAgICAgICAgLy/mnIlzbnPlm77niYdcclxuICAgICAgICBpZigkKCcjZmlsZS1zb2NpYWwtZmlyc3QnKS52YWwoKSl7XHJcbiAgICAgICAgICAgIC8v5ZCRaWZyYW1lIOmhtemdouWPkemAgea2iOaBr1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgICAgICAgICBkYXRhWyd0eXBlJ10gPSAnc2hhcmVJbWdWYWxBcnJheSc7XHJcbiAgICAgICAgICAgIGRhdGFbJ2Zyb21kb21haW4nXSA9IGxvY2F0aW9uLm9yaWdpbjtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdwaWNfdXJsJykubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgdmFyIHBpY1VybCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdwaWNfdXJsJylbaV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZihwaWNVcmwgIT0gJycpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbaV0gPSAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3BpY191cmwnKVtpXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGlja2V0c0ltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aWNrZXRzX2ltZycpO1xyXG4gICAgICAgICAgICB2YXIgaWZyYW1lU3JjID0gZGVjb2RlVVJJQ29tcG9uZW50KHRpY2tldHNJbWcuc3JjKTtcclxuICAgICAgICAgICAgdGlja2V0c0ltZy5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKGRhdGEsIGlmcmFtZVNyYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihvYmpfZm9ybS5maW5kKCcudGlja2V0c19pbWcnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciB1cGltZ1N1Ym1pdEZyYW1lID0gJChcIiN1cGltZ1N1Ym1pdEZyYW1lXCIpO1xyXG4gICAgICAgICAgICB2YXIgbGFuZyA9IHdlYkRhdGEgJiYgd2ViRGF0YS5sYW5nID8gd2ViRGF0YS5sYW5nIDogJ2VuJztcclxuICAgICAgICAgICAgdmFyIHBpY3VwbG9hZFVybCA9IHBhZ2VEYXRhICYmIHBhZ2VEYXRhLnBpY1VwbG9hZFVybCA/IHBhZ2VEYXRhLnBpY1VwbG9hZFVybCA6ICcnO1xyXG4gICAgICAgICAgICB2YXIgdXBpbWdIdG1sVXJsID0gcGljdXBsb2FkVXJsICsgJz9hY3Q9c3VibWl0JmZyb21kb21haW49JyArIGxvY2F0aW9uLmhvc3QgKyAnJmxhbmdjb2RlPScgKyBsYW5nO1xyXG4gICAgICAgICAgICBpZigkKCcjZmlsZS1zb2NpYWwtZmlyc3QnKS52YWwoKSl7XHJcbiAgICAgICAgICAgICAgICB1cGltZ0h0bWxVcmwgPSBwaWN1cGxvYWRVcmwgKyAnP2FjdD1zdWJtaXRTaGFyZVBpYyZmcm9tZG9tYWluPScgKyBsb2NhdGlvbi5ob3N0ICsgJyZsYW5nY29kZT0nICsgbGFuZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoISh1cGltZ1N1Ym1pdEZyYW1lLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBpbWdTdWJtaXRGcmFtZUVsZW1lbnQgPSAkKCc8aWZyYW1lIGlkPVwidXBpbWdTdWJtaXRGcmFtZVwiIG5hbWU9XCJ1cGltZ1N1Ym1pdEZyYW1lXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj4nKTtcclxuICAgICAgICAgICAgICAgIHVwaW1nU3VibWl0RnJhbWVFbGVtZW50LmF0dHIoJ3NyYycsIHVwaW1nSHRtbFVybCk7XHJcbiAgICAgICAgICAgICAgICBvYmpfZm9ybS5hcHBlbmQodXBpbWdTdWJtaXRGcmFtZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXBpbWdTdWJtaXRGcmFtZS5hdHRyKCdzcmMnLCB1cGltZ0h0bWxVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqX2Zvcm0uc3VibWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbi8vfSk7XHJcbiJdfQ==
},{"../mod/formFieldsHandle":5}],4:[function(require,module,exports){
(function (global){
//define(function(require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
    
	$.fn.checkCharLength = function (errContent) {
		var obj = $(this);
		obj.change(function (event) {
			var curLength = obj.val().length;
			var maxlength = obj.attr('maxlength');
			if (curLength > maxlength) {
				obj.val($.trim(obj.val()).substr(0, maxlength)).trigger('change');
				return;
			}
			$(errContent).text(maxlength - curLength).parent().toggleClass('red', curLength > maxlength);
		}).keyup(function () {
			obj.trigger('change')
		});
		if ($.trim(obj.val()) != '') {
			obj.trigger('change')
		}
	}
	
//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2NoZWNrQ2hhckxlbmd0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvL2RlZmluZShmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcclxuXHJcbiAgICB2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuICAgIFxyXG5cdCQuZm4uY2hlY2tDaGFyTGVuZ3RoID0gZnVuY3Rpb24gKGVyckNvbnRlbnQpIHtcclxuXHRcdHZhciBvYmogPSAkKHRoaXMpO1xyXG5cdFx0b2JqLmNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdFx0dmFyIGN1ckxlbmd0aCA9IG9iai52YWwoKS5sZW5ndGg7XHJcblx0XHRcdHZhciBtYXhsZW5ndGggPSBvYmouYXR0cignbWF4bGVuZ3RoJyk7XHJcblx0XHRcdGlmIChjdXJMZW5ndGggPiBtYXhsZW5ndGgpIHtcclxuXHRcdFx0XHRvYmoudmFsKCQudHJpbShvYmoudmFsKCkpLnN1YnN0cigwLCBtYXhsZW5ndGgpKS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0JChlcnJDb250ZW50KS50ZXh0KG1heGxlbmd0aCAtIGN1ckxlbmd0aCkucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ3JlZCcsIGN1ckxlbmd0aCA+IG1heGxlbmd0aCk7XHJcblx0XHR9KS5rZXl1cChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdG9iai50cmlnZ2VyKCdjaGFuZ2UnKVxyXG5cdFx0fSk7XHJcblx0XHRpZiAoJC50cmltKG9iai52YWwoKSkgIT0gJycpIHtcclxuXHRcdFx0b2JqLnRyaWdnZXIoJ2NoYW5nZScpXHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG4vL30pO1xyXG4iXX0=
},{}],5:[function(require,module,exports){
(function (global){
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

function formFieldsHandle() {}
module.exports = new formFieldsHandle();

formFieldsHandle.prototype.getBtnText = function (btn) {
    btn = $(btn).get(0);
    if((btn.tagName).toLowerCase() == 'button') {
        return $(btn).text();
    } else {
        return btn.value;
    }
};

formFieldsHandle.prototype.setBtnText = function (btn, text) {
    btn = $(btn).get(0);
    if((btn.tagName).toLowerCase() == 'button') {
        $(btn).text(text);
    } else {
        btn.value = text;
    }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdhZWEvanMvbW9kL2Zvcm1GaWVsZHNIYW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WyckJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWyckJ10gOiBudWxsKTtcclxuXHJcbmZ1bmN0aW9uIGZvcm1GaWVsZHNIYW5kbGUoKSB7fVxyXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBmb3JtRmllbGRzSGFuZGxlKCk7XHJcblxyXG5mb3JtRmllbGRzSGFuZGxlLnByb3RvdHlwZS5nZXRCdG5UZXh0ID0gZnVuY3Rpb24gKGJ0bikge1xyXG4gICAgYnRuID0gJChidG4pLmdldCgwKTtcclxuICAgIGlmKChidG4udGFnTmFtZSkudG9Mb3dlckNhc2UoKSA9PSAnYnV0dG9uJykge1xyXG4gICAgICAgIHJldHVybiAkKGJ0bikudGV4dCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYnRuLnZhbHVlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZm9ybUZpZWxkc0hhbmRsZS5wcm90b3R5cGUuc2V0QnRuVGV4dCA9IGZ1bmN0aW9uIChidG4sIHRleHQpIHtcclxuICAgIGJ0biA9ICQoYnRuKS5nZXQoMCk7XHJcbiAgICBpZigoYnRuLnRhZ05hbWUpLnRvTG93ZXJDYXNlKCkgPT0gJ2J1dHRvbicpIHtcclxuICAgICAgICAkKGJ0bikudGV4dCh0ZXh0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnRuLnZhbHVlID0gdGV4dDtcclxuICAgIH1cclxufTsiXX0=
},{}],6:[function(require,module,exports){
//define(function (require, exports, module) {

    function UserAgent() {}
    module.exports = UserAgent;

    UserAgent.prototype.isIpad = function () {
        if (navigator.userAgent.match(/iPad/i)) {
            return true;
        } else {
            return false;
        }
    }
    
    UserAgent.prototype.isPhone = function () {
        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/) || navigator.userAgent.match(/Windows Phone/i) ||	navigator.userAgent.match(/ZuneWP7/i)) {
            return true;
        } else {
            return false;
        }
    }

    UserAgent.prototype.isIE = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        return isIE;
    }

    UserAgent.prototype.isIEVersion = function (version) {
        var userAgent = navigator.userAgent.toLowerCase();
        var isIE = (/msie/.test(userAgent) && !/opera/.test(userAgent)) ? true : false;
        var uaVersion = (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [])[1];
        if(isIE && parseInt(uaVersion) == parseInt(version)) {
            return true;
        } else {
            return false;
        }
    }
    UserAgent.prototype.detectBrowser=function(){
        var ua= navigator.userAgent, tem, 
        M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if(/trident/i.test(M[1])){
            tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
            return 'IE '+(tem[1] || '');
        }
        if(M[1]=== 'Chrome'){
            tem= ua.match(/\bOPR\/(\d+)/)
            if(tem!= null) return 'Opera '+tem[1];
        }
        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
        if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
        return M.join(' ');
    };

//});
},{}],7:[function(require,module,exports){
(function (global){
//define(function (require, exports, module) {

    var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

    require('../lib/jqueryForm');
    require('../lib/jqueryRatingV2'); //Your Rating
    require('../mod/checkCharLength'); //Remaining characters
    var attachment = require('../mod/attachment'); //上传附件
    var ffh = require('../mod/formFieldsHandle'); //操作表单元素

    //鼠标聚焦时删除错误提示
    function handler_focus (goodsId,ticket_form) {
        ticket_form.find('#comment_content_' + goodsId).focus(function () {
            ticket_form.find('#comment_content_tip_' + goodsId).html('');
        });
    };

    //非订单商品review display
    function goods_review_display(){
      var goodsId = $('input[name="goods_id"]')[0].value;
  	  if($('input[name="order_sn"]')[0].value==""){
  		    if($('#user_name_' + goodsId).val()){
            	$('#review_user_' + goodsId).removeClass('review_user');
            }
 		    $('#review_content_display_' + goodsId).removeClass('review_content_display');
	   		var input = $("#sbmt_comment_"+goodsId);
			var iframe = $("#tickets_img_"+goodsId);
		    var width = input.width();
		    // $("#tickets_img_"+goodsId).load(function(){
		    // 	var div = $("#rule_"+goodsId);
  		  //   	var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
  		  //   	div.css('padding-left',422-iframeInput-width+'px');
  		  //   	$("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
  		  //   	$("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
  		  //   });
		    // $("#tickets_img_"+goodsId).ready(function(){
		    // 	var div = $("#rule_"+goodsId);
  		  //   	var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
  		  //   	div.css('padding-left',422-iframeInput-width+'px');
  		  //   	$("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
  		  //   	$("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
  		  //   });
		    // $(function(){
		    // 	var div = $("#rule_"+goodsId);
		    // 	var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
		    // 	div.css('padding-left',422-iframeInput-width+'px');
		    // 	$("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
		    // 	$("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
		    // });
		    iframe.width(470-width);

	     }
    }

    //review提交时,样式自适应
    function submit_review_display(){
        var goodsId = $('input[name="goods_id"]')[0].value;
  	   		var input = $("#sbmt_comment_"+goodsId);
  			var iframe = $("#tickets_img_"+goodsId);
  			var div = $("#rule_"+goodsId);
  		    var width = input.width();
  		    // $("#tickets_img_"+goodsId).load(function(){
  		    // 	var iframeInput = $("#tickets_img_"+goodsId).contents().find("#addPhoto").width();
  		    // 	div.css('padding-left',422-iframeInput-width+'px');
  		    // 	$("#tickets_img_"+goodsId).contents().find("#file1").width(iframeInput+62);
  		    // 	$("#tickets_img_"+goodsId).contents().find("#file2").width(iframeInput+62);
  		    // });
  		    iframe.width(470-width);
      }
    //检查表单
    function check_form (goodsId) {
        var ticket_form = $('#form_question_' + goodsId);
        //var star = ticket_form.find('#form_question_' + goodsId+ ' input[name="starstar"]').val();
        var star = $('#form_question_' + goodsId+ ' input[name="starstar"]')[0].value;
        if (star == 0) {
            ticket_form.find('#star_content_tip_' + goodsId).html(_lang.page_rating_required);
            var tip_width = ticket_form.find('#star_content_tip_' + goodsId).width();
        	ticket_form.find('#star_content_tip_' + goodsId).css("padding-right",285-tip_width+"px")
            return false;
        }

        var content = ticket_form.find('#comment_content_' + goodsId).val();
        if (content == '') {
            ticket_form.find('#comment_content_tip_' + goodsId).html(_lang.page_goods_review_is_empty);
            var tip_width = ticket_form.find('#comment_content_tip_' + goodsId).width();
        	ticket_form.find('#comment_content_tip_' + goodsId).css("padding-right",375-tip_width+"px")
            return false;
        } else if (content.length > 3000) {
            alert(_lang.page_goods_review_question_content_length);
            return false;
        }
        return true;
    };

    exports.init = function () {
    	//普通商品评论,直接展开评论
    	goods_review_display();

        //Your Rating
        $('.starx').rating({
            callback: function (value, link) {
            	var goodsId = $(this).closest("form").attr("data-goods-id");
            	var ticket_form = $('#form_question_' + goodsId);
                handler_focus(goodsId,ticket_form);

                $('#starnum_' + goodsId).html($('.starx[value="' + value + '"]').attr('title'));
                $('#startitle_' + goodsId).val($('.starx[value="' + value + '"]').attr('title'));
                $('#form_question_' + goodsId + ' input[name="starstar"]').val(value);
                $('#star_content_tip_' + goodsId).html('');
                if($('#user_name_' + goodsId).val()){
                	$('#review_user_' + goodsId).removeClass('review_user');
                }
                $('#review_content_display_' + goodsId).removeClass('review_content_display');

            }
        });




        $('.comment-form').each(function(){
    		var review_success = $(this).attr("data-review-success");
    		var goodsId = $(this).attr("data-goods-id");
        	if(review_success){
        		$(this).find('.starx').unbind();
        	}

            //提交表单
        	var ticket_form = $('#form_question_' + goodsId);
          	var btn_sm = ticket_form.find('#sbmt_comment_' + goodsId);
          	btn_sm.on('click', function () {
                  if (!check_form(goodsId)) {
                      return false;
                  }
                  attachment.upload(ticket_form, btn_sm);
                  btn_sm.unbind();
                  submit_review_display();
              });

			  $('#order_review_clear_' + goodsId).on('click',function(){
				  $('#review_user_' + goodsId).addClass('review_user');
				  $('#comment_content_' + goodsId).val('');
				  ticket_form.find('.starx').rating('drain');
				  $('#review_content_display_' + goodsId).addClass('review_content_display');
				  $('#starnum_' + goodsId).html('');
				  ticket_form.find('.starx').removeAttr('checked');
				  ticket_form.find('.starx').rating('clearSelection');
			  });

              ticket_form.on('submit', function () {
              	var btn_text = ffh.getBtnText(btn_sm);
                  var opt = {
                      'dataType': 'json',
                      'complete': function () {
                          btn_sm.prop('disabled', false);
                          ffh.setBtnText(btn_sm, btn_text);
                      },
                      'error': function () {
                          alert(_lang.page_common_unknow_error + ' ' + _lang.page_common_try_again);
                      },
                      'success': function (r) {
                          if (r.code == 0) {
                          	ticket_form.find('.starx').unbind();
                          	$("#review_success_" + goodsId).removeClass('success_display');
                          	$("#review_user_" + goodsId).addClass('review_user_display');
                          	$("#review_content_display_" + goodsId).addClass('content_display');
                              $('#comment_content').val('');
                          } else if(r.code == -1) {
                              alert(r.msg);
                              location.href = r.url;
                          } else {
                              alert(r.msg);
                          }
                      }
                  };
                  ticket_form.ajaxSubmit(opt);
                  return false;
              });


    	});

    };

    window.alertMsg =  function(s) {
      alert(s);

      var goodsId = $('input[name="goods_id"]')[0].value;

      var ticket_form = $('#form_question_' + goodsId);
      var btn_sm = $('#sbmt_comment_' + goodsId);
      var iframe = $("#tickets_img_"+goodsId);

      btn_sm.val(_lang.page_goods_submit_review);
      iframe.width(470 - btn_sm.width());

      btn_sm.prop('disabled', false);

      btn_sm.on('click', function () {
        if (!check_form(goodsId)) {
            return false;
        }
        attachment.upload(ticket_form, btn_sm);
        btn_sm.unbind();
        submit_review_display();
      });
    }
//});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../lib/jqueryForm":1,"../lib/jqueryRatingV2":2,"../mod/attachment":3,"../mod/checkCharLength":4,"../mod/formFieldsHandle":5}],"write_review_v2":[function(require,module,exports){
// require('./common')
require('../pages/write_review_v2').init(); //Post My Review v2
},{"../pages/write_review_v2":7}]},{},[])
//# sourceMappingURL=data:application/json;base64,
